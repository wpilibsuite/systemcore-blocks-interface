{
    "aliases": {
        "wpimath.units.abvolts": "float",
        "wpimath.units.acres": "float",
        "wpimath.units.ampere_hours": "float",
        "wpimath.units.amperes": "float",
        "wpimath.units.angstroms": "float",
        "wpimath.units.arcminutes": "float",
        "wpimath.units.arcseconds": "float",
        "wpimath.units.astronicalUnits": "float",
        "wpimath.units.atmospheres": "float",
        "wpimath.units.barrels": "float",
        "wpimath.units.bars": "float",
        "wpimath.units.becquerels": "float",
        "wpimath.units.british_thermal_units": "float",
        "wpimath.units.british_thermal_units_59": "float",
        "wpimath.units.british_thermal_units_iso": "float",
        "wpimath.units.bushels": "float",
        "wpimath.units.calories": "float",
        "wpimath.units.candelas": "float",
        "wpimath.units.carats": "float",
        "wpimath.units.celsius": "float",
        "wpimath.units.centimeters": "float",
        "wpimath.units.chains": "float",
        "wpimath.units.cords": "float",
        "wpimath.units.coulombs": "float",
        "wpimath.units.cubic_fathoms": "float",
        "wpimath.units.cubic_feet": "float",
        "wpimath.units.cubic_inches": "float",
        "wpimath.units.cubic_kilometers": "float",
        "wpimath.units.cubic_meters": "float",
        "wpimath.units.cubic_miles": "float",
        "wpimath.units.cubic_millimeters": "float",
        "wpimath.units.cubic_yards": "float",
        "wpimath.units.cubits": "float",
        "wpimath.units.cups": "float",
        "wpimath.units.curies": "float",
        "wpimath.units.dashes": "float",
        "wpimath.units.days": "float",
        "wpimath.units.degrees": "float",
        "wpimath.units.degrees_per_second": "float",
        "wpimath.units.degrees_per_second_squared": "float",
        "wpimath.units.degrees_squared": "float",
        "wpimath.units.drams": "float",
        "wpimath.units.drops": "float",
        "wpimath.units.dynes": "float",
        "wpimath.units.exabits": "float",
        "wpimath.units.exabits_per_second": "float",
        "wpimath.units.exabytes": "float",
        "wpimath.units.exabytes_per_second": "float",
        "wpimath.units.fahrenheit": "float",
        "wpimath.units.farads": "float",
        "wpimath.units.fathoms": "float",
        "wpimath.units.feet": "float",
        "wpimath.units.feet_per_second": "float",
        "wpimath.units.feet_per_second_squared": "float",
        "wpimath.units.fifths": "float",
        "wpimath.units.fluid_ounces": "float",
        "wpimath.units.foot_poundals": "float",
        "wpimath.units.foot_pounds": "float",
        "wpimath.units.footcandles": "float",
        "wpimath.units.furlongs": "float",
        "wpimath.units.gallons": "float",
        "wpimath.units.gauss": "float",
        "wpimath.units.gills": "float",
        "wpimath.units.gradians": "float",
        "wpimath.units.grams": "float",
        "wpimath.units.grams_per_milliliter": "float",
        "wpimath.units.grays": "float",
        "wpimath.units.gregorian_years": "float",
        "wpimath.units.hands": "float",
        "wpimath.units.hectares": "float",
        "wpimath.units.henries": "float",
        "wpimath.units.hertz": "float",
        "wpimath.units.horsepower": "float",
        "wpimath.units.hours": "float",
        "wpimath.units.inch_pounds": "float",
        "wpimath.units.inches": "float",
        "wpimath.units.joules": "float",
        "wpimath.units.julian_years": "float",
        "wpimath.units.kelvin": "float",
        "wpimath.units.kiloampere_hours": "float",
        "wpimath.units.kiloamperes": "float",
        "wpimath.units.kilobecquerels": "float",
        "wpimath.units.kilocalories": "float",
        "wpimath.units.kilocandelas": "float",
        "wpimath.units.kilocoulombs": "float",
        "wpimath.units.kilofarads": "float",
        "wpimath.units.kilogram_square_meters": "float",
        "wpimath.units.kilograms": "float",
        "wpimath.units.kilograms_per_cubic_meter": "float",
        "wpimath.units.kilograms_per_liter": "float",
        "wpimath.units.kilograys": "float",
        "wpimath.units.kilohenries": "float",
        "wpimath.units.kilohertz": "float",
        "wpimath.units.kilojoules": "float",
        "wpimath.units.kiloliters": "float",
        "wpimath.units.kilolumens": "float",
        "wpimath.units.kiloluxes": "float",
        "wpimath.units.kilometers": "float",
        "wpimath.units.kilometers_per_hour": "float",
        "wpimath.units.kilonewtons": "float",
        "wpimath.units.kiloohms": "float",
        "wpimath.units.kilopascals": "float",
        "wpimath.units.kiloponds": "float",
        "wpimath.units.kiloradians": "float",
        "wpimath.units.kiloseconds": "float",
        "wpimath.units.kilosiemens": "float",
        "wpimath.units.kilosieverts": "float",
        "wpimath.units.kilosteradians": "float",
        "wpimath.units.kiloteslas": "float",
        "wpimath.units.kilovolts": "float",
        "wpimath.units.kilowatt_hours": "float",
        "wpimath.units.kilowatts": "float",
        "wpimath.units.kilowebers": "float",
        "wpimath.units.knots": "float",
        "wpimath.units.leagues": "float",
        "wpimath.units.lightyears": "float",
        "wpimath.units.liters": "float",
        "wpimath.units.long_tons": "float",
        "wpimath.units.lumens": "float",
        "wpimath.units.lumens_per_square_inch": "float",
        "wpimath.units.luxes": "float",
        "wpimath.units.maxwells": "float",
        "wpimath.units.mbars": "float",
        "wpimath.units.meter_kilograms": "float",
        "wpimath.units.meters": "float",
        "wpimath.units.meters_per_second": "float",
        "wpimath.units.meters_per_second_squared": "float",
        "wpimath.units.meters_per_second_squared_per_volt": "float",
        "wpimath.units.metric_tons": "float",
        "wpimath.units.microampere_hours": "float",
        "wpimath.units.microamperes": "float",
        "wpimath.units.microbecquerels": "float",
        "wpimath.units.microcalories": "float",
        "wpimath.units.microcandelas": "float",
        "wpimath.units.microcoulombs": "float",
        "wpimath.units.microfarads": "float",
        "wpimath.units.micrograms": "float",
        "wpimath.units.micrograys": "float",
        "wpimath.units.microhenries": "float",
        "wpimath.units.microhertz": "float",
        "wpimath.units.microjoules": "float",
        "wpimath.units.microliters": "float",
        "wpimath.units.microlumens": "float",
        "wpimath.units.microluxes": "float",
        "wpimath.units.micrometers": "float",
        "wpimath.units.micronewtons": "float",
        "wpimath.units.microohms": "float",
        "wpimath.units.micropascals": "float",
        "wpimath.units.microradians": "float",
        "wpimath.units.microseconds": "float",
        "wpimath.units.microsiemens": "float",
        "wpimath.units.microsieverts": "float",
        "wpimath.units.microsteradians": "float",
        "wpimath.units.microteslas": "float",
        "wpimath.units.microvolts": "float",
        "wpimath.units.microwatts": "float",
        "wpimath.units.microwebers": "float",
        "wpimath.units.miles": "float",
        "wpimath.units.miles_per_hour": "float",
        "wpimath.units.milliampere_hours": "float",
        "wpimath.units.milliamperes": "float",
        "wpimath.units.milliarcseconds": "float",
        "wpimath.units.milliarcseconds_per_year": "float",
        "wpimath.units.millibecquerels": "float",
        "wpimath.units.millicalories": "float",
        "wpimath.units.millicandelas": "float",
        "wpimath.units.millicoulombs": "float",
        "wpimath.units.millifarads": "float",
        "wpimath.units.milligrams": "float",
        "wpimath.units.milligrays": "float",
        "wpimath.units.millihenries": "float",
        "wpimath.units.millihertz": "float",
        "wpimath.units.millijoules": "float",
        "wpimath.units.milliliters": "float",
        "wpimath.units.millilumens": "float",
        "wpimath.units.milliluxes": "float",
        "wpimath.units.millimeters": "float",
        "wpimath.units.millinewtons": "float",
        "wpimath.units.milliohms": "float",
        "wpimath.units.millipascals": "float",
        "wpimath.units.milliradians": "float",
        "wpimath.units.milliseconds": "float",
        "wpimath.units.millisiemens": "float",
        "wpimath.units.millisieverts": "float",
        "wpimath.units.millisteradians": "float",
        "wpimath.units.milliteslas": "float",
        "wpimath.units.millivolts": "float",
        "wpimath.units.milliwatts": "float",
        "wpimath.units.milliwebers": "float",
        "wpimath.units.mils": "float",
        "wpimath.units.minutes": "float",
        "wpimath.units.moles": "float",
        "wpimath.units.nanoampere_hours": "float",
        "wpimath.units.nanoamperes": "float",
        "wpimath.units.nanobecquerels": "float",
        "wpimath.units.nanocalories": "float",
        "wpimath.units.nanocandelas": "float",
        "wpimath.units.nanocoulombs": "float",
        "wpimath.units.nanofarads": "float",
        "wpimath.units.nanograms": "float",
        "wpimath.units.nanograys": "float",
        "wpimath.units.nanohenries": "float",
        "wpimath.units.nanohertz": "float",
        "wpimath.units.nanojoules": "float",
        "wpimath.units.nanoliters": "float",
        "wpimath.units.nanolumens": "float",
        "wpimath.units.nanoluxes": "float",
        "wpimath.units.nanometers": "float",
        "wpimath.units.nanonewtons": "float",
        "wpimath.units.nanoohms": "float",
        "wpimath.units.nanopascals": "float",
        "wpimath.units.nanoradians": "float",
        "wpimath.units.nanoseconds": "float",
        "wpimath.units.nanosiemens": "float",
        "wpimath.units.nanosieverts": "float",
        "wpimath.units.nanosteradians": "float",
        "wpimath.units.nanoteslas": "float",
        "wpimath.units.nanovolts": "float",
        "wpimath.units.nanowatts": "float",
        "wpimath.units.nanowebers": "float",
        "wpimath.units.nauticalLeagues": "float",
        "wpimath.units.nauticalMiles": "float",
        "wpimath.units.newton_meters": "float",
        "wpimath.units.newtons": "float",
        "wpimath.units.ohms": "float",
        "wpimath.units.ounces": "float",
        "wpimath.units.ounces_per_cubic_foot": "float",
        "wpimath.units.ounces_per_cubic_inch": "float",
        "wpimath.units.ounces_per_gallon": "float",
        "wpimath.units.parsecs": "float",
        "wpimath.units.parts_per_billion": "float",
        "wpimath.units.parts_per_million": "float",
        "wpimath.units.parts_per_trillion": "float",
        "wpimath.units.pascals": "float",
        "wpimath.units.pecks": "float",
        "wpimath.units.percent": "float",
        "wpimath.units.phots": "float",
        "wpimath.units.pinches": "float",
        "wpimath.units.pints": "float",
        "wpimath.units.poundals": "float",
        "wpimath.units.pounds": "float",
        "wpimath.units.pounds_per_cubic_foot": "float",
        "wpimath.units.pounds_per_cubic_inch": "float",
        "wpimath.units.pounds_per_gallon": "float",
        "wpimath.units.pounds_per_square_inch": "float",
        "wpimath.units.quarts": "float",
        "wpimath.units.radians": "float",
        "wpimath.units.radians_per_meter": "float",
        "wpimath.units.radians_per_second": "float",
        "wpimath.units.radians_per_second_per_volt": "float",
        "wpimath.units.radians_per_second_squared": "float",
        "wpimath.units.rads": "float",
        "wpimath.units.rankine": "float",
        "wpimath.units.reaumur": "float",
        "wpimath.units.revolutions_per_minute": "float",
        "wpimath.units.rutherfords": "float",
        "wpimath.units.sacks": "float",
        "wpimath.units.seconds": "float",
        "wpimath.units.short_tons": "float",
        "wpimath.units.shots": "float",
        "wpimath.units.siemens": "float",
        "wpimath.units.sieverts": "float",
        "wpimath.units.slugs": "float",
        "wpimath.units.slugs_per_cubic_foot": "float",
        "wpimath.units.spats": "float",
        "wpimath.units.square_feet": "float",
        "wpimath.units.square_inches": "float",
        "wpimath.units.square_kilometers": "float",
        "wpimath.units.square_meters": "float",
        "wpimath.units.square_miles": "float",
        "wpimath.units.standard_gravity": "float",
        "wpimath.units.statvolts": "float",
        "wpimath.units.steradians": "float",
        "wpimath.units.stone": "float",
        "wpimath.units.strikes": "float",
        "wpimath.units.tablespoons": "float",
        "wpimath.units.teaspoons": "float",
        "wpimath.units.teslas": "float",
        "wpimath.units.therms": "float",
        "wpimath.units.torrs": "float",
        "wpimath.units.turns": "float",
        "wpimath.units.turns_per_second": "float",
        "wpimath.units.turns_per_second_squared": "float",
        "wpimath.units.unit_seconds_squared_per_unit": "float",
        "wpimath.units.units_per_second": "float",
        "wpimath.units.units_per_second_squared": "float",
        "wpimath.units.volt_seconds": "float",
        "wpimath.units.volt_seconds_per_feet": "float",
        "wpimath.units.volt_seconds_per_meter": "float",
        "wpimath.units.volt_seconds_per_radian": "float",
        "wpimath.units.volt_seconds_squared": "float",
        "wpimath.units.volt_seconds_squared_per_feet": "float",
        "wpimath.units.volt_seconds_squared_per_meter": "float",
        "wpimath.units.volt_seconds_squared_per_radian": "float",
        "wpimath.units.volts": "float",
        "wpimath.units.watt_hours": "float",
        "wpimath.units.watts": "float",
        "wpimath.units.webers": "float",
        "wpimath.units.weeks": "float",
        "wpimath.units.yards": "float",
        "wpimath.units.years": "float"
    },
    "classes": [
        {
            "className": "expansion_hub.ExpansionHub",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "hubNumber",
                            "type": "int"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHub",
                    "functionName": "__init__",
                    "returnType": "expansion_hub.ExpansionHub",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHub"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHub",
                    "functionName": "getBatteryVoltage",
                    "returnType": "float",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "motorNumber",
                            "type": "int"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHub",
                    "functionName": "getMotor",
                    "returnType": "expansion_hub.ExpansionHubMotor",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "servoNumber",
                            "type": "int"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHub",
                    "functionName": "getServo",
                    "returnType": "expansion_hub.ExpansionHubServo",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHub"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHub",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "expansion_hub",
            "staticMethods": []
        },
        {
            "className": "expansion_hub.ExpansionHubMotor",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "hubNumber",
                            "type": "int"
                        },
                        {
                            "defaultValue": "",
                            "name": "motorNumber",
                            "type": "int"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "__init__",
                    "returnType": "expansion_hub.ExpansionHubMotor",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "getCurrent",
                    "returnType": "float",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "getEncoder",
                    "returnType": "float",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "getEncoderVelocity",
                    "returnType": "float",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "getPositionPidConstants",
                    "returnType": "expansion_hub.ExpansionHubPidConstants",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "getVelocityPidConstants",
                    "returnType": "expansion_hub.ExpansionHubPidConstants",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "isHubConnected",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "resetEncoder",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "perCount",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "setDistancePerCount",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "setEnabled",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "floatOn0",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "setFloatOn0",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "power",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "setPercentagePower",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "setpoint",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "setPositionSetpoint",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "reversed",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "setReversed",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "setpoint",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "setVelocitySetpoint",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltage",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubMotor",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "expansion_hub",
            "staticMethods": []
        },
        {
            "className": "expansion_hub.ExpansionHubPidConstants",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "hubNumber",
                            "type": "int"
                        },
                        {
                            "defaultValue": "",
                            "name": "motorNumber",
                            "type": "int"
                        },
                        {
                            "defaultValue": "",
                            "name": "isVelocityPid",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubPidConstants",
                    "functionName": "__init__",
                    "returnType": "expansion_hub.ExpansionHubPidConstants",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubPidConstants"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubPidConstants",
                    "functionName": "disableContinousInput",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubPidConstants"
                        },
                        {
                            "defaultValue": "",
                            "name": "minimum",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "maximum",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubPidConstants",
                    "functionName": "enableContinousInput",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubPidConstants"
                        },
                        {
                            "defaultValue": "",
                            "name": "s",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "v",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "a",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubPidConstants",
                    "functionName": "setFF",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubPidConstants"
                        },
                        {
                            "defaultValue": "",
                            "name": "p",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "d",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubPidConstants",
                    "functionName": "setPID",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "expansion_hub",
            "staticMethods": []
        },
        {
            "className": "expansion_hub.ExpansionHubServo",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "hubNumber",
                            "type": "int"
                        },
                        {
                            "defaultValue": "",
                            "name": "servoNumber",
                            "type": "int"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubServo",
                    "functionName": "__init__",
                    "returnType": "expansion_hub.ExpansionHubServo",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubServo"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubServo",
                    "functionName": "isHubConnected",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubServo"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubServo",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubServo"
                        },
                        {
                            "defaultValue": "",
                            "name": "degrees",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubServo",
                    "functionName": "setAngle",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubServo"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubServo",
                    "functionName": "setEnabled",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubServo"
                        },
                        {
                            "defaultValue": "",
                            "name": "framePeriod",
                            "type": "int"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubServo",
                    "functionName": "setFramePeriod",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "expansion_hub.ExpansionHubServo"
                        },
                        {
                            "defaultValue": "",
                            "name": "pulseWidth",
                            "type": "int"
                        }
                    ],
                    "declaringClassName": "expansion_hub.ExpansionHubServo",
                    "functionName": "setPulseWidth",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "expansion_hub",
            "staticMethods": []
        },
        {
            "className": "wpilib.ADXL345_I2C",
            "classVariables": [
                {
                    "name": "kAddress",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "wpilib.I2C.Port"
                        },
                        {
                            "defaultValue": "<Range.kRange_2G: 0>",
                            "name": "range",
                            "type": "wpilib.ADXL345_I2C.Range"
                        },
                        {
                            "defaultValue": "29",
                            "name": "deviceAddress",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "__init__",
                    "returnType": "wpilib.ADXL345_I2C",
                    "tooltip": "Constructs the ADXL345 Accelerometer over I2C.\n\n:param port:          The I2C port the accelerometer is attached to\n:param range:         The range (+ or -) that the accelerometer will measure\n:param deviceAddress: The I2C address of the accelerometer (0x1D or 0x53)"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "wpilib.ADXL345_I2C.Axes"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "getAcceleration",
                    "returnType": "float",
                    "tooltip": "Get the acceleration of one axis in Gs.\n\n:param axis: The axis to read from.\n\n:returns: Acceleration of the ADXL345 in Gs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "getAccelerations",
                    "returnType": "wpilib.ADXL345_I2C.AllAxes",
                    "tooltip": "Get the acceleration of all axes in Gs.\n\n:returns: An object containing the acceleration measured on each axis of the\n          ADXL345 in Gs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "getI2CDeviceAddress",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "getI2CPort",
                    "returnType": "wpilib.I2C.Port",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "getX",
                    "returnType": "float",
                    "tooltip": "Returns the acceleration along the X axis in g-forces.\n\n:returns: The acceleration along the X axis in g-forces."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "getY",
                    "returnType": "float",
                    "tooltip": "Returns the acceleration along the Y axis in g-forces.\n\n:returns: The acceleration along the Y axis in g-forces."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "getZ",
                    "returnType": "float",
                    "tooltip": "Returns the acceleration along the Z axis in g-forces.\n\n:returns: The acceleration along the Z axis in g-forces."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "ntcore.NTSendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.ADXL345_I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "range",
                            "type": "wpilib.ADXL345_I2C.Range"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C",
                    "functionName": "setRange",
                    "returnType": "None",
                    "tooltip": "Set the measuring range of the accelerometer.\n\n:param range: The maximum acceleration, positive or negative, that the\n              accelerometer will measure."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.ADXL345_I2C.AllAxes",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.ADXL345_I2C.AllAxes",
                    "functionName": "__init__",
                    "returnType": "wpilib.ADXL345_I2C.AllAxes",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "XAxis",
                    "tooltip": "Acceleration along the X axis in g-forces.",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "YAxis",
                    "tooltip": "Acceleration along the Y axis in g-forces.",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "ZAxis",
                    "tooltip": "Acceleration along the Z axis in g-forces.",
                    "type": "float",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.ADXL345_I2C.Axes",
            "classVariables": [
                {
                    "name": "kAxis_X",
                    "tooltip": "",
                    "type": "wpilib.ADXL345_I2C.Axes",
                    "writable": false
                },
                {
                    "name": "kAxis_Y",
                    "tooltip": "",
                    "type": "wpilib.ADXL345_I2C.Axes",
                    "writable": false
                },
                {
                    "name": "kAxis_Z",
                    "tooltip": "",
                    "type": "wpilib.ADXL345_I2C.Axes",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C.Axes",
                    "functionName": "__init__",
                    "returnType": "wpilib.ADXL345_I2C.Axes",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.ADXL345_I2C.Range",
            "classVariables": [
                {
                    "name": "kRange_16G",
                    "tooltip": "",
                    "type": "wpilib.ADXL345_I2C.Range",
                    "writable": false
                },
                {
                    "name": "kRange_2G",
                    "tooltip": "",
                    "type": "wpilib.ADXL345_I2C.Range",
                    "writable": false
                },
                {
                    "name": "kRange_4G",
                    "tooltip": "",
                    "type": "wpilib.ADXL345_I2C.Range",
                    "writable": false
                },
                {
                    "name": "kRange_8G",
                    "tooltip": "",
                    "type": "wpilib.ADXL345_I2C.Range",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.ADXL345_I2C.Range",
                    "functionName": "__init__",
                    "returnType": "wpilib.ADXL345_I2C.Range",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.AddressableLED",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED",
                    "functionName": "__init__",
                    "returnType": "wpilib.AddressableLED",
                    "tooltip": "Constructs a new driver for a specific channel.\n\n:param channel: the output channel to use"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": "Gets the channel for this addressable LED.\n\n:returns: channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED",
                    "functionName": "getStart",
                    "returnType": "int",
                    "tooltip": "Gets the display start of the LED strip in the global buffer.\n\n:returns: the strip start, in LEDs"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED"
                        },
                        {
                            "defaultValue": "",
                            "name": "order",
                            "type": "wpilib.AddressableLED.ColorOrder"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED",
                    "functionName": "setColorOrder",
                    "returnType": "None",
                    "tooltip": "Sets the color order for this AddressableLED. The default order is GRB.\n\nThis will take effect on the next call to SetData().\n\n:param order: the color order"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED"
                        },
                        {
                            "defaultValue": "",
                            "name": "ledData",
                            "type": "List[wpilib.AddressableLED.LEDData]"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED",
                    "functionName": "setData",
                    "returnType": "None",
                    "tooltip": "Sets the LED output data. This will write to the global buffer starting at\nthe location set by SetStart() and up to the length set by SetLength().\n\n:param ledData: the buffer to write"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED",
                    "functionName": "setLength",
                    "returnType": "None",
                    "tooltip": "Sets the length of the LED strip.\n\n:param length: the strip length, in LEDs"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED",
                    "functionName": "setStart",
                    "returnType": "None",
                    "tooltip": "Sets the display start of the LED strip in the global buffer.\n\n:param start: the strip start, in LEDs"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "colorOrder",
                            "type": "wpilib.AddressableLED.ColorOrder"
                        },
                        {
                            "defaultValue": "",
                            "name": "ledData",
                            "type": "List[wpilib.AddressableLED.LEDData]"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED",
                    "functionName": "setGlobalData",
                    "returnType": "None",
                    "tooltip": "Sets the LED output data at an arbitrary location in the global buffer.\n\n:param start:      the start location, in LEDs\n:param colorOrder: the color order\n:param ledData:    the buffer to write"
                }
            ]
        },
        {
            "className": "wpilib.AddressableLED.ColorOrder",
            "classVariables": [
                {
                    "name": "kBGR",
                    "tooltip": "",
                    "type": "wpilib.AddressableLED.ColorOrder",
                    "writable": false
                },
                {
                    "name": "kBRG",
                    "tooltip": "",
                    "type": "wpilib.AddressableLED.ColorOrder",
                    "writable": false
                },
                {
                    "name": "kGBR",
                    "tooltip": "",
                    "type": "wpilib.AddressableLED.ColorOrder",
                    "writable": false
                },
                {
                    "name": "kGRB",
                    "tooltip": "",
                    "type": "wpilib.AddressableLED.ColorOrder",
                    "writable": false
                },
                {
                    "name": "kRBG",
                    "tooltip": "",
                    "type": "wpilib.AddressableLED.ColorOrder",
                    "writable": false
                },
                {
                    "name": "kRGB",
                    "tooltip": "",
                    "type": "wpilib.AddressableLED.ColorOrder",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED.ColorOrder",
                    "functionName": "__init__",
                    "returnType": "wpilib.AddressableLED.ColorOrder",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.AddressableLED.LEDData",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.AddressableLED.LEDData",
                    "functionName": "__init__",
                    "returnType": "wpilib.AddressableLED.LEDData",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "g",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "b",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED.LEDData",
                    "functionName": "__init__",
                    "returnType": "wpilib.AddressableLED.LEDData",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED.LEDData"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "s",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "v",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED.LEDData",
                    "functionName": "setHSV",
                    "returnType": "None",
                    "tooltip": "A helper method to set all values of the LED.\n\n:param h: the h value [0-180]\n:param s: the s value [0-255]\n:param v: the v value [0-255]"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED.LEDData"
                        },
                        {
                            "defaultValue": "",
                            "name": "color",
                            "type": "wpilib.Color"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED.LEDData",
                    "functionName": "setLED",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED.LEDData"
                        },
                        {
                            "defaultValue": "",
                            "name": "color",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED.LEDData",
                    "functionName": "setLED",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AddressableLED.LEDData"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "g",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "b",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AddressableLED.LEDData",
                    "functionName": "setRGB",
                    "returnType": "None",
                    "tooltip": "A helper method to set all values of the LED.\n\n:param r: the r value [0-255]\n:param g: the g value [0-255]\n:param b: the b value [0-255]"
                }
            ],
            "instanceVariables": [
                {
                    "name": "b",
                    "tooltip": "///< blue value",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "g",
                    "tooltip": "///< green value",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "r",
                    "tooltip": "///< red value",
                    "type": "int",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Alert",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "text",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.Alert.AlertType"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert",
                    "functionName": "__init__",
                    "returnType": "wpilib.Alert",
                    "tooltip": "Creates a new alert in the default group - \"Alerts\". If this is the first\nto be instantiated, the appropriate entries will be added to NetworkTables.\n\n:param text: Text to be displayed when the alert is active.\n:param type: Alert urgency level."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "group",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "text",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.Alert.AlertType"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert",
                    "functionName": "__init__",
                    "returnType": "wpilib.Alert",
                    "tooltip": "Creates a new alert. If this is the first to be instantiated in its group,\nthe appropriate entries will be added to NetworkTables.\n\n:param group: Group identifier, used as the entry name in NetworkTables.\n:param text:  Text to be displayed when the alert is active.\n:param type:  Alert urgency level."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Alert"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert",
                    "functionName": "close",
                    "returnType": "None",
                    "tooltip": "Disables the alert"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Alert"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert",
                    "functionName": "get",
                    "returnType": "bool",
                    "tooltip": "Gets whether the alert is active.\n\n:returns: whether the alert is active."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Alert"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert",
                    "functionName": "getText",
                    "returnType": "str",
                    "tooltip": "Gets the current alert text.\n\n:returns: the current text."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Alert"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert",
                    "functionName": "getType",
                    "returnType": "wpilib.Alert.AlertType",
                    "tooltip": "Get the type of this alert.\n\n:returns: the type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Alert"
                        },
                        {
                            "defaultValue": "",
                            "name": "active",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Sets whether the alert should currently be displayed. This method can be\nsafely called periodically.\n\n:param active: Whether to display the alert."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Alert"
                        },
                        {
                            "defaultValue": "",
                            "name": "text",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert",
                    "functionName": "setText",
                    "returnType": "None",
                    "tooltip": "Updates current alert text. Use this method to dynamically change the\ndisplayed alert, such as including more details about the detected problem.\n\n:param text: Text to be displayed when the alert is active."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Alert.AlertType",
            "classVariables": [
                {
                    "name": "kError",
                    "tooltip": "",
                    "type": "wpilib.Alert.AlertType",
                    "writable": false
                },
                {
                    "name": "kInfo",
                    "tooltip": "",
                    "type": "wpilib.Alert.AlertType",
                    "writable": false
                },
                {
                    "name": "kWarning",
                    "tooltip": "",
                    "type": "wpilib.Alert.AlertType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Alert.AlertType",
                    "functionName": "__init__",
                    "returnType": "wpilib.Alert.AlertType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.AnalogAccelerometer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogAccelerometer",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogAccelerometer",
                    "tooltip": "Create a new instance of an accelerometer.\n\nThe constructor allocates desired analog input.\n\n:param channel: The channel number for the analog input the accelerometer is\n                connected to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogAccelerometer",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogAccelerometer",
                    "tooltip": "Create a new instance of Accelerometer from an existing AnalogInput.\n\nMake a new instance of accelerometer given an AnalogInput. This is\nparticularly useful if the port is going to be read as an analog channel as\nwell as through the Accelerometer class.\n\n:param channel: The existing AnalogInput object for the analog input the\n                accelerometer is connected to"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogAccelerometer"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogAccelerometer",
                    "functionName": "getAcceleration",
                    "returnType": "float",
                    "tooltip": "Return the acceleration in Gs.\n\nThe acceleration is returned units of Gs.\n\n:returns: The current acceleration of the sensor in Gs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogAccelerometer"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogAccelerometer",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogAccelerometer"
                        },
                        {
                            "defaultValue": "",
                            "name": "sensitivity",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogAccelerometer",
                    "functionName": "setSensitivity",
                    "returnType": "None",
                    "tooltip": "Set the accelerometer sensitivity.\n\nThis sets the sensitivity of the accelerometer used for calculating the\nacceleration. The sensitivity varies by accelerometer model.\n\n:param sensitivity: The sensitivity of accelerometer in Volts per G."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogAccelerometer"
                        },
                        {
                            "defaultValue": "",
                            "name": "zero",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogAccelerometer",
                    "functionName": "setZero",
                    "returnType": "None",
                    "tooltip": "Set the voltage that corresponds to 0 G.\n\nThe zero G voltage varies by accelerometer model.\n\n:param zero: The zero G voltage."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.AnalogEncoder",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogEncoder",
                    "tooltip": "Construct a new AnalogEncoder attached to a specific AnalogIn channel.\n\nThis has a fullRange of 1 and an expectedZero of 0.\n\n:param channel: the analog input channel to attach to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "analogInput",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogEncoder",
                    "tooltip": "Construct a new AnalogEncoder attached to a specific AnalogInput.\n\nThis has a fullRange of 1 and an expectedZero of 0.\n\n:param analogInput: the analog input to attach to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "fullRange",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "expectedZero",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogEncoder",
                    "tooltip": "Construct a new AnalogEncoder attached to a specific AnalogIn channel.\n\n:param channel:      the analog input channel to attach to\n:param fullRange:    the value to report at maximum travel\n:param expectedZero: the reading where you would expect a 0 from get()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "analogInput",
                            "type": "wpilib.AnalogInput"
                        },
                        {
                            "defaultValue": "",
                            "name": "fullRange",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "expectedZero",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogEncoder",
                    "tooltip": "Construct a new AnalogEncoder attached to a specific AnalogInput.\n\n:param analogInput:  the analog input to attach to\n:param fullRange:    the value to report at maximum travel\n:param expectedZero: the reading where you would expect a 0 from get()"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogEncoder"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the encoder value.\n\n:returns: the encoder value scaled by the full range input"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogEncoder"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel number.\n\n:returns: The channel number."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogEncoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogEncoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "inverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": "Set if this encoder is inverted.\n\n:param inverted: true to invert the encoder, false otherwise"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogEncoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "min",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "max",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogEncoder",
                    "functionName": "setVoltagePercentageRange",
                    "returnType": "None",
                    "tooltip": "Set the encoder voltage percentage range. Analog sensors are not always\nfully stable at the end of their travel ranges. Shrinking this range down\ncan help mitigate issues with that.\n\n:param min: minimum voltage percentage (0-1 range)\n:param max: maximum voltage percentage (0-1 range)"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.AnalogGyro",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogGyro",
                    "tooltip": "%Gyro constructor using the Analog Input channel number.\n\n:param channel: The analog channel the gyro is connected to. Gyros can only\n                be used on on-board Analog Inputs 0-1."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogGyro",
                    "tooltip": "%Gyro constructor with a precreated AnalogInput object.\n\nUse this constructor when the analog channel needs to be shared.\nThis object will not clean up the AnalogInput object when using this\nconstructor.\n\n:param channel: A pointer to the AnalogInput object that the gyro is\n                connected to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "offset",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogGyro",
                    "tooltip": "%Gyro constructor using the Analog Input channel number with parameters for\npresetting the center and offset values. Bypasses calibration.\n\n:param channel: The analog channel the gyro is connected to. Gyros can only\n                be used on on-board Analog Inputs 0-1.\n:param center:  Preset uncalibrated value to use as the accumulator center\n                value.\n:param offset:  Preset uncalibrated value to use as the gyro offset."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "wpilib.AnalogInput"
                        },
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "offset",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogGyro",
                    "tooltip": "%Gyro constructor with a precreated AnalogInput object and calibrated\nparameters.\n\nUse this constructor when the analog channel needs to be shared.\nThis object will not clean up the AnalogInput object when using this\nconstructor.\n\n:param channel: A pointer to the AnalogInput object that the gyro is\n                connected to.\n:param center:  Preset uncalibrated value to use as the accumulator center\n                value.\n:param offset:  Preset uncalibrated value to use as the gyro offset."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "calibrate",
                    "returnType": "None",
                    "tooltip": "Calibrate the gyro by running for a number of samples and computing the\ncenter value. Then use the center value as the Accumulator center value for\nsubsequent measurements.\n\nIt's important to make sure that the robot is not moving while the\ncentering calculations are in progress, this is typically done when the\nrobot is first turned on while it's sitting at rest before the competition\nstarts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "getAnalogInput",
                    "returnType": "wpilib.AnalogInput",
                    "tooltip": "Gets the analog input for the gyro.\n\n:returns: AnalogInput"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "getAngle",
                    "returnType": "float",
                    "tooltip": "Return the actual angle in degrees that the robot is currently facing.\n\nThe angle is based on the current accumulator value corrected by the\noversampling rate, the gyro type and the A/D calibration values. The angle\nis continuous, that is it will continue from 360->361 degrees. This allows\nalgorithms that wouldn't want to see a discontinuity in the gyro output as\nit sweeps from 360 to 0 on the second time around.\n\n:returns: The current heading of the robot in degrees. This heading is based\n          on integration of the returned rate from the gyro."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "getCenter",
                    "returnType": "int",
                    "tooltip": "Return the gyro center value. If run after calibration,\nthe center value can be used as a preset later.\n\n:returns: the current center value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "getOffset",
                    "returnType": "float",
                    "tooltip": "Return the gyro offset value. If run after calibration,\nthe offset value can be used as a preset later.\n\n:returns: the current offset value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "getRate",
                    "returnType": "float",
                    "tooltip": "Return the rate of rotation of the gyro\n\nThe rate is based on the most recent reading of the gyro analog value\n\n:returns: the current rate in degrees per second"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "getRotation2d",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Return the heading of the robot as a Rotation2d.\n\nThe angle is continuous, that is it will continue from 360 to 361 degrees.\nThis allows algorithms that wouldn't want to see a discontinuity in the\ngyro output as it sweeps past from 360 to 0 on the second time around.\n\nThe angle is expected to increase as the gyro turns counterclockwise when\nlooked at from the top. It needs to follow the NWU axis convention.\n\n:returns: the current heading of the robot as a Rotation2d. This heading is\n          based on integration of the returned rate from the gyro."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "initGyro",
                    "returnType": "None",
                    "tooltip": "Initialize the gyro.\n\nCalibration is handled by Calibrate()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the gyro.\n\nResets the gyro to a heading of zero. This can be used if there is\nsignificant drift in the gyro and it needs to be recalibrated after it has\nbeen running."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        },
                        {
                            "defaultValue": "",
                            "name": "volts",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "setDeadband",
                    "returnType": "None",
                    "tooltip": "Set the size of the neutral zone.\n\nAny voltage from the gyro less than this amount from the center is\nconsidered stationary.  Setting a deadband will decrease the amount of\ndrift when the gyro isn't rotating, but will make it less accurate.\n\n:param volts: The size of the deadband in volts"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogGyro"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltsPerDegreePerSecond",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogGyro",
                    "functionName": "setSensitivity",
                    "returnType": "None",
                    "tooltip": "Set the gyro sensitivity.\n\nThis takes the number of volts/degree/second sensitivity of the gyro and\nuses it in subsequent calculations to allow the code to work with multiple\ngyros. This value is typically found in the gyro datasheet.\n\n:param voltsPerDegreePerSecond: The sensitivity in Volts/degree/second"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.AnalogInput",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogInput",
                    "tooltip": "Construct an analog input.\n\n:param channel: The channel number on the roboRIO to represent. 0-3 are\n                on-board 4-7 are on the MXP port."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getAverageBits",
                    "returnType": "int",
                    "tooltip": "Get the number of averaging bits previously configured.\n\nThis gets the number of averaging bits from the FPGA. The actual number of\naveraged samples is 2^bits. The averaging is done automatically in the\nFPGA.\n\n:returns: Number of bits of averaging previously configured."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getAverageValue",
                    "returnType": "int",
                    "tooltip": "Get a sample from the output of the oversample and average engine for this\nchannel.\n\nThe sample is 12-bit + the bits configured in SetOversampleBits().\nThe value configured in SetAverageBits() will cause this value to be\naveraged 2**bits number of samples.\n\nThis is not a sliding window. The sample will not change until\n2**(OversampleBits + AverageBits) samples have been acquired from the\nmodule on this channel.\n\nUse GetAverageVoltage() to get the analog value in calibrated units.\n\n:returns: A sample from the oversample and average engine for this channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getAverageVoltage",
                    "returnType": "float",
                    "tooltip": "Get a scaled sample from the output of the oversample and average engine\nfor this channel.\n\nThe value is scaled to units of Volts using the calibrated scaling data\nfrom GetLSBWeight() and GetOffset().\n\nUsing oversampling will cause this value to be higher resolution, but it\nwill update more slowly.\n\nUsing averaging will cause this value to be more stable, but it will update\nmore slowly.\n\n:returns: A scaled sample from the output of the oversample and average\n          engine for this channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel number.\n\n:returns: The channel number."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getLSBWeight",
                    "returnType": "int",
                    "tooltip": "Get the factory scaling least significant bit weight constant.\n\nVolts = ((LSB_Weight * 1e-9) * raw) - (Offset * 1e-9)\n\n:returns: Least significant bit weight."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getOffset",
                    "returnType": "int",
                    "tooltip": "Get the factory scaling offset constant.\n\nVolts = ((LSB_Weight * 1e-9) * raw) - (Offset * 1e-9)\n\n:returns: Offset constant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getOversampleBits",
                    "returnType": "int",
                    "tooltip": "Get the number of oversample bits previously configured.\n\nThis gets the number of oversample bits from the FPGA. The actual number of\noversampled values is 2^bits. The oversampling is done automatically in the\nFPGA.\n\n:returns: Number of bits of oversampling previously configured."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getValue",
                    "returnType": "int",
                    "tooltip": "Get a sample straight from this channel.\n\nThe sample is a 12-bit value representing the 0V to 3.3V range of the A/D\nconverter in the module.  The units are in A/D converter codes.  Use\nGetVoltage() to get the analog value in calibrated units.\n\n:returns: A sample straight from this channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getVoltage",
                    "returnType": "float",
                    "tooltip": "Get a scaled sample straight from this channel.\n\nThe value is scaled to units of Volts using the calibrated scaling data\nfrom GetLSBWeight() and GetOffset().\n\n:returns: A scaled sample straight from this channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        },
                        {
                            "defaultValue": "",
                            "name": "bits",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "setAverageBits",
                    "returnType": "None",
                    "tooltip": "Set the number of averaging bits.\n\nThis sets the number of averaging bits. The actual number of averaged\nsamples is 2^bits.\n\nUse averaging to improve the stability of your measurement at the expense\nof sampling rate. The averaging is done automatically in the FPGA.\n\n:param bits: Number of bits of averaging."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        },
                        {
                            "defaultValue": "",
                            "name": "bits",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "setOversampleBits",
                    "returnType": "None",
                    "tooltip": "Set the number of oversample bits.\n\nThis sets the number of oversample bits. The actual number of oversampled\nvalues is 2^bits. Use oversampling to improve the resolution of your\nmeasurements at the expense of sampling rate. The oversampling is done\nautomatically in the FPGA.\n\n:param bits: Number of bits of oversampling."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogInput"
                        },
                        {
                            "defaultValue": "",
                            "name": "device",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "setSimDevice",
                    "returnType": "None",
                    "tooltip": "Indicates this input is used by a simulated device.\n\n:param device: simulated device handle"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "getSampleRate",
                    "returnType": "float",
                    "tooltip": "Get the current sample rate for all channels\n\n:returns: Sample rate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "samplesPerSecond",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogInput",
                    "functionName": "setSampleRate",
                    "returnType": "None",
                    "tooltip": "Set the sample rate per channel for all analog channels.\n\nThe maximum rate is 500kS/s divided by the number of channels in use.\nThis is 62500 samples/s per channel.\n\n:param samplesPerSecond: The number of samples per second."
                }
            ]
        },
        {
            "className": "wpilib.AnalogPotentiometer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "1.0",
                            "name": "fullRange",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "offset",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogPotentiometer",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogPotentiometer",
                    "tooltip": "Construct an Analog Potentiometer object from a channel number.\n\nUse the fullRange and offset values so that the output produces meaningful\nvalues. I.E: you have a 270 degree potentiometer and you want the output to\nbe degrees with the halfway point as 0 degrees. The fullRange value is\n270.0 degrees and the offset is -135.0 since the halfway point after\nscaling is 135 degrees.\n\nThis will calculate the result from the fullRange times the fraction of the\nsupply voltage, plus the offset.\n\n:param channel:   The Analog Input channel number on the roboRIO the\n                  potentiometer is plugged into. 0-3 are on-board and 4-7\n                  are on the MXP port.\n:param fullRange: The value (in desired units) representing the full\n                  0-3.3V range of the input.\n:param offset:    The value (in desired units) representing the\n                  angular output at 0V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "input",
                            "type": "wpilib.AnalogInput"
                        },
                        {
                            "defaultValue": "1.0",
                            "name": "fullRange",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "offset",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogPotentiometer",
                    "functionName": "__init__",
                    "returnType": "wpilib.AnalogPotentiometer",
                    "tooltip": "Construct an Analog Potentiometer object from an existing Analog Input\npointer.\n\nUse the fullRange and offset values so that the output produces meaningful\nvalues. I.E: you have a 270 degree potentiometer and you want the output to\nbe degrees with the halfway point as 0 degrees. The fullRange value is\n270.0 degrees and the offset is -135.0 since the halfway point after\nscaling is 135 degrees.\n\nThis will calculate the result from the fullRange times the fraction of the\nsupply voltage, plus the offset.\n\n:param input:     The existing Analog Input pointer\n:param fullRange: The value (in desired units) representing the full\n                  0-3.3V range of the input.\n:param offset:    The value (in desired units) representing the\n                  angular output at 0V."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogPotentiometer"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogPotentiometer",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the current reading of the potentiometer.\n\n:returns: The current position of the potentiometer (in the units used for\n          fullRange and offset)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.AnalogPotentiometer"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.AnalogPotentiometer",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.CAN",
            "classVariables": [
                {
                    "name": "kTeamDeviceType",
                    "tooltip": "",
                    "type": "hal._wpiHal.CANDeviceType",
                    "writable": false
                },
                {
                    "name": "kTeamManufacturer",
                    "tooltip": "",
                    "type": "hal._wpiHal.CANManufacturer",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "deviceId",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "__init__",
                    "returnType": "wpilib.CAN",
                    "tooltip": "Create a new CAN communication interface with the specific device ID.\nThis uses the team manufacturer and device types.\nThe device ID is 6 bits (0-63)\n\n:param busId:    The bus id\n:param deviceId: The device id"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "deviceId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "deviceManufacturer",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "deviceType",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "__init__",
                    "returnType": "wpilib.CAN",
                    "tooltip": "Create a new CAN communication interface with a specific device ID,\nmanufacturer and device type. The device ID is 6 bits, the\nmanufacturer is 8 bits, and the device type is 5 bits.\n\n:param busId:              The bus id\n:param deviceId:           The device ID\n:param deviceManufacturer: The device manufacturer\n:param deviceType:         The device type"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "hal._wpiHal.CANReceiveMessage"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "readPacketLatest",
                    "returnType": "bool",
                    "tooltip": "Read a CAN packet. The will continuously return the last packet received,\nwithout accounting for packet age.\n\n:param apiId: The API ID to read.\n:param data:  Storage for the received data.\n\n:returns: True if the data is valid, otherwise false."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "hal._wpiHal.CANReceiveMessage"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "readPacketNew",
                    "returnType": "bool",
                    "tooltip": "Read a new CAN packet. This will only return properly once per packet\nreceived. Multiple calls without receiving another packet will return\nfalse.\n\n:param apiId: The API ID to read.\n:param data:  Storage for the received data.\n\n:returns: True if the data is valid, otherwise false."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "timeoutMs",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "hal._wpiHal.CANReceiveMessage"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "readPacketTimeout",
                    "returnType": "bool",
                    "tooltip": "Read a CAN packet. The will return the last packet received until the\npacket is older then the requested timeout. Then it will return false.\n\n:param apiId:     The API ID to read.\n:param timeoutMs: The timeout time for the packet\n:param data:      Storage for the received data.\n\n:returns: True if the data is valid, otherwise false."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "stopPacketRepeating",
                    "returnType": "None",
                    "tooltip": "Stop a repeating packet with a specific ID. This ID is 10 bits.\n\n:param apiId: The API ID to stop repeating"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "message",
                            "type": "hal._wpiHal.CANMessage"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "writePacket",
                    "returnType": "None",
                    "tooltip": "Write a packet to the CAN device with a specific ID. This ID is 10 bits.\n\n:param apiId:   The API ID to write.\n:param message: the CAN message."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "message",
                            "type": "hal._wpiHal.CANMessage"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "writePacketNoError",
                    "returnType": "int",
                    "tooltip": "Write a packet to the CAN device with a specific ID. This ID is 10 bits.\n\n:param apiId:   The API ID to write.\n:param message: the CAN message."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "message",
                            "type": "hal._wpiHal.CANMessage"
                        },
                        {
                            "defaultValue": "",
                            "name": "repeatMs",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "writePacketRepeating",
                    "returnType": "None",
                    "tooltip": "Write a repeating packet to the CAN device with a specific ID. This ID is\n10 bits. The RoboRIO will automatically repeat the packet at the specified\ninterval\n\n:param apiId:    The API ID to write.\n:param message:  the CAN message.\n:param repeatMs: The period to repeat the packet at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "message",
                            "type": "hal._wpiHal.CANMessage"
                        },
                        {
                            "defaultValue": "",
                            "name": "repeatMs",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "writePacketRepeatingNoError",
                    "returnType": "int",
                    "tooltip": "Write a repeating packet to the CAN device with a specific ID. This ID is\n10 bits. The RoboRIO will automatically repeat the packet at the specified\ninterval\n\n:param apiId:    The API ID to write.\n:param message:  the CAN message.\n:param repeatMs: The period to repeat the packet at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "message",
                            "type": "hal._wpiHal.CANMessage"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "writeRTRFrame",
                    "returnType": "None",
                    "tooltip": "Write an RTR frame to the CAN device with a specific ID. This ID is 10\nbits. The length by spec must match what is returned by the responding\ndevice\n\n:param apiId:   The API ID to write.\n:param message: the CAN message."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.CAN"
                        },
                        {
                            "defaultValue": "",
                            "name": "apiId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "message",
                            "type": "hal._wpiHal.CANMessage"
                        }
                    ],
                    "declaringClassName": "wpilib.CAN",
                    "functionName": "writeRTRFrameNoError",
                    "returnType": "int",
                    "tooltip": "Write an RTR frame to the CAN device with a specific ID. This ID is 10\nbits. The length by spec must match what is returned by the responding\ndevice\n\n:param apiId:   The API ID to write.\n:param message: the CAN message."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.CANStatus",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.CANStatus",
                    "functionName": "__init__",
                    "returnType": "wpilib.CANStatus",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "busOffCount",
                    "tooltip": "",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "percentBusUtilization",
                    "tooltip": "",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "receiveErrorCount",
                    "tooltip": "",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "transmitErrorCount",
                    "tooltip": "",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "txFullCount",
                    "tooltip": "",
                    "type": "int",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.CameraServer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.CameraServer",
                    "functionName": "__init__",
                    "returnType": "wpilib.CameraServer",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.CameraServer",
                    "functionName": "is_alive",
                    "returnType": "bool",
                    "tooltip": ":returns: True if the CameraServer is still alive"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "vision_py",
                            "type": "typing.Optional[str]"
                        }
                    ],
                    "declaringClassName": "wpilib.CameraServer",
                    "functionName": "launch",
                    "returnType": "None",
                    "tooltip": "\n        Launches the CameraServer process in autocapture mode or\n        using a user-specified python script\n\n        :param vision_py: If specified, this is the relative path to\n                          a filename with a function in it\n\n        Example usage::\n\n            wpilib.CameraServer.launch(\"vision.py:main\")\n\n        .. warning:: You must have robotpy-cscore installed, or this\n                     function will fail without returning an error\n                     (you will see an error in the console).\n\n        "
                }
            ]
        },
        {
            "className": "wpilib.Color",
            "classVariables": [
                {
                    "name": "kAliceBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kAntiqueWhite",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kAqua",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kAquamarine",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kAzure",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kBeige",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kBisque",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kBlack",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kBlanchedAlmond",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kBlueViolet",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kBrown",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kBurlywood",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kCadetBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kChartreuse",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kChocolate",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kCoral",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kCornflowerBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kCornsilk",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kCrimson",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kCyan",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkCyan",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkGoldenrod",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkGray",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkKhaki",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkMagenta",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkOliveGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkOrange",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkOrchid",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkRed",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkSalmon",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkSeaGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkSlateBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkSlateGray",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkTurquoise",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDarkViolet",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDeepPink",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDeepSkyBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDenim",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDimGray",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kDodgerBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kFirebrick",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kFirstBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kFirstRed",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kFloralWhite",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kForestGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kFuchsia",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kGainsboro",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kGhostWhite",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kGold",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kGoldenrod",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kGray",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kGreenYellow",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kHoneydew",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kHotPink",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kIndianRed",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kIndigo",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kIvory",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kKhaki",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLavender",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLavenderBlush",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLawnGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLemonChiffon",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightCoral",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightCyan",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightGoldenrodYellow",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightGray",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightPink",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightSalmon",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightSeaGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightSkyBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightSlateGray",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightSteelBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLightYellow",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLime",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLimeGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kLinen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMagenta",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMaroon",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumAquamarine",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumOrchid",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumPurple",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumSeaGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumSlateBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumSpringGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumTurquoise",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMediumVioletRed",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMidnightBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMintcream",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMistyRose",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kMoccasin",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kNavajoWhite",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kNavy",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kOldLace",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kOlive",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kOliveDrab",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kOrange",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kOrangeRed",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kOrchid",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPaleGoldenrod",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPaleGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPaleTurquoise",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPaleVioletRed",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPapayaWhip",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPeachPuff",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPeru",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPink",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPlum",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPowderBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kPurple",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kRed",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kRosyBrown",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kRoyalBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSaddleBrown",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSalmon",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSandyBrown",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSeaGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSeashell",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSienna",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSilver",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSkyBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSlateBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSlateGray",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSnow",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSpringGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kSteelBlue",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kTan",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kTeal",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kThistle",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kTomato",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kTurquoise",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kViolet",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kWheat",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kWhite",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kWhiteSmoke",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kYellow",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                },
                {
                    "name": "kYellowGreen",
                    "tooltip": "",
                    "type": "wpilib.Color",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Color",
                    "functionName": "__init__",
                    "returnType": "wpilib.Color",
                    "tooltip": "Constructs a default color (black)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "red",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "green",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "blue",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Color",
                    "functionName": "__init__",
                    "returnType": "wpilib.Color",
                    "tooltip": "Constructs a Color from doubles (0-1).\n\n:param red:   Red value (0-1)\n:param green: Green value (0-1)\n:param blue:  Blue value (0-1)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "g",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "b",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Color",
                    "functionName": "__init__",
                    "returnType": "wpilib.Color",
                    "tooltip": "Constructs a Color from ints (0-255).\n\n:param r: Red value (0-255)\n:param g: Green value (0-255)\n:param b: Blue value (0-255)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "hexString",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Color",
                    "functionName": "__init__",
                    "returnType": "wpilib.Color",
                    "tooltip": "Constructs a Color from a hex string.\n\n:param hexString: a string of the format <tt>\\#RRGGBB</tt>\n                  @throws std::invalid_argument if the hex string is invalid."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Color"
                        }
                    ],
                    "declaringClassName": "wpilib.Color",
                    "functionName": "hexString",
                    "returnType": "str",
                    "tooltip": "Return this color represented as a hex string.\n\n:returns: a string of the format <tt>\\#RRGGBB</tt>"
                }
            ],
            "instanceVariables": [
                {
                    "name": "blue",
                    "tooltip": "Blue component (0-1).",
                    "type": "float",
                    "writable": false
                },
                {
                    "name": "green",
                    "tooltip": "Green component (0-1).",
                    "type": "float",
                    "writable": false
                },
                {
                    "name": "red",
                    "tooltip": "Red component (0-1).",
                    "type": "float",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "s",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "v",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Color",
                    "functionName": "fromHSV",
                    "returnType": "wpilib.Color",
                    "tooltip": "Creates a Color from HSV values.\n\n:param h: The h value [0-180)\n:param s: The s value [0-255]\n:param v: The v value [0-255]\n\n:returns: The color"
                }
            ]
        },
        {
            "className": "wpilib.Color8Bit",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Color8Bit",
                    "functionName": "__init__",
                    "returnType": "wpilib.Color8Bit",
                    "tooltip": "Constructs a default color (black)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "red",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "green",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "blue",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Color8Bit",
                    "functionName": "__init__",
                    "returnType": "wpilib.Color8Bit",
                    "tooltip": "Constructs a Color8Bit.\n\n:param red:   Red value (0-255)\n:param green: Green value (0-255)\n:param blue:  Blue value (0-255)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "color",
                            "type": "wpilib.Color"
                        }
                    ],
                    "declaringClassName": "wpilib.Color8Bit",
                    "functionName": "__init__",
                    "returnType": "wpilib.Color8Bit",
                    "tooltip": "Constructs a Color8Bit from a Color.\n\n:param color: The color"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "hexString",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Color8Bit",
                    "functionName": "__init__",
                    "returnType": "wpilib.Color8Bit",
                    "tooltip": "Constructs a Color8Bit from a hex string.\n\n:param hexString: a string of the format <tt>\\#RRGGBB</tt>\n                  @throws std::invalid_argument if the hex string is invalid."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.Color8Bit",
                    "functionName": "hexString",
                    "returnType": "str",
                    "tooltip": "Return this color represented as a hex string.\n\n:returns: a string of the format <tt>\\#RRGGBB</tt>"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.Color8Bit",
                    "functionName": "toColor",
                    "returnType": "wpilib.Color",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [
                {
                    "name": "blue",
                    "tooltip": "Blue component (0-255).",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "green",
                    "tooltip": "Green component (0-255).",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "red",
                    "tooltip": "Red component (0-255).",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "hexString",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Color8Bit",
                    "functionName": "fromHexString",
                    "returnType": "wpilib.Color8Bit",
                    "tooltip": "Create a Color8Bit from a hex string.\n\n:param hexString: a string of the format <tt>\\#RRGGBB</tt>\n\n:returns: Color8Bit object from hex string.\n          @throws std::invalid_argument if the hex string is invalid."
                }
            ]
        },
        {
            "className": "wpilib.Compressor",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "__init__",
                    "returnType": "wpilib.Compressor",
                    "tooltip": "Constructs a compressor for a specified module and type.\n\n:param busId:      The bus ID.\n:param module:     The module ID to use.\n:param moduleType: The module type to use."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "__init__",
                    "returnType": "wpilib.Compressor",
                    "tooltip": "Constructs a compressor for a default module and specified type.\n\n:param busId:      The bus ID.\n:param moduleType: The module type to use."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": "Disable the compressor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        },
                        {
                            "defaultValue": "",
                            "name": "minPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "enableAnalog",
                    "returnType": "None",
                    "tooltip": "If supported by the device, enables the compressor in analog mode. This\nmode uses an analog pressure sensor connected to analog channel 0 to cycle\nthe compressor. The compressor will turn on when the pressure drops below\n``minPressure`` and will turn off when the pressure reaches {@code\nmaxPressure}. This mode is only supported by the REV PH with the REV Analog\nPressure Sensor connected to analog channel 0.\n\nOn CTRE PCM, this will enable digital control.\n\n:param minPressure: The minimum pressure. The compressor will turn on when\n                    the pressure drops below this value.\n:param maxPressure: The maximum pressure. The compressor will turn off when\n                    the pressure reaches this value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "enableDigital",
                    "returnType": "None",
                    "tooltip": "Enables the compressor in digital mode using the digital pressure switch.\nThe compressor will turn on when the pressure switch indicates that the\nsystem is not full, and will turn off when the pressure switch indicates\nthat the system is full."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        },
                        {
                            "defaultValue": "",
                            "name": "minPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "enableHybrid",
                    "returnType": "None",
                    "tooltip": "If supported by the device, enables the compressor in hybrid mode. This\nmode uses both a digital pressure switch and an analog pressure sensor\nconnected to analog channel 0 to cycle the compressor. This mode is only\nsupported by the REV PH with the REV Analog Pressure Sensor connected to\nanalog channel 0.\n\nThe compressor will turn on when \\a both:\n\n- The digital pressure switch indicates the system is not full AND\n- The analog pressure sensor indicates that the pressure in the system\nis below the specified minimum pressure.\n\nThe compressor will turn off when \\a either:\n\n- The digital pressure switch is disconnected or indicates that the system\nis full OR\n- The pressure detected by the analog sensor is greater than the specified\nmaximum pressure.\n\nOn CTRE PCM, this will enable digital control.\n\n:param minPressure: The minimum pressure. The compressor will turn on\n                    when the pressure drops below this value and the pressure switch indicates\n                    that the system is not full.\n:param maxPressure: The maximum pressure. The compressor will turn\n                    off when the pressure reaches this value or the pressure switch is\n                    disconnected or indicates that the system is full."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "getAnalogVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "If supported by the device, returns the analog input voltage (on channel\n0).\n\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n\n:returns: The analog input voltage, in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "getConfigType",
                    "returnType": "wpilib.CompressorConfigType",
                    "tooltip": "Returns the active compressor configuration.\n\n:returns: The active compressor configuration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "getCurrent",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Get the current drawn by the compressor.\n\n:returns: Current drawn by the compressor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "getPressure",
                    "returnType": "wpimath.units.pounds_per_square_inch",
                    "tooltip": "If supported by the device, returns the pressure read by the analog\npressure sensor (on channel 0).\n\nThis function is only supported by the REV PH with the REV Analog Pressure\nSensor. On CTRE PCM, this will return 0.\n\n:returns: The pressure read by the analog pressure sensor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "getPressureSwitchValue",
                    "returnType": "bool",
                    "tooltip": "Returns the state of the pressure switch.\n\n:returns: True if pressure switch indicates that the system is not full,\n          otherwise false."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Compressor"
                        }
                    ],
                    "declaringClassName": "wpilib.Compressor",
                    "functionName": "isEnabled",
                    "returnType": "bool",
                    "tooltip": "Returns whether the compressor is active or not.\n\n:returns: true if the compressor is on - otherwise false."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.CompressorConfigType",
            "classVariables": [
                {
                    "name": "Analog",
                    "tooltip": "",
                    "type": "wpilib.CompressorConfigType",
                    "writable": true
                },
                {
                    "name": "Digital",
                    "tooltip": "",
                    "type": "wpilib.CompressorConfigType",
                    "writable": true
                },
                {
                    "name": "Disabled",
                    "tooltip": "",
                    "type": "wpilib.CompressorConfigType",
                    "writable": true
                },
                {
                    "name": "Hybrid",
                    "tooltip": "",
                    "type": "wpilib.CompressorConfigType",
                    "writable": true
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.CompressorConfigType",
                    "functionName": "__init__",
                    "returnType": "wpilib.CompressorConfigType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DMC60",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DMC60",
                    "functionName": "__init__",
                    "returnType": "wpilib.DMC60",
                    "tooltip": "Constructor for a DMC 60 connected via PWM.\n\n:param channel: The PWM channel that the DMC 60 is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.DMC60",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.DSControlWord",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "__init__",
                    "returnType": "wpilib.DSControlWord",
                    "tooltip": "DSControlWord constructor.\n\nUpon construction, the current Driver Station control word is read and\nstored internally."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isAutonomous",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding autonomous mode.\n\n:returns: True if the robot is being commanded to be in autonomous mode"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isAutonomousEnabled",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding autonomous mode and if it has enabled the\nrobot.\n\n:returns: True if the robot is being commanded to be in autonomous mode and\n          enabled."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isDSAttached",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is attached.\n\n:returns: True if the DS is connected to the robot"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isDisabled",
                    "returnType": "bool",
                    "tooltip": "Check if the robot is disabled.\n\n:returns: True if the robot is explicitly disabled or the DS is not connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isEStopped",
                    "returnType": "bool",
                    "tooltip": "Check if the robot is e-stopped.\n\n:returns: True if the robot is e-stopped"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isEnabled",
                    "returnType": "bool",
                    "tooltip": "Check if the DS has enabled the robot.\n\n:returns: True if the robot is enabled and the DS is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isFMSAttached",
                    "returnType": "bool",
                    "tooltip": "Is the driver station attached to a Field Management System?\n\n:returns: True if the robot is competing on a field being controlled by a\n          Field Management System"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isTeleop",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding teleop mode.\n\n:returns: True if the robot is being commanded to be in teleop mode"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isTeleopEnabled",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding teleop mode and if it has enabled the robot.\n\n:returns: True if the robot is being commanded to be in teleop mode and\n          enabled."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DSControlWord"
                        }
                    ],
                    "declaringClassName": "wpilib.DSControlWord",
                    "functionName": "isTest",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding test mode.\n\n:returns: True if the robot is being commanded to be in test mode"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DataLogManager",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.DataLogManager",
                    "functionName": "__init__",
                    "returnType": "wpilib.DataLogManager",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.DataLogManager",
                    "functionName": "getLog",
                    "returnType": "wpilog._wpilog.DataLog",
                    "tooltip": "Get the managed data log (for custom logging). Starts the data log manager\nif not already started.\n\n:returns: data log"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DataLogManager",
                    "functionName": "getLogDir",
                    "returnType": "str",
                    "tooltip": "Get the log directory.\n\n:returns: log directory"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "message",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.DataLogManager",
                    "functionName": "log",
                    "returnType": "None",
                    "tooltip": "Log a message to the \"messages\" entry. The message is also printed to\nstandard output (followed by a newline).\n\n:param message: message"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.DataLogManager",
                    "functionName": "logConsoleOutput",
                    "returnType": "None",
                    "tooltip": "Enable or disable logging of the console output. Defaults to enabled.\n\n:param enabled: true to enable, false to disable"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.DataLogManager",
                    "functionName": "logNetworkTables",
                    "returnType": "None",
                    "tooltip": "Enable or disable logging of NetworkTables data. Note that unlike the\nnetwork interface for NetworkTables, this will capture every value change.\nDefaults to enabled.\n\n:param enabled: true to enable, false to disable"
                },
                {
                    "args": [
                        {
                            "defaultValue": "''",
                            "name": "dir",
                            "type": "str"
                        },
                        {
                            "defaultValue": "''",
                            "name": "filename",
                            "type": "str"
                        },
                        {
                            "defaultValue": "0.25",
                            "name": "period",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.DataLogManager",
                    "functionName": "start",
                    "returnType": "None",
                    "tooltip": "Start data log manager. The parameters have no effect if the data log\nmanager was already started (e.g. by calling another static function).\n\n:param dir:      if not empty, directory to use for data log storage\n:param filename: filename to use; if none provided, the filename is\n                 automatically generated\n:param period:   time between automatic flushes to disk, in seconds;\n                 this is a time/storage tradeoff"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DataLogManager",
                    "functionName": "stop",
                    "returnType": "None",
                    "tooltip": "Stop data log manager."
                }
            ]
        },
        {
            "className": "wpilib.DigitalInput",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalInput",
                    "functionName": "__init__",
                    "returnType": "wpilib.DigitalInput",
                    "tooltip": "Create an instance of a Digital Input class.\n\nCreates a digital input given a channel.\n\n:param channel: The DIO channel 0-9 are on-board, 10-25 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalInput"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalInput",
                    "functionName": "get",
                    "returnType": "bool",
                    "tooltip": "Get the value from a digital input channel.\n\nRetrieve the value of a single digital input channel from the FPGA."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalInput"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalInput",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ":returns: The GPIO channel number that this object represents."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalInput"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalInput",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalInput"
                        },
                        {
                            "defaultValue": "",
                            "name": "device",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalInput",
                    "functionName": "setSimDevice",
                    "returnType": "None",
                    "tooltip": "Indicates this input is used by a simulated device.\n\n:param device: simulated device handle"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DigitalOutput",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "__init__",
                    "returnType": "wpilib.DigitalOutput",
                    "tooltip": "Create an instance of a digital output.\n\nCreate a digital output given a channel.\n\n:param channel: The digital channel 0-9 are on-board, 10-25 are on the MXP\n                port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "disablePWM",
                    "returnType": "None",
                    "tooltip": "Change this line from a PWM output back to a static Digital Output line.\n\nFree up one of the 6 DO PWM generator resources that were in use."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        },
                        {
                            "defaultValue": "",
                            "name": "dutyCycle",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "enablePPS",
                    "returnType": "None",
                    "tooltip": "Enable a PWM PPS (Pulse Per Second) Output on this line.\n\nAllocate one of the 6 DO PWM generator resources from this module.\n\nSupply the duty-cycle to output.\n\nThe resolution of the duty cycle is 8-bit.\n\n:param dutyCycle: The duty-cycle to start generating. [0..1]"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialDutyCycle",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "enablePWM",
                    "returnType": "None",
                    "tooltip": "Enable a PWM Output on this line.\n\nAllocate one of the 6 DO PWM generator resources from this module.\n\nSupply the initial duty-cycle to output so as to avoid a glitch when first\nstarting.\n\nThe resolution of the duty cycle is 8-bit for low frequencies (1kHz or\nless) but is reduced the higher the frequency of the PWM signal is.\n\n:param initialDutyCycle: The duty-cycle to start generating. [0..1]"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "get",
                    "returnType": "bool",
                    "tooltip": "Gets the value being output from the Digital Output.\n\n:returns: the state of the digital output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ":returns: The GPIO channel number that this object represents."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "isPulsing",
                    "returnType": "bool",
                    "tooltip": "Determine if the pulse is still going.\n\nDetermine if a previously started pulse is still going."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        },
                        {
                            "defaultValue": "",
                            "name": "pulseLength",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "pulse",
                    "returnType": "None",
                    "tooltip": "Output a single pulse on the digital output line.\n\nSend a single pulse on the digital output line where the pulse duration is\nspecified in seconds. Maximum of 65535 microseconds.\n\n:param pulseLength: The pulse length in seconds"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the value of a digital output.\n\nSet the value of a digital output to either one (true) or zero (false).\n\n:param value: 1 (true) for high, 0 (false) for disabled"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        },
                        {
                            "defaultValue": "",
                            "name": "rate",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "setPWMRate",
                    "returnType": "None",
                    "tooltip": "Change the PWM frequency of the PWM output on a Digital Output line.\n\nThe valid range is from 0.6 Hz to 19 kHz.  The frequency resolution is\nlogarithmic.\n\nThere is only one PWM frequency for all digital channels.\n\n:param rate: The frequency to output all digital output PWM signals."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        },
                        {
                            "defaultValue": "",
                            "name": "device",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "setSimDevice",
                    "returnType": "None",
                    "tooltip": "Indicates this output is used by a simulated device.\n\n:param device: simulated device handle"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DigitalOutput"
                        },
                        {
                            "defaultValue": "",
                            "name": "dutyCycle",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.DigitalOutput",
                    "functionName": "updateDutyCycle",
                    "returnType": "None",
                    "tooltip": "Change the duty-cycle that is being generated on the line.\n\nThe resolution of the duty cycle is 8-bit for low frequencies (1kHz or\nless) but is reduced the higher the frequency of the PWM signal is.\n\n:param dutyCycle: The duty-cycle to change to. [0..1]"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DoubleSolenoid",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "forwardChannel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "reverseChannel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "__init__",
                    "returnType": "wpilib.DoubleSolenoid",
                    "tooltip": "Constructs a double solenoid for a specified module of a specific module\ntype.\n\n:param busId:          The bus ID.\n:param module:         The module of the solenoid module to use.\n:param moduleType:     The module type to use.\n:param forwardChannel: The forward channel on the module to control.\n:param reverseChannel: The reverse channel on the module to control."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "forwardChannel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "reverseChannel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "__init__",
                    "returnType": "wpilib.DoubleSolenoid",
                    "tooltip": "Constructs a double solenoid for a default module of a specific module\ntype.\n\n:param busId:          The bus ID.\n:param moduleType:     The module type to use.\n:param forwardChannel: The forward channel on the module to control.\n:param reverseChannel: The reverse channel on the module to control."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DoubleSolenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "get",
                    "returnType": "wpilib.DoubleSolenoid.Value",
                    "tooltip": "Read the current value of the solenoid.\n\n:returns: The current value of the solenoid."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DoubleSolenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "getFwdChannel",
                    "returnType": "int",
                    "tooltip": "Get the forward channel.\n\n:returns: the forward channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DoubleSolenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "getRevChannel",
                    "returnType": "int",
                    "tooltip": "Get the reverse channel.\n\n:returns: the reverse channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DoubleSolenoid"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DoubleSolenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "isFwdSolenoidDisabled",
                    "returnType": "bool",
                    "tooltip": "Check if the forward solenoid is Disabled.\n\nIf a solenoid is shorted, it is added to the DisabledList and disabled\nuntil power cycle, or until faults are cleared.\n\n@see ClearAllStickyFaults()\n\n:returns: If solenoid is disabled due to short."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DoubleSolenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "isRevSolenoidDisabled",
                    "returnType": "bool",
                    "tooltip": "Check if the reverse solenoid is Disabled.\n\nIf a solenoid is shorted, it is added to the DisabledList and disabled\nuntil power cycle, or until faults are cleared.\n\n@see ClearAllStickyFaults()\n\n:returns: If solenoid is disabled due to short."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DoubleSolenoid"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DoubleSolenoid.Value"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the value of a solenoid.\n\n:param value: The value to set (Off, Forward or Reverse)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DoubleSolenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid",
                    "functionName": "toggle",
                    "returnType": "None",
                    "tooltip": "Toggle the value of the solenoid.\n\nIf the solenoid is set to forward, it'll be set to reverse. If the solenoid\nis set to reverse, it'll be set to forward. If the solenoid is set to off,\nnothing happens."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DoubleSolenoid.Value",
            "classVariables": [
                {
                    "name": "kForward",
                    "tooltip": "",
                    "type": "wpilib.DoubleSolenoid.Value",
                    "writable": false
                },
                {
                    "name": "kOff",
                    "tooltip": "",
                    "type": "wpilib.DoubleSolenoid.Value",
                    "writable": false
                },
                {
                    "name": "kReverse",
                    "tooltip": "",
                    "type": "wpilib.DoubleSolenoid.Value",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DoubleSolenoid.Value",
                    "functionName": "__init__",
                    "returnType": "wpilib.DoubleSolenoid.Value",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DriverStation",
            "classVariables": [
                {
                    "name": "kJoystickPorts",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "__init__",
                    "returnType": "wpilib.DriverStation",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DriverStation"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getControlState",
                    "returnType": "tuple[bool, bool, bool]",
                    "tooltip": "More efficient way to determine what state the robot is in.\n\n:returns: booleans representing enabled, isautonomous, istest\n\n.. versionadded:: 2019.2.1\n\n.. note:: This function only exists in RobotPy"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getAlliance",
                    "returnType": "Optional[wpilib.DriverStation.Alliance]",
                    "tooltip": "Get the current alliance from the FMS.\n\nIf the FMS is not connected, it is set from the team alliance setting on\nthe driver station.\n\n:returns: The alliance (red or blue) or an empty optional if the alliance is\n          invalid"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getAngle",
                    "returnType": "Optional[wpimath.geometry.Rotation2d]",
                    "tooltip": "Gets the angle of a POVDirection.\n\n:param angle: The POVDirection to convert.\n\n:returns: The angle clockwise from straight up, or std::nullopt if the\n          POVDirection is kCenter."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getBatteryVoltage",
                    "returnType": "float",
                    "tooltip": "Read the battery voltage.\n\n:returns: The battery voltage in Volts."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getEventName",
                    "returnType": "str",
                    "tooltip": "Returns the name of the competition event provided by the FMS.\n\n:returns: A string containing the event name"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getGameSpecificMessage",
                    "returnType": "str",
                    "tooltip": "Returns the game specific message provided by the FMS.\n\nIf the FMS is not connected, it is set from the game data setting on the\ndriver station.\n\n:returns: A string containing the game specific message."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getJoystickAxisType",
                    "returnType": "int",
                    "tooltip": "Returns the types of Axes on a given joystick port.\n\n:param stick: The joystick port number and the target axis\n:param axis:  The analog axis value to read from the joystick.\n\n:returns: What type of axis the axis is reporting to be"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getJoystickIsGamepad",
                    "returnType": "bool",
                    "tooltip": "Returns a boolean indicating if the controller is an xbox controller.\n\n:param stick: The joystick port number\n\n:returns: A boolean that is true if the controller is an xbox controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getJoystickName",
                    "returnType": "str",
                    "tooltip": "Returns the name of the joystick at the given port.\n\n:param stick: The joystick port number\n\n:returns: The name of the joystick at the given port"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getJoystickType",
                    "returnType": "int",
                    "tooltip": "Returns the type of joystick at a given port.\n\n:param stick: The joystick port number\n\n:returns: The HID type of joystick at the given port"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getLocation",
                    "returnType": "Optional[int]",
                    "tooltip": "Return the driver station location from the FMS.\n\nIf the FMS is not connected, it is set from the team alliance setting on\nthe driver station.\n\nThis could return 1, 2, or 3.\n\n:returns: The location of the driver station (1-3, 0 for invalid)"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getMatchNumber",
                    "returnType": "int",
                    "tooltip": "Returns the match number provided by the FMS.\n\n:returns: The number of the match"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getMatchTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Return the approximate match time. The FMS does not send an official match\ntime to the robots, but does send an approximate match time. The value will\ncount down the time remaining in the current period (auto or teleop).\nWarning: This is not an official time (so it cannot be used to dispute ref\ncalls or guarantee that a function will trigger before the match ends).\n\nWhen connected to the real field, this number only changes in full\ninteger increments, and always counts down.\n\nWhen the DS is in practice mode, this number is a floating point number,\nand counts down.\n\nWhen the DS is in teleop or autonomous mode, this number is a floating\npoint number, and counts up.\n\nSimulation matches DS behavior without an FMS connected.\n\n:returns: Time remaining in current match period (auto or teleop) in seconds"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getMatchType",
                    "returnType": "wpilib.DriverStation.MatchType",
                    "tooltip": "Returns the type of match being played provided by the FMS.\n\n:returns: The match type enum (kNone, kPractice, kQualification,\n          kElimination)"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getReplayNumber",
                    "returnType": "int",
                    "tooltip": "Returns the number of times the current match has been replayed from the\nFMS.\n\n:returns: The number of replays"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickAxis",
                    "returnType": "float",
                    "tooltip": "Get the value of the axis on a joystick.\n\nThis depends on the mapping of the joystick connected to the specified\nport.\n\n:param stick: The joystick to read.\n:param axis:  The analog axis value to read from the joystick.\n\n:returns: The value of the axis on the joystick."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickAxisCount",
                    "returnType": "int",
                    "tooltip": "Returns the number of axes on a given joystick port.\n\n:param stick: The joystick port number\n\n:returns: The number of axes on the indicated joystick"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickButton",
                    "returnType": "bool",
                    "tooltip": "The state of one joystick button. %Button indexes begin at 1.\n\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n\n:returns: The state of the joystick button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickButtonCount",
                    "returnType": "int",
                    "tooltip": "Returns the number of buttons on a given joystick port.\n\n:param stick: The joystick port number\n\n:returns: The number of buttons on the indicated joystick"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether one joystick button was pressed since the last check. %Button\nindexes begin at 1.\n\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n\n:returns: Whether the joystick button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether one joystick button was released since the last check. %Button\nindexes begin at 1.\n\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n\n:returns: Whether the joystick button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickButtons",
                    "returnType": "int",
                    "tooltip": "The state of the buttons on the joystick.\n\n:param stick: The joystick to read.\n\n:returns: The state of the buttons on the joystick."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickPOV",
                    "returnType": "wpilib.DriverStation.POVDirection",
                    "tooltip": "Get the state of a POV on the joystick.\n\n:returns: the angle of the POV."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "getStickPOVCount",
                    "returnType": "int",
                    "tooltip": "Returns the number of POVs on a given joystick port.\n\n:param stick: The joystick port number\n\n:returns: The number of POVs on the indicated joystick"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isAutonomous",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding autonomous mode.\n\n:returns: True if the robot is being commanded to be in autonomous mode"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isAutonomousEnabled",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding autonomous mode and if it has enabled the\nrobot.\n\n:returns: True if the robot is being commanded to be in autonomous mode and\n          enabled."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isDSAttached",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is attached.\n\n:returns: True if the DS is connected to the robot"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isDisabled",
                    "returnType": "bool",
                    "tooltip": "Check if the robot is disabled.\n\n:returns: True if the robot is explicitly disabled or the DS is not connected"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isEStopped",
                    "returnType": "bool",
                    "tooltip": "Check if the robot is e-stopped.\n\n:returns: True if the robot is e-stopped"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isEnabled",
                    "returnType": "bool",
                    "tooltip": "Check if the DS has enabled the robot.\n\n:returns: True if the robot is enabled and the DS is connected"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isFMSAttached",
                    "returnType": "bool",
                    "tooltip": "Is the driver station attached to a Field Management System?\n\n:returns: True if the robot is competing on a field being controlled by a\n          Field Management System"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isJoystickConnected",
                    "returnType": "bool",
                    "tooltip": "Returns if a joystick is connected to the Driver Station.\n\nThis makes a best effort guess by looking at the reported number of axis,\nbuttons, and POVs attached.\n\n:param stick: The joystick port number\n\n:returns: true if a joystick is connected"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isJoystickConnectionWarningSilenced",
                    "returnType": "bool",
                    "tooltip": "Returns whether joystick connection warnings are silenced. This will\nalways return false when connected to the FMS.\n\n:returns: Whether joystick connection warnings are silenced."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isTeleop",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding teleop mode.\n\n:returns: True if the robot is being commanded to be in teleop mode"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isTeleopEnabled",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding teleop mode and if it has enabled the robot.\n\n:returns: True if the robot is being commanded to be in teleop mode and\n          enabled."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isTest",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding test mode.\n\n:returns: True if the robot is being commanded to be in test mode"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "isTestEnabled",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is commanding Test mode and if it has enabled the robot.\n\n:returns: True if the robot is being commanded to be in Test mode and\n          enabled."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "handle",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "provideRefreshedDataEventHandle",
                    "returnType": "None",
                    "tooltip": "Registers the given handle for DS data refresh notifications.\n\n:param handle: The event handle."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "refreshData",
                    "returnType": "None",
                    "tooltip": "Copy data from the DS task for the user. If no new data exists, it will\njust be returned, otherwise the data will be copied from the DS polling\nloop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "handle",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "removeRefreshedDataEventHandle",
                    "returnType": "None",
                    "tooltip": "Unregisters the given handle from DS data refresh notifications.\n\n:param handle: The event handle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "silence",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "silenceJoystickConnectionWarning",
                    "returnType": "None",
                    "tooltip": "Allows the user to specify whether they want joystick connection warnings\nto be printed to the console. This setting is ignored when the FMS is\nconnected -- warnings will always be on in that scenario.\n\n:param silence: Whether warning messages should be silenced."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "log",
                            "type": "wpilog._wpilog.DataLog"
                        },
                        {
                            "defaultValue": "True",
                            "name": "logJoysticks",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "startDataLog",
                    "returnType": "None",
                    "tooltip": "Starts logging DriverStation data to data log. Repeated calls are ignored.\n\n:param log:          data log\n:param logJoysticks: if true, log joystick data"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "timeout",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation",
                    "functionName": "waitForDsConnection",
                    "returnType": "bool",
                    "tooltip": "Wait for a DS connection.\n\n:param timeout: timeout in seconds. 0 for infinite.\n\n:returns: true if connected, false if timeout"
                }
            ]
        },
        {
            "className": "wpilib.DriverStation.Alliance",
            "classVariables": [
                {
                    "name": "kBlue",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.Alliance",
                    "writable": false
                },
                {
                    "name": "kRed",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.Alliance",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation.Alliance",
                    "functionName": "__init__",
                    "returnType": "wpilib.DriverStation.Alliance",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DriverStation.MatchType",
            "classVariables": [
                {
                    "name": "kElimination",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.MatchType",
                    "writable": false
                },
                {
                    "name": "kNone",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.MatchType",
                    "writable": false
                },
                {
                    "name": "kPractice",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.MatchType",
                    "writable": false
                },
                {
                    "name": "kQualification",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.MatchType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation.MatchType",
                    "functionName": "__init__",
                    "returnType": "wpilib.DriverStation.MatchType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DriverStation.POVDirection",
            "classVariables": [
                {
                    "name": "kCenter",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                },
                {
                    "name": "kDown",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                },
                {
                    "name": "kDownLeft",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                },
                {
                    "name": "kDownRight",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                },
                {
                    "name": "kLeft",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                },
                {
                    "name": "kRight",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                },
                {
                    "name": "kUp",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                },
                {
                    "name": "kUpLeft",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                },
                {
                    "name": "kUpRight",
                    "tooltip": "",
                    "type": "wpilib.DriverStation.POVDirection",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DriverStation.POVDirection",
                    "functionName": "__init__",
                    "returnType": "wpilib.DriverStation.POVDirection",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DutyCycle",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "source",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycle",
                    "functionName": "__init__",
                    "returnType": "wpilib.DutyCycle",
                    "tooltip": "Constructs a DutyCycle input from a smartio channel.\n\n:param source: The channel to use."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycle"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycle",
                    "functionName": "getFrequency",
                    "returnType": "wpimath.units.hertz",
                    "tooltip": "Get the frequency of the duty cycle signal.\n\n:returns: frequency"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycle"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycle",
                    "functionName": "getHighTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Get the raw high time of the duty cycle signal.\n\n:returns: high time of last pulse"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycle"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycle",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Get the output ratio of the duty cycle signal.\n\n0 means always low, 1 means always high.\n\n:returns: output ratio between 0 and 1"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycle"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycle",
                    "functionName": "getSourceChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel of the source.\n\n:returns: the source channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.DutyCycleEncoder",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.DutyCycleEncoder",
                    "tooltip": "Construct a new DutyCycleEncoder on a specific channel.\n\nThis has a fullRange of 1 and an expectedZero of 0.\n\n:param channel: the channel to attach to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "dutyCycle",
                            "type": "wpilib.DutyCycle"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.DutyCycleEncoder",
                    "tooltip": "Construct a new DutyCycleEncoder attached to an existing DutyCycle object.\n\nThis has a fullRange of 1 and an expectedZero of 0.\n\n:param dutyCycle: the duty cycle to attach to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "fullRange",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "expectedZero",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.DutyCycleEncoder",
                    "tooltip": "Construct a new DutyCycleEncoder on a specific channel.\n\n:param channel:      the channel to attach to\n:param fullRange:    the value to report at maximum travel\n:param expectedZero: the reading where you would expect a 0 from get()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "dutyCycle",
                            "type": "wpilib.DutyCycle"
                        },
                        {
                            "defaultValue": "",
                            "name": "fullRange",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "expectedZero",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.DutyCycleEncoder",
                    "tooltip": "Construct a new DutyCycleEncoder attached to an existing DutyCycle object.\n\n:param dutyCycle:    the duty cycle to attach to\n:param fullRange:    the value to report at maximum travel\n:param expectedZero: the reading where you would expect a 0 from get()"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the encoder value.\n\n:returns: the encoder value scaled by the full range input"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "getFrequency",
                    "returnType": "wpimath.units.hertz",
                    "tooltip": "Get the frequency of the duty cycle signal from the encoder.\n\n:returns: duty cycle frequency"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "getSourceChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel of the source.\n\n:returns: the source channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": "Get if the sensor is connected\n\nThis uses the duty cycle frequency to determine if the sensor is connected.\nBy default, a value of 100 Hz is used as the threshold, and this value can\nbe changed with SetConnectedFrequencyThreshold.\n\n:returns: true if the sensor is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "frequency",
                            "type": "wpimath.units.hertz"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "setAssumedFrequency",
                    "returnType": "None",
                    "tooltip": "Sets the assumed frequency of the connected device.\n\nBy default, the DutyCycle engine has to compute the frequency of the\ninput signal. This can result in both delayed readings and jumpy readings.\nTo solve this, you can pass the expected frequency of the sensor to this\nfunction. This will use that frequency to compute the DutyCycle percentage,\nrather than the computed frequency.\n\n:param frequency: the assumed frequency of the sensor"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "frequency",
                            "type": "wpimath.units.hertz"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "setConnectedFrequencyThreshold",
                    "returnType": "None",
                    "tooltip": "Change the frequency threshold for detecting connection used by\nIsConnected.\n\n:param frequency: the minimum frequency."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "min",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "max",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "setDutyCycleRange",
                    "returnType": "None",
                    "tooltip": "Set the encoder duty cycle range. As the encoder needs to maintain a duty\ncycle, the duty cycle cannot go all the way to 0% or all the way to 100%.\nFor example, an encoder with a 4096 us period might have a minimum duty\ncycle of 1 us / 4096 us and a maximum duty cycle of 4095 / 4096 us. Setting\nthe range will result in an encoder duty cycle less than or equal to the\nminimum being output as 0 rotation, the duty cycle greater than or equal to\nthe maximum being output as 1 rotation, and values in between linearly\nscaled from 0 to 1.\n\n:param min: minimum duty cycle (0-1 range)\n:param max: maximum duty cycle (0-1 range)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.DutyCycleEncoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "inverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.DutyCycleEncoder",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": "Set if this encoder is inverted.\n\n:param inverted: true to invert the encoder, false otherwise"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Encoder",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "aChannel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "bChannel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "False",
                            "name": "reverseDirection",
                            "type": "bool"
                        },
                        {
                            "defaultValue": "<EncodingType.k4X: 2>",
                            "name": "encodingType",
                            "type": "wpilib.interfaces.CounterBase.EncodingType"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "__init__",
                    "returnType": "wpilib.Encoder",
                    "tooltip": "Encoder constructor.\n\nConstruct a Encoder given a and b channels.\n\nThe counter will start counting immediately.\n\n:param aChannel:         The a channel DIO channel. 0-9 are on-board, 10-25\n                         are on the MXP port\n:param bChannel:         The b channel DIO channel. 0-9 are on-board, 10-25\n                         are on the MXP port\n:param reverseDirection: represents the orientation of the encoder and\n                         inverts the output values if necessary so forward\n                         represents positive values.\n:param encodingType:     either k1X, k2X, or k4X to indicate 1X, 2X or 4X\n                         decoding. If 4X is selected, then an encoder FPGA\n                         object is used and the returned counts will be 4x\n                         the encoder spec'd value since all rising and\n                         falling edges are counted. If 1X or 2X are selected\n                         then a counter object will be used and the returned\n                         value will either exactly match the spec'd count or\n                         be double (2x) the spec'd count."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "get",
                    "returnType": "int",
                    "tooltip": "Gets the current count.\n\nReturns the current count on the Encoder. This method compensates for the\ndecoding type.\n\n:returns: Current count from the Encoder adjusted for the 1x, 2x, or 4x scale\n          factor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getDirection",
                    "returnType": "bool",
                    "tooltip": "The last direction the encoder value changed.\n\n:returns: The last direction the encoder value changed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getDistance",
                    "returnType": "float",
                    "tooltip": "Get the distance the robot has driven since the last reset.\n\n:returns: The distance driven since the last reset as scaled by the value\n          from SetDistancePerPulse()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getDistancePerPulse",
                    "returnType": "float",
                    "tooltip": "Get the distance per pulse for this encoder.\n\n:returns: The scale factor that will be used to convert pulses to useful\n          units."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getEncodingScale",
                    "returnType": "int",
                    "tooltip": "The encoding scale factor 1x, 2x, or 4x, per the requested encodingType.\n\nUsed to divide raw edge counts down to spec'd counts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getFPGAIndex",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the period of the most recent pulse.\n\nReturns the period of the most recent Encoder pulse in seconds. This method\ncompensates for the decoding type.\n\nWarning: This returns unscaled periods. Use GetRate() for rates that are\nscaled using the value from SetDistancePerPulse().\n\n:deprecated: Use getRate() in favor of this method.\n\n:returns: Period in seconds of the most recent pulse."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getRate",
                    "returnType": "float",
                    "tooltip": "Get the current rate of the encoder.\n\nUnits are distance per second as scaled by the value from\nSetDistancePerPulse().\n\n:returns: The current rate of the encoder."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getRaw",
                    "returnType": "int",
                    "tooltip": "Gets the raw value from the encoder.\n\nThe raw value is the actual count unscaled by the 1x, 2x, or 4x scale\nfactor.\n\n:returns: Current raw count from the encoder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getSamplesToAverage",
                    "returnType": "int",
                    "tooltip": "Get the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period.\n\nPerform averaging to account for mechanical imperfections or as\noversampling to increase resolution.\n\n:returns: The number of samples being averaged (from 1 to 127)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "getStopped",
                    "returnType": "bool",
                    "tooltip": "Determine if the encoder is stopped.\n\nUsing the MaxPeriod value, a boolean is returned that is true if the\nencoder is considered stopped and false if it is still moving. A stopped\nencoder is one where the most recent pulse width exceeds the MaxPeriod.\n\n:returns: True if the encoder is considered stopped."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the Encoder distance to zero.\n\nResets the current count to zero on the encoder."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "distancePerPulse",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "setDistancePerPulse",
                    "returnType": "None",
                    "tooltip": "Set the distance per pulse for this encoder.\n\nThis sets the multiplier used to determine the distance driven based on the\ncount value from the encoder.\n\nDo not include the decoding type in this scale.  The library already\ncompensates for the decoding type.\n\nSet this value based on the encoder's rated Pulses per Revolution and\nfactor in gearing reductions following the encoder shaft.\n\nThis distance can be in any units you like, linear or angular.\n\n:param distancePerPulse: The scale factor that will be used to convert\n                         pulses to useful units."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPeriod",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "setMaxPeriod",
                    "returnType": "None",
                    "tooltip": "Sets the maximum period for stopped detection.\n\nSets the value that represents the maximum period of the Encoder before it\nwill assume that the attached device is stopped. This timeout allows users\nto determine if the wheels or other shaft has stopped rotating.\nThis method compensates for the decoding type.\n\n:deprecated: Use SetMinRate() in favor of this method.  This takes unscaled\n             periods and SetMinRate() scales using value from\n             SetDistancePerPulse().\n\n:param maxPeriod: The maximum time between rising and falling edges before\n                  the FPGA will report the device stopped. This is expressed\n                  in seconds."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "minRate",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "setMinRate",
                    "returnType": "None",
                    "tooltip": "Set the minimum rate of the device before the hardware reports it stopped.\n\n:param minRate: The minimum rate.  The units are in distance per second as\n                scaled by the value from SetDistancePerPulse()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "reverseDirection",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "setReverseDirection",
                    "returnType": "None",
                    "tooltip": "Set the direction sensing for this encoder.\n\nThis sets the direction sensing on the encoder so that it could count in\nthe correct software direction regardless of the mounting.\n\n:param reverseDirection: true if the encoder direction should be reversed"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "samplesToAverage",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "setSamplesToAverage",
                    "returnType": "None",
                    "tooltip": "Set the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period.\n\nPerform averaging to account for mechanical imperfections or as\noversampling to increase resolution.\n\n:param samplesToAverage: The number of samples to average from 1 to 127."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Encoder"
                        },
                        {
                            "defaultValue": "",
                            "name": "device",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Encoder",
                    "functionName": "setSimDevice",
                    "returnType": "None",
                    "tooltip": "Indicates this encoder is used by a simulated device.\n\n:param device: simulated device handle"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Field2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Field2d",
                    "functionName": "__init__",
                    "returnType": "wpilib.Field2d",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Field2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Field2d",
                    "functionName": "getObject",
                    "returnType": "wpilib.FieldObject2d",
                    "tooltip": "Get or create a field object.\n\n:returns: Field object"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Field2d"
                        }
                    ],
                    "declaringClassName": "wpilib.Field2d",
                    "functionName": "getRobotObject",
                    "returnType": "wpilib.FieldObject2d",
                    "tooltip": "Get the robot object.\n\n:returns: Field object for robot"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Field2d"
                        }
                    ],
                    "declaringClassName": "wpilib.Field2d",
                    "functionName": "getRobotPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Get the robot pose.\n\n:returns: 2D pose"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Field2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "ntcore.NTSendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.Field2d",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Field2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpilib.Field2d",
                    "functionName": "setRobotPose",
                    "returnType": "None",
                    "tooltip": "Set the robot pose from a Pose object.\n\n:param pose: 2D pose"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Field2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpilib.Field2d",
                    "functionName": "setRobotPose",
                    "returnType": "None",
                    "tooltip": "Set the robot pose from x, y, and rotation.\n\n:param x:        X location\n:param y:        Y location\n:param rotation: rotation"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.FieldObject2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.FieldObject2d",
                    "functionName": "__init__",
                    "returnType": "wpilib.FieldObject2d",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.FieldObject2d"
                        }
                    ],
                    "declaringClassName": "wpilib.FieldObject2d",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Get the pose.\n\n:returns: 2D pose, or 0,0,0 if unknown / does not exist"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.FieldObject2d"
                        }
                    ],
                    "declaringClassName": "wpilib.FieldObject2d",
                    "functionName": "getPoses",
                    "returnType": "list[wpimath.geometry.Pose2d]",
                    "tooltip": "Get multiple poses.\n\n:returns: vector of 2D poses"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.FieldObject2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpilib.FieldObject2d",
                    "functionName": "setPose",
                    "returnType": "None",
                    "tooltip": "Set the pose from a Pose object.\n\n:param pose: 2D pose"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.FieldObject2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpilib.FieldObject2d",
                    "functionName": "setPose",
                    "returnType": "None",
                    "tooltip": "Set the pose from x, y, and rotation.\n\n:param x:        X location\n:param y:        Y location\n:param rotation: rotation"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.FieldObject2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "poses",
                            "type": "List[wpimath.geometry.Pose2d]"
                        }
                    ],
                    "declaringClassName": "wpilib.FieldObject2d",
                    "functionName": "setPoses",
                    "returnType": "None",
                    "tooltip": "Set multiple poses from an array of Pose objects.\nThe total number of poses is limited to 85.\n\n:param poses: array of 2D poses"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.FieldObject2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "trajectory",
                            "type": "wpimath.trajectory.Trajectory"
                        }
                    ],
                    "declaringClassName": "wpilib.FieldObject2d",
                    "functionName": "setTrajectory",
                    "returnType": "None",
                    "tooltip": "Sets poses from a trajectory.\n\n:param trajectory: The trajectory from which poses should be added."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.I2C",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "wpilib.I2C.Port"
                        },
                        {
                            "defaultValue": "",
                            "name": "deviceAddress",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "__init__",
                    "returnType": "wpilib.I2C",
                    "tooltip": "Constructor.\n\n:param port:          The I2C port to which the device is connected.\n:param deviceAddress: The address of the device on the I2C bus."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "addressOnly",
                    "returnType": "bool",
                    "tooltip": "Attempt to address a device on the I2C bus.\n\nThis allows you to figure out if there is a device on the I2C bus that\nresponds to the address specified in the constructor.\n\n:returns: Transfer Aborted... false for success, true for aborted."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "getDeviceAddress",
                    "returnType": "int",
                    "tooltip": "Returns I2C device address.\n\n:returns: I2C device address."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "getPort",
                    "returnType": "wpilib.I2C.Port",
                    "tooltip": "Returns I2C port.\n\n:returns: I2C port."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "registerAddress",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "read",
                    "returnType": "bool",
                    "tooltip": "Execute a read transaction with the device.\n\nRead bytes from a device.\nMost I2C devices will auto-increment the register pointer internally\nallowing you to read consecutive registers on a device in a single\ntransaction.\n\n:param registerAddress: The register to read first in the transaction.\n:param count:           The number of bytes to read in the transaction.\n:param data:            A pointer to the array of bytes to store the data\n                        read from the device.\n\n:returns: Transfer Aborted... false for success, true for aborted."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "buffer",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "readOnly",
                    "returnType": "bool",
                    "tooltip": "Execute a read only transaction with the device.\n\nRead bytes from a device. This method does not write any data to prompt the\ndevice.\n\n:param buffer: A pointer to the array of bytes to store the data read from\n               the device.\n:param count:  The number of bytes to read in the transaction.\n\n:returns: Transfer Aborted... false for success, true for aborted."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "dataToSend",
                            "type": "Buffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "dataReceived",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "transaction",
                    "returnType": "bool",
                    "tooltip": "Generic transaction.\n\nThis is a lower-level interface to the I2C hardware giving you more control\nover each transaction. If you intend to write multiple bytes in the same\ntransaction and do not plan to receive anything back, use writeBulk()\ninstead. Calling this with a receiveSize of 0 will result in an error.\n\n:param dataToSend:   Buffer of data to send as part of the transaction.\n:param sendSize:     Number of bytes to send as part of the transaction.\n:param dataReceived: Buffer to read data into.\n:param receiveSize:  Number of bytes to read from the device.\n\n:returns: Transfer Aborted... false for success, true for aborted."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "registerAddress",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "expected",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "verifySensor",
                    "returnType": "bool",
                    "tooltip": "Verify that a device's registers contain expected values.\n\nMost devices will have a set of registers that contain a known value that\ncan be used to identify them.  This allows an I2C device driver to easily\nverify that the device contains the expected value.\n\n@pre The device must support and be configured to use register\nauto-increment.\n\n:param registerAddress: The base register to start reading from the device.\n:param count:           The size of the field to be verified.\n:param expected:        A buffer containing the values expected from the\n                        device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "registerAddress",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "write",
                    "returnType": "bool",
                    "tooltip": "Execute a write transaction with the device.\n\nWrite a single byte to a register on a device and wait until the\ntransaction is complete.\n\n:param registerAddress: The address of the register on the device to be\n                        written.\n:param data:            The byte to write to the register on the device.\n\n:returns: Transfer Aborted... false for success, true for aborted."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.I2C"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C",
                    "functionName": "writeBulk",
                    "returnType": "bool",
                    "tooltip": "Execute a bulk write transaction with the device.\n\nWrite multiple bytes to a device and wait until the\ntransaction is complete.\n\n:param data:  The data to write to the register on the device.\n:param count: The number of bytes to be written.\n\n:returns: Transfer Aborted... false for success, true for aborted."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.I2C.Port",
            "classVariables": [
                {
                    "name": "kPort0",
                    "tooltip": "",
                    "type": "wpilib.I2C.Port",
                    "writable": false
                },
                {
                    "name": "kPort1",
                    "tooltip": "",
                    "type": "wpilib.I2C.Port",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.I2C.Port",
                    "functionName": "__init__",
                    "returnType": "wpilib.I2C.Port",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.IterativeRobotBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "__init__",
                    "returnType": "wpilib.IterativeRobotBase",
                    "tooltip": "Constructor for IterativeRobotBase.\n\n:param period: Period."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousExit",
                    "returnType": "None",
                    "tooltip": "Exit code for autonomous mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits autonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for autonomous mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters autonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for autonomous mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in\nautonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledExit",
                    "returnType": "None",
                    "tooltip": "Exit code for disabled mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits disabled mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for disabled mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time\nthe robot enters disabled mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for disabled mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in disabled\nmode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "driverStationConnected",
                    "returnType": "None",
                    "tooltip": "Code that needs to know the DS state should go here.\n\nUsers should override this method for initialization that needs to occur\nafter the DS is connected, such as needing the alliance information."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "endCompetition",
                    "returnType": "None",
                    "tooltip": "Ends the main loop in StartCompetition()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "getControlState",
                    "returnType": "tuple[bool, bool, bool]",
                    "tooltip": "More efficient way to determine what state the robot is in.\n\n:returns: booleans representing enabled, isautonomous, istest\n\n.. versionadded:: 2019.2.1\n\n.. note:: This function only exists in RobotPy"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gets time period between calls to Periodic() functions."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isAutonomous",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Autonomous mode.\n\n:returns: True if the robot is currently operating Autonomously as determined\n          by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isAutonomousEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Autonomous mode and enabled.\n\n:returns: True if the robot us currently operating Autonomously while enabled\n          as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isDisabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the Robot is currently disabled.\n\n:returns: True if the Robot is currently disabled by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the Robot is currently enabled.\n\n:returns: True if the Robot is currently enabled by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTeleop",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Operator Control mode.\n\n:returns: True if the robot is currently operating in Tele-Op mode as\n          determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTeleopEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is current in Operator Control mode and enabled.\n\n:returns: True if the robot is currently operating in Tele-Op mode while\n          enabled as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTest",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Test mode.\n\n:returns: True if the robot is currently running in Test mode as determined\n          by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTestEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is current in Test mode and enabled.\n\n:returns: True if the robot is currently operating in Test mode while\n          enabled as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "printWatchdogEpochs",
                    "returnType": "None",
                    "tooltip": "Prints list of epochs added so far and their times."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "robotInit",
                    "returnType": "None",
                    "tooltip": "Robot-wide initialization code should go here.\n\nUsers should override this method for default Robot-wide initialization\nwhich will be called when the robot is first powered on. It will be called\nexactly one time.\n\nNote: This method is functionally identical to the class constructor so\nthat should be used instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "robotPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for all modes should go here.\n\nThis function is called each time a new packet is received from the driver\nstation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "setNetworkTablesFlushEnabled",
                    "returnType": "None",
                    "tooltip": "Enables or disables flushing NetworkTables every loop iteration.\nBy default, this is enabled.\n\n:deprecated: Deprecated without replacement.\n\n:param enabled: True to enable, false to disable"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "startCompetition",
                    "returnType": "None",
                    "tooltip": "Start the main robot code. This function will be called once and should not\nexit until signalled by EndCompetition()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopExit",
                    "returnType": "None",
                    "tooltip": "Exit code for teleop mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits teleop mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for teleop mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters teleop mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for teleop mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in teleop\nmode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testExit",
                    "returnType": "None",
                    "tooltip": "Exit code for test mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits test mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for test mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters test mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for test mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in test\nmode."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "getRuntimeType",
                    "returnType": "wpilib.RuntimeType",
                    "tooltip": "Get the current runtime type.\n\n:returns: Current runtime type."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "isReal",
                    "returnType": "bool",
                    "tooltip": "Get if the robot is real.\n\n:returns: If the robot is running in the real world."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "isSimulation",
                    "returnType": "bool",
                    "tooltip": "Get if the robot is a simulation.\n\n:returns: If the robot is running in simulation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "robot_cls",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "main",
                    "returnType": "object",
                    "tooltip": "Starting point for the application"
                }
            ]
        },
        {
            "className": "wpilib.Jaguar",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Jaguar",
                    "functionName": "__init__",
                    "returnType": "wpilib.Jaguar",
                    "tooltip": "Constructor for a Jaguar connected via PWM.\n\n:param channel: The PWM channel that the Jaguar is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Jaguar",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.Joystick",
            "classVariables": [
                {
                    "name": "kDefaultThrottleChannel",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kDefaultTwistChannel",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kDefaultXChannel",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kDefaultYChannel",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kDefaultZChannel",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "__init__",
                    "returnType": "wpilib.Joystick",
                    "tooltip": "Construct an instance of a joystick.\n\nThe joystick index is the USB port on the Driver Station.\n\n:param port: The port on the Driver Station that the joystick is plugged\n             into (0-5)."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param pov:   index of the POV to read (starting at 0). Defaults to 0.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVCenter",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the center of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDown",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down left direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the right direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUp",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up direction of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up direction of a POV on\n          the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisGreaterThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is greater than\n          the provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisLessThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is less than the\n          provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "button",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around this button's digital signal.\n\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n\n:returns: an event instance representing the button's digital signal attached\n          to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisCount",
                    "returnType": "int",
                    "tooltip": "Get the number of axes for the HID.\n\n:returns: the number of axis for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisType",
                    "returnType": "int",
                    "tooltip": "Get the axis type of a joystick axis.\n\n:returns: the axis type of a joystick axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getButtonCount",
                    "returnType": "int",
                    "tooltip": "Get the number of buttons for the HID.\n\n:returns: the number of buttons on the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getDirectionDegrees",
                    "returnType": "wpimath.units.degrees",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getDirectionRadians",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Get the direction of the vector formed by the joystick and its origin. 0 is\nforward and clockwise is positive. (Straight right is \u03c0/2 radians or 90\ndegrees.)\n\n:returns: The direction of the vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getMagnitude",
                    "returnType": "float",
                    "tooltip": "Get the magnitude of the vector formed by the joystick's\ncurrent position relative to its origin.\n\n:returns: The magnitude of the direction vector"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Get the name of the HID.\n\n:returns: the name of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "0",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOV",
                    "returnType": "wpilib.DriverStation.POVDirection",
                    "tooltip": "Get the angle of a POV on the HID.\n\n:param pov: The index of the POV to read (starting at 0)\n\n:returns: the angle of the POV."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOVCount",
                    "returnType": "int",
                    "tooltip": "Get the number of POVs for the HID.\n\n:returns: the number of POVs for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPort",
                    "returnType": "int",
                    "tooltip": "Get the port number of the HID.\n\n:returns: The port number of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawAxis",
                    "returnType": "float",
                    "tooltip": "Get the value of the axis.\n\n:param axis: The axis to read, starting at 0.\n\n:returns: The value of the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButton",
                    "returnType": "bool",
                    "tooltip": "Get the button value (starting at button 1).\n\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\n\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n\n:param button: The button number to be read (starting at 1)\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getThrottle",
                    "returnType": "float",
                    "tooltip": "Get the throttle value of the current joystick.\n\nThis depends on the mapping of the joystick connected to the current port."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getThrottleChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel currently associated with the throttle axis.\n\n:returns: The channel for the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getTop",
                    "returnType": "bool",
                    "tooltip": "Read the state of the top button on the joystick.\n\nLook up which button has been assigned to the top and read its state.\n\n:returns: The state of the top button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getTopPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the top button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getTopReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the top button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getTrigger",
                    "returnType": "bool",
                    "tooltip": "Read the state of the trigger on the joystick.\n\nLook up which button has been assigned to the trigger and read its state.\n\n:returns: The state of the trigger."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getTriggerPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the trigger was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getTriggerReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the trigger was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getTwist",
                    "returnType": "float",
                    "tooltip": "Get the twist value of the current joystick.\n\nThis depends on the mapping of the joystick connected to the current port."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getTwistChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel currently associated with the twist axis.\n\n:returns: The channel for the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getType",
                    "returnType": "wpilib.interfaces.GenericHID.HIDType",
                    "tooltip": "Get the type of the HID.\n\n:returns: the type of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getX",
                    "returnType": "float",
                    "tooltip": "Get the X value of the current joystick.\n\nThis depends on the mapping of the joystick connected to the current port.\nOn most joysticks, positive is to the right."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getXChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel currently associated with the X axis.\n\n:returns: The channel for the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getY",
                    "returnType": "float",
                    "tooltip": "Get the Y value of the current joystick.\n\nThis depends on the mapping of the joystick connected to the current port.\nOn most joysticks, positive is to the back."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getYChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel currently associated with the Y axis.\n\n:returns: The channel for the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getZ",
                    "returnType": "float",
                    "tooltip": "Get the Z value of the current joystick.\n\nThis depends on the mapping of the joystick connected to the current port."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "getZChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel currently associated with the Z axis.\n\n:returns: The channel for the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": "Get if the HID is connected.\n\n:returns: true if the HID is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutput",
                    "returnType": "None",
                    "tooltip": "Set a single HID output value for the HID.\n\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutputs",
                    "returnType": "None",
                    "tooltip": "Set all output values for the HID.\n\n:param value: The 32 bit output value (1 bit for each output)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setRumble",
                    "returnType": "None",
                    "tooltip": "Set the rumble output for the HID.\n\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "setThrottleChannel",
                    "returnType": "None",
                    "tooltip": "Set the channel associated with the throttle axis.\n\n:param channel: The channel to set the axis to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "setTwistChannel",
                    "returnType": "None",
                    "tooltip": "Set the channel associated with the twist axis.\n\n:param channel: The channel to set the axis to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "setXChannel",
                    "returnType": "None",
                    "tooltip": "Set the channel associated with the X axis.\n\n:param channel: The channel to set the axis to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "setYChannel",
                    "returnType": "None",
                    "tooltip": "Set the channel associated with the Y axis.\n\n:param channel: The channel to set the axis to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "setZChannel",
                    "returnType": "None",
                    "tooltip": "Set the channel associated with the Z axis.\n\n:param channel: The channel to set the axis to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "top",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the top button's digital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the top button's digital signal\n          attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Joystick"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick",
                    "functionName": "trigger",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the trigger button's digital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the trigger button's digital signal\n          attached to the given loop."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Joystick.AxisType",
            "classVariables": [
                {
                    "name": "kThrottleAxis",
                    "tooltip": "",
                    "type": "wpilib.Joystick.AxisType",
                    "writable": false
                },
                {
                    "name": "kTwistAxis",
                    "tooltip": "",
                    "type": "wpilib.Joystick.AxisType",
                    "writable": false
                },
                {
                    "name": "kXAxis",
                    "tooltip": "",
                    "type": "wpilib.Joystick.AxisType",
                    "writable": false
                },
                {
                    "name": "kYAxis",
                    "tooltip": "",
                    "type": "wpilib.Joystick.AxisType",
                    "writable": false
                },
                {
                    "name": "kZAxis",
                    "tooltip": "",
                    "type": "wpilib.Joystick.AxisType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick.AxisType",
                    "functionName": "__init__",
                    "returnType": "wpilib.Joystick.AxisType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Joystick.ButtonType",
            "classVariables": [
                {
                    "name": "kTopButton",
                    "tooltip": "",
                    "type": "wpilib.Joystick.ButtonType",
                    "writable": false
                },
                {
                    "name": "kTriggerButton",
                    "tooltip": "",
                    "type": "wpilib.Joystick.ButtonType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Joystick.ButtonType",
                    "functionName": "__init__",
                    "returnType": "wpilib.Joystick.ButtonType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Koors40",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Koors40",
                    "functionName": "__init__",
                    "returnType": "wpilib.Koors40",
                    "tooltip": "Constructor for a Koors40 connected via PWM.\n\n:param channel: The PWM channel that the Koors40 is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Koors40",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.LEDPattern",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "impl",
                            "type": "Callable[[wpilib.LEDPattern.LEDReader, Callable[[typing.SupportsInt, wpilib.Color], None]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "__init__",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "reader",
                            "type": "wpilib.LEDPattern.LEDReader"
                        },
                        {
                            "defaultValue": "",
                            "name": "writer",
                            "type": "Callable[[typing.SupportsInt, wpilib.Color], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "applyTo",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "List[wpilib.AddressableLED.LEDData]"
                        },
                        {
                            "defaultValue": "",
                            "name": "writer",
                            "type": "Callable[[typing.SupportsInt, wpilib.Color], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "applyTo",
                    "returnType": "None",
                    "tooltip": "Writes the pattern to an LED buffer. Dynamic animations should be called\nperiodically (such as with a command or with a periodic method) to refresh\nthe buffer over time.\n\nThis method is intentionally designed to use separate objects for reading\nand writing data. By splitting them up, we can easily modify the behavior\nof some base pattern to make it scroll, blink, or breathe by intercepting\nthe data writes to transform their behavior to whatever we like.\n\n:param data:   the current data of the LED strip\n:param writer: data writer for setting new LED colors on the LED strip"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "List[wpilib.AddressableLED.LEDData]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "applyTo",
                    "returnType": "None",
                    "tooltip": "Writes the pattern to an LED buffer. Dynamic animations should be called\nperiodically (such as with a command or with a periodic method) to refresh\nthe buffer over time.\n\nThis method is intentionally designed to use separate objects for reading\nand writing data. By splitting them up, we can easily modify the behavior\nof some base pattern to make it scroll, blink, or breathe by intercepting\nthe data writes to transform their behavior to whatever we like.\n\n:param data: the current data of the LED strip"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "relativeBrightness",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "atBrightness",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that plays this one, but at a different brightness.\nBrightness multipliers are applied per-channel in the RGB space; no HSL or\nHSV conversions are applied. Multipliers are also uncapped, which may\nresult in the original colors washing out and appearing less saturated or\neven just a bright white.\n\nThis method is predominantly intended for dimming LEDs to avoid\npainfully bright or distracting patterns from playing (apologies to the\n2024 NE Greater Boston field staff).\n\nFor example, dimming can be done simply by adding a call to\n`atBrightness` at the end of a pattern:\n\n::\n\n    // Solid red, but at 50% brightness\n    frc::LEDPattern::Solid(frc::Color::kRed).AtBrightness(0.5);\n  \n    // Solid white, but at only 10% (i.e. ~0.5V)\n    frc::LEDPattern::Solid(frc:Color::kWhite).AtBrightness(0.1);\n\n:param relativeBrightness: the multiplier to apply to all channels to modify\n                           brightness\n\n:returns: the input pattern, displayed at"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpilib.LEDPattern"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "blend",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that displays outputs as a combination of this pattern\nand another. Color values are calculated as the average color of both\npatterns; if both patterns set the same LED to the same color, then it is\nset to that color, but if one pattern sets to one color and the other\npattern sets it to off, then it will show the color of the first pattern\nbut at approximately half brightness. This is different from {@link\nLEDPattern::OverlayOn(const LEDPattern&)}, which will show the base pattern\nat full brightness if the overlay is set to off at that position.\n\n:param other: the pattern to blend with\n\n:returns: the blended pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "onTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "offTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "blink",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that switches between playing this pattern and turning\nthe entire LED strip off.\n\n:param onTime:  how long the pattern should play for, per cycle\n:param offTime: how long the pattern should be turned off for, per cycle\n\n:returns: the blinking pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "onTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "blink",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Like {@link LEDPattern::Blink(units::second_t)}, but where the\n\"off\" time is exactly equal to the \"on\" time.\n\n:param onTime: how long the pattern should play for (and be turned off for),\n               per cycle\n\n:returns: the blinking pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "breathe",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that brightens and dims this one over time. Brightness\nfollows a sinusoidal pattern.\n\n:param period: how fast the breathing pattern should complete a single cycle\n\n:returns: the breathing pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "indexMapper",
                            "type": "Callable[[typing.SupportsInt, typing.SupportsInt], int]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "mapIndex",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern with remapped indices.\n\n:param indexMapper: the index mapper\n\n:returns: the mapped pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "wpilib.LEDPattern"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "mask",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Similar to {@link LEDPattern::Blend(const LEDPattern&)}, but performs a\nbitwise mask on each color channel rather than averaging the colors for\neach LED. This can be helpful for displaying only a portion of the base\npattern by applying a mask that sets the desired area to white, and all\nother areas to black. However, it can also be used to display only certain\ncolor channels or hues; for example, masking with {@code\nLEDPattern.color(Color.kRed)} will turn off the green and blue channels on\nthe output pattern, leaving only the red LEDs to be illuminated.\n\n:param mask: the mask to apply\n\n:returns: the masked pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "offset",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "offsetBy",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that displays this one, but offset by a certain number of\nLEDs. The offset pattern will wrap around, if necessary.\n\n:param offset: how many LEDs to offset by\n\n:returns: the offset pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "base",
                            "type": "wpilib.LEDPattern"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "overlayOn",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that plays this pattern overlaid on another. Anywhere\nthis pattern sets an LED to off (or {@link frc::Color::kBlack}), the base\npattern will be displayed instead.\n\n:param base: the base pattern to overlay on top of\n\n:returns: the combined overlay pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "reversed",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that displays this one in reverse. Scrolling patterns\nwill scroll in the opposite direction (but at the same speed). It will\ntreat the end of an LED strip as the start, and the start of the strip as\nthe end. This can be useful for making ping-pong patterns that travel from\none end of an LED strip to the other, then reverse direction and move back\nto the start. This can also be useful when working with LED strips\nconnected in a serpentine pattern (where the start of one strip is\nconnected to the end of the previous one).\n\n:returns: the reverse pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "ledSpacing",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "scrollAtAbsoluteSpeed",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that plays this one scrolling up an LED strip. A negative\nvelocity makes the pattern play in reverse.\n\nFor example, scrolling a pattern at 4 inches per second along an LED\nstrip with 60 LEDs per meter:\n\n::\n\n    // LEDs per meter, a known value taken from the spec sheet of our\n  particular LED strip units::meter_t LED_SPACING = units::meter_t{1 /60.0};\n  \n    frc::LEDPattern rainbow = frc::LEDPattern::Rainbow();\n    frc::LEDPattern scrollingRainbow =\n      rainbow.ScrollAtAbsoluteSpeed(units::feet_per_second_t{1 / 3.0},\n  LED_SPACING);\n\nNote that this pattern will scroll *faster* if applied to a less\ndense LED strip (such as 30 LEDs per meter), or *slower* if applied to\na denser LED strip (such as 120 or 144 LEDs per meter).\n\n:param velocity:   how fast the pattern should move along a physical LED strip\n:param ledSpacing: the distance between adjacent LEDs on the physical LED\n                   strip\n\n:returns: the scrolling pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.hertz"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "scrollAtRelativeSpeed",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that plays this one scrolling up the buffer. The velocity\ncontrols how fast the pattern returns back to its original position, and is\nin terms of the length of the LED strip; scrolling across a segment that is\n10 LEDs long will travel twice as fast as on a segment that's only 5 LEDs\nlong (assuming equal LED density on both segments)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern"
                        },
                        {
                            "defaultValue": "",
                            "name": "signal",
                            "type": "Callable[[], bool]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "synchronizedBlink",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that blinks this one on and off in sync with a true/false\nsignal. The pattern will play while the signal outputs ``true``, and\nwill turn off while the signal outputs\n``false``.\n\n:param signal: the signal to synchronize with\n\n:returns: the blinking pattern"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.LEDPattern.GradientType"
                        },
                        {
                            "defaultValue": "",
                            "name": "colors",
                            "type": "List[wpilib.Color]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "gradient",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that displays a non-animated gradient of colors across\nthe entire length of the LED strip. Colors are evenly distributed along the\nfull length of the LED strip. The gradient type is configured with the\n``type`` parameter, allowing the gradient to be either continuous (no\nseams, good for scrolling effects) or discontinuous (a clear seam is\nvisible, but the gradient applies to the full length of the LED strip\nwithout needing to use some space for wrapping).\n\n:param type:   the type of gradient (continuous or discontinuous)\n:param colors: the colors to display in the gradient\n\n:returns: a motionless gradient pattern"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "off",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "A pattern that turns off all LEDs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "progressFunction",
                            "type": "Callable[[], float]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "progressMaskLayer",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that works as a mask layer for {@link\nLEDPattern::Mask(const LEDPattern&)} that illuminates only the portion of\nthe LED strip corresponding with some progress. The mask pattern will start\nfrom the base and set LEDs to white at a proportion equal to the progress\nreturned by the function. Some usages for this could be for displaying\nprogress of a flywheel to its target velocity, progress of a complex\nautonomous sequence, or the height of an elevator.\n\nFor example, creating a mask for displaying a red-to-blue gradient,\nstarting from the red end, based on where an elevator is in its range of\ntravel.\n\n::\n\n  frc::LEDPattern basePattern =\n    frc::LEDPattern::Gradient(frc::Color::kRed, frc::Color::kBlue);\n  frc::LEDPattern progressPattern =\n    basePattern.Mask(frc::LEDPattern::ProgressMaskLayer([&]() {\n      return elevator.GetHeight() / elevator.MaxHeight();\n    });\n\n:param progressFunction: the function to call to determine the progress.\n                         This should return values in the range [0, 1]; any values outside that\n                         range will be clamped.\n\n:returns: the mask pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "saturation",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "rainbow",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates an LED pattern that displays a rainbow across the color wheel. The\nrainbow pattern will stretch across the entire length of the LED strip.\n\n:param saturation: the saturation of the HSV colors, in [0, 255]\n:param value:      the value of the HSV colors, in [0, 255]\n\n:returns: the rainbow pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "color",
                            "type": "wpilib.Color"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "solid",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Creates a pattern that displays a single static color along the entire\nlength of the LED strip.\n\n:param color: the color to display\n\n:returns: the pattern"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "steps",
                            "type": "List[tuple[typing.SupportsFloat, wpilib.Color]]"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern",
                    "functionName": "steps",
                    "returnType": "wpilib.LEDPattern",
                    "tooltip": "Display a set of colors in steps across the length of the LED strip. No\ninterpolation is done between colors. Colors are specified by the first LED\non the strip to show that color. The last color in the map will be\ndisplayed all the way to the end of the strip. LEDs positioned before the\nfirst specified step will be turned off (you can think of this as if\nthere's a 0 -> black step by default).\n\n:param steps: a map of progress to the color to start displaying at that\n              position along the LED strip\n\n:returns: a motionless step pattern"
                }
            ]
        },
        {
            "className": "wpilib.LEDPattern.GradientType",
            "classVariables": [
                {
                    "name": "kContinuous",
                    "tooltip": "",
                    "type": "wpilib.LEDPattern.GradientType",
                    "writable": false
                },
                {
                    "name": "kDiscontinuous",
                    "tooltip": "",
                    "type": "wpilib.LEDPattern.GradientType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern.GradientType",
                    "functionName": "__init__",
                    "returnType": "wpilib.LEDPattern.GradientType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.LEDPattern.LEDReader",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "impl",
                            "type": "Callable[[typing.SupportsInt], wpilib.AddressableLED.LEDData]"
                        },
                        {
                            "defaultValue": "",
                            "name": "size",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern.LEDReader",
                    "functionName": "__init__",
                    "returnType": "wpilib.LEDPattern.LEDReader",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.LEDPattern.LEDReader"
                        }
                    ],
                    "declaringClassName": "wpilib.LEDPattern.LEDReader",
                    "functionName": "size",
                    "returnType": "int",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Mechanism2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "width",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "height",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "Color8Bit(red=0, green=0, blue=32)",
                            "name": "backgroundColor",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.Mechanism2d",
                    "functionName": "__init__",
                    "returnType": "wpilib.Mechanism2d",
                    "tooltip": "Create a new Mechanism2d with the given dimensions and background color.\n\nThe dimensions represent the canvas that all the nodes are drawn on. The\ndefault color is dark blue.\n\n:param width:           the width\n:param height:          the height\n:param backgroundColor: the background color"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Mechanism2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Mechanism2d",
                    "functionName": "getRoot",
                    "returnType": "wpilib.MechanismRoot2d",
                    "tooltip": "Get or create a root in this Mechanism2d with the given name and\nposition.\n\nIf a root with the given name already exists, the given x and y\ncoordinates are not used.\n\n:param name: the root name\n:param x:    the root x coordinate\n:param y:    the root y coordinate\n\n:returns: a new root object, or the existing one with the given name."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Mechanism2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "ntcore.NTSendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.Mechanism2d",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Mechanism2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "color",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.Mechanism2d",
                    "functionName": "setBackgroundColor",
                    "returnType": "None",
                    "tooltip": "Set the Mechanism2d background color.\n\n:param color: the new background color"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.MechanismLigament2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "__init__",
                    "returnType": "wpilib.MechanismLigament2d",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismObject2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.degrees"
                        },
                        {
                            "defaultValue": "6",
                            "name": "lineWidth",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "Color8Bit(red=235, green=137, blue=52)",
                            "name": "color",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismObject2d",
                    "functionName": "appendLigament",
                    "returnType": "wpilib.MechanismLigament2d",
                    "tooltip": "Append a ligament node"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismLigament2d"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "getAngle",
                    "returnType": "float",
                    "tooltip": "Get the ligament's angle relative to its parent.\n\n:returns: the angle"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismLigament2d"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "getColor",
                    "returnType": "wpilib.Color8Bit",
                    "tooltip": "Get the ligament color.\n\n:returns: the color of the line"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismLigament2d"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "getLength",
                    "returnType": "float",
                    "tooltip": "Get the ligament length.\n\n:returns: the line length"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismLigament2d"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "getLineWeight",
                    "returnType": "float",
                    "tooltip": "Get the line thickness.\n\n:returns: the line thickness"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismObject2d"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismObject2d",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Retrieve the object's name.\n\n:returns: the object's name relative to its parent."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismLigament2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.degrees"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "setAngle",
                    "returnType": "None",
                    "tooltip": "Set the ligament's angle relative to its parent.\n\n:param angle: the angle"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismLigament2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "color",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "setColor",
                    "returnType": "None",
                    "tooltip": "Set the ligament color.\n\n:param color: the color of the line"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismLigament2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "setLength",
                    "returnType": "None",
                    "tooltip": "Set the ligament's length.\n\n:param length: the line length"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismLigament2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "lineWidth",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismLigament2d",
                    "functionName": "setLineWeight",
                    "returnType": "None",
                    "tooltip": "Set the line thickness.\n\n:param lineWidth: the line thickness"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.MechanismObject2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismObject2d",
                    "functionName": "__init__",
                    "returnType": "wpilib.MechanismObject2d",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismObject2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.degrees"
                        },
                        {
                            "defaultValue": "6",
                            "name": "lineWidth",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "Color8Bit(red=235, green=137, blue=52)",
                            "name": "color",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismObject2d",
                    "functionName": "appendLigament",
                    "returnType": "wpilib.MechanismLigament2d",
                    "tooltip": "Append a ligament node"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismObject2d"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismObject2d",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Retrieve the object's name.\n\n:returns: the object's name relative to its parent."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.MechanismRoot2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismRoot2d",
                    "functionName": "__init__",
                    "returnType": "wpilib.MechanismRoot2d",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismRoot2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.degrees"
                        },
                        {
                            "defaultValue": "6",
                            "name": "lineWidth",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "Color8Bit(red=235, green=137, blue=52)",
                            "name": "color",
                            "type": "wpilib.Color8Bit"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismRoot2d",
                    "functionName": "appendLigament",
                    "returnType": "wpilib.MechanismLigament2d",
                    "tooltip": "Append a ligament node"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismRoot2d"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismRoot2d",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MechanismRoot2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.MechanismRoot2d",
                    "functionName": "setPosition",
                    "returnType": "None",
                    "tooltip": "Set the root's position.\n\n:param x: new x coordinate\n:param y: new y coordinate"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.MotorControllerGroup",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "__init__",
                    "returnType": "wpilib.MotorControllerGroup",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorControllerGroup"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorControllerGroup"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorControllerGroup"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorControllerGroup"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorControllerGroup"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorControllerGroup"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorControllerGroup"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorControllerGroup"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorControllerGroup",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.MotorSafety",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "__init__",
                    "returnType": "wpilib.MotorSafety",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": "Returns a description to print when an error occurs.\n\n:returns: Description to print when an error occurs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": "Called to stop the motor when the timeout expires."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.Notifier",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "handler",
                            "type": "Callable[[], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.Notifier",
                    "functionName": "__init__",
                    "returnType": "wpilib.Notifier",
                    "tooltip": "Create a Notifier for timer event notification.\n\n:param handler: The handler is called at the notification time which is set\n                using StartSingle or StartPeriodic."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Notifier"
                        },
                        {
                            "defaultValue": "",
                            "name": "handler",
                            "type": "Callable[[], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.Notifier",
                    "functionName": "setCallback",
                    "returnType": "None",
                    "tooltip": "Change the handler function.\n\n:param handler: Handler"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Notifier"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Notifier",
                    "functionName": "setName",
                    "returnType": "None",
                    "tooltip": "Sets the name of the notifier.  Used for debugging purposes only.\n\n:param name: Name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Notifier"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.Notifier",
                    "functionName": "startPeriodic",
                    "returnType": "None",
                    "tooltip": "Register for periodic event notification.\n\nA timer event is queued for periodic event notification. Each time the\ninterrupt occurs, the event will be immediately requeued for the same time\ninterval.\n\n:param period: Period to call the handler starting one period\n               after the call to this method."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Notifier"
                        },
                        {
                            "defaultValue": "",
                            "name": "delay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.Notifier",
                    "functionName": "startSingle",
                    "returnType": "None",
                    "tooltip": "Register for single event notification.\n\nA timer event is queued for a single event after the specified delay.\n\n:param delay: Amount of time to wait before the handler is called."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Notifier"
                        }
                    ],
                    "declaringClassName": "wpilib.Notifier",
                    "functionName": "stop",
                    "returnType": "None",
                    "tooltip": "Stop timer events from occurring.\n\nStop any repeating timer events from occurring. This will also remove any\nsingle notification events from the queue.\n\nIf a timer-based call to the registered handler is in progress, this\nfunction will block until the handler call is complete."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "realTime",
                            "type": "bool"
                        },
                        {
                            "defaultValue": "",
                            "name": "priority",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Notifier",
                    "functionName": "setHALThreadPriority",
                    "returnType": "bool",
                    "tooltip": "Sets the HAL notifier thread priority.\n\nThe HAL notifier thread is responsible for managing the FPGA's notifier\ninterrupt and waking up user's Notifiers when it's their time to run.\nGiving the HAL notifier thread real-time priority helps ensure the user's\nreal-time Notifiers, if any, are notified to run in a timely manner.\n\n:param realTime: Set to true to set a real-time priority, false for standard\n                 priority.\n:param priority: Priority to set the thread to. For real-time, this is 1-99\n                 with 99 being highest. For non-real-time, this is forced to\n                 0. See \"man 7 sched\" for more details.\n\n:returns: True on success."
                }
            ]
        },
        {
            "className": "wpilib.OnboardIMU",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "mountOrientation",
                            "type": "wpilib.OnboardIMU.MountOrientation"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "__init__",
                    "returnType": "wpilib.OnboardIMU",
                    "tooltip": "Constructs a handle to the SystemCore onboard IMU.\n\n:param mountOrientation: the mount orientation of SystemCore to determine\n                         yaw."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getAccelX",
                    "returnType": "wpimath.units.meters_per_second_squared",
                    "tooltip": "Get the acceleration along the X axis of the IMU.\n\n:returns: acceleration along the X axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getAccelY",
                    "returnType": "wpimath.units.meters_per_second_squared",
                    "tooltip": "Get the acceleration along the Z axis of the IMU.\n\n:returns: acceleration along the Z axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getAccelZ",
                    "returnType": "wpimath.units.meters_per_second_squared",
                    "tooltip": "Get the acceleration along the Z axis of the IMU.\n\n:returns: acceleration along the Z axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getAngleX",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Get the angle about the X axis of the IMU.\n\n:returns: angle about the X axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getAngleY",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Get the angle about the Y axis of the IMU.\n\n:returns: angle about the Y axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getAngleZ",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Get the angle about the Z axis of the IMU.\n\n:returns: angle about the Z axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getGyroRateX",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Get the angular rate about the X axis of the IMU.\n\n:returns: angular rate about the X axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getGyroRateY",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Get the angular rate about the Y axis of the IMU.\n\n:returns: angular rate about the Y axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getGyroRateZ",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Get the angular rate about the Z axis of the IMU.\n\n:returns: angular rate about the Z axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getQuaternion",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Get the 3D orientation as a Quaternion.\n\n:returns: 3D orientation"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getRotation2d",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Get the yaw as a Rotation2d.\n\n:returns: yaw"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getRotation3d",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Get the 3D orientation as a Rotation3d.\n\n:returns: 3D orientation"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "getYaw",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Get the yaw value\n\n:returns: yaw value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.OnboardIMU"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU",
                    "functionName": "resetYaw",
                    "returnType": "None",
                    "tooltip": "Reset the current yaw value to 0. Future reads of the yaw value will be\nrelative to the current orientation."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.OnboardIMU.MountOrientation",
            "classVariables": [
                {
                    "name": "kFlat",
                    "tooltip": "",
                    "type": "wpilib.OnboardIMU.MountOrientation",
                    "writable": false
                },
                {
                    "name": "kLandscape",
                    "tooltip": "",
                    "type": "wpilib.OnboardIMU.MountOrientation",
                    "writable": false
                },
                {
                    "name": "kPortrait",
                    "tooltip": "",
                    "type": "wpilib.OnboardIMU.MountOrientation",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.OnboardIMU.MountOrientation",
                    "functionName": "__init__",
                    "returnType": "wpilib.OnboardIMU.MountOrientation",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PS4Controller",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "__init__",
                    "returnType": "wpilib.PS4Controller",
                    "tooltip": "Construct an instance of a controller.\n\nThe controller index is the USB port on the Driver Station.\n\n:param port: The port on the Driver Station that the controller is plugged\n             into (0-5)."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "L1",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left trigger 1 button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left trigger 1 button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "L2",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left trigger 2 button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left trigger 2 button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "L3",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the L3 (left stick) button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the L3 (left stick) button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param pov:   index of the POV to read (starting at 0). Defaults to 0.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVCenter",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the center of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDown",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down left direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the right direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUp",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up direction of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up direction of a POV on\n          the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "PS",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the PlayStation button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the PlayStation button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "R1",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right trigger 1 button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right trigger 1 button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "R2",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right trigger 2 button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right trigger 2 button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "R3",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the R3 (right stick) button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the R3 (right stick) button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisGreaterThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is greater than\n          the provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisLessThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is less than the\n          provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "button",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around this button's digital signal.\n\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n\n:returns: an event instance representing the button's digital signal attached\n          to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "circle",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the circle button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the circle button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "cross",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the cross button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the cross button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisCount",
                    "returnType": "int",
                    "tooltip": "Get the number of axes for the HID.\n\n:returns: the number of axis for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisType",
                    "returnType": "int",
                    "tooltip": "Get the axis type of a joystick axis.\n\n:returns: the axis type of a joystick axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getButtonCount",
                    "returnType": "int",
                    "tooltip": "Get the number of buttons for the HID.\n\n:returns: the number of buttons on the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getCircleButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the circle button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getCircleButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the circle button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getCircleButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the circle button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getCrossButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the cross button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getCrossButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the cross button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getCrossButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the cross button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL1Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left trigger 1 button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL1ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger 1 button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL1ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger 1 button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL2Axis",
                    "returnType": "float",
                    "tooltip": "Get the left trigger 2 axis value of the controller. Note that this axis\nis bound to the range of [0, 1] as opposed to the usual [-1, 1].\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL2Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left trigger 2 button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL2ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger 2 button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL2ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger 2 button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL3Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the L3 (left stick) button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL3ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the L3 (left stick) button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getL3ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the L3 (left stick) button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getLeftX",
                    "returnType": "float",
                    "tooltip": "Get the X axis value of left side of the controller. Right is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getLeftY",
                    "returnType": "float",
                    "tooltip": "Get the Y axis value of left side of the controller. Back is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Get the name of the HID.\n\n:returns: the name of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getOptionsButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the options button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getOptionsButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the options button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getOptionsButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the options button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "0",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOV",
                    "returnType": "wpilib.DriverStation.POVDirection",
                    "tooltip": "Get the angle of a POV on the HID.\n\n:param pov: The index of the POV to read (starting at 0)\n\n:returns: the angle of the POV."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOVCount",
                    "returnType": "int",
                    "tooltip": "Get the number of POVs for the HID.\n\n:returns: the number of POVs for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getPSButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the PlayStation button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getPSButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the PlayStation button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getPSButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the PlayStation button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPort",
                    "returnType": "int",
                    "tooltip": "Get the port number of the HID.\n\n:returns: The port number of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR1Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right trigger 1 button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR1ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger 1 button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR1ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger 1 button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR2Axis",
                    "returnType": "float",
                    "tooltip": "Get the right trigger 2 axis value of the controller. Note that this axis\nis bound to the range of [0, 1] as opposed to the usual [-1, 1].\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR2Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right trigger 2 button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR2ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger 2 button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR2ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger 2 button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR3Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the R3 (right stick) button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR3ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the R3 (right stick) button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getR3ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the R3 (right stick) button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawAxis",
                    "returnType": "float",
                    "tooltip": "Get the value of the axis.\n\n:param axis: The axis to read, starting at 0.\n\n:returns: The value of the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButton",
                    "returnType": "bool",
                    "tooltip": "Get the button value (starting at button 1).\n\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\n\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n\n:param button: The button number to be read (starting at 1)\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getRightX",
                    "returnType": "float",
                    "tooltip": "Get the X axis value of right side of the controller. Right is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getRightY",
                    "returnType": "float",
                    "tooltip": "Get the Y axis value of right side of the controller. Back is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getShareButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the share button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getShareButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the share button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getShareButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the share button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getSquareButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the square button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getSquareButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the square button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getSquareButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the square button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTouchpad",
                    "returnType": "bool",
                    "tooltip": "Read the value of the touchpad button on the controller.\n\n:deprecated: Use GetTouchpadButton instead. This function is deprecated for\n             removal to make function names consistent to allow the HID classes to be\n             automatically generated.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTouchpadButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the touchpad button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTouchpadButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the touchpad button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTouchpadButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the touchpad button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTouchpadPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the touchpad was pressed since the last check.\n\n:deprecated: Use GetTouchpadButtonPressed instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the touchpad was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTouchpadReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the touchpad was released since the last check.\n\n:deprecated: Use GetLeftBumperButton instead. This function is deprecated\n             for removal to make function names consistent to allow the HID classes to\n             be automatically generated.\n\n:returns: Whether the touchpad was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTriangleButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the triangle button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTriangleButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the triangle button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "getTriangleButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the triangle button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getType",
                    "returnType": "wpilib.interfaces.GenericHID.HIDType",
                    "tooltip": "Get the type of the HID.\n\n:returns: the type of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": "Get if the HID is connected.\n\n:returns: true if the HID is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "options",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the options button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the options button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutput",
                    "returnType": "None",
                    "tooltip": "Set a single HID output value for the HID.\n\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutputs",
                    "returnType": "None",
                    "tooltip": "Set all output values for the HID.\n\n:param value: The 32 bit output value (1 bit for each output)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setRumble",
                    "returnType": "None",
                    "tooltip": "Set the rumble output for the HID.\n\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "share",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the share button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the share button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "square",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the square button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the square button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "touchpad",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the touchpad button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the touchpad button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS4Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS4Controller",
                    "functionName": "triangle",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the triangle button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the triangle button's\n          digital signal attached to the given loop."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PS4Controller.Axis",
            "classVariables": [
                {
                    "name": "kL2",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kR2",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PS4Controller.Axis",
                    "functionName": "__init__",
                    "returnType": "wpilib.PS4Controller.Axis",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PS4Controller.Button",
            "classVariables": [
                {
                    "name": "kCircle",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kCross",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kL1",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kL2",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kL3",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kOptions",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kPS",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kR1",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kR2",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kR3",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kShare",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kSquare",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kTouchpad",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kTriangle",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PS4Controller.Button",
                    "functionName": "__init__",
                    "returnType": "wpilib.PS4Controller.Button",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PS5Controller",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "__init__",
                    "returnType": "wpilib.PS5Controller",
                    "tooltip": "Construct an instance of a controller.\n\nThe controller index is the USB port on the Driver Station.\n\n:param port: The port on the Driver Station that the controller is plugged\n             into (0-5)."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "L1",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left trigger 1 button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left trigger 1 button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "L2",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left trigger 2 button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left trigger 2 button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "L3",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the L3 (left stick) button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the L3 (left stick) button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param pov:   index of the POV to read (starting at 0). Defaults to 0.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVCenter",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the center of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDown",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down left direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the right direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUp",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up direction of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up direction of a POV on\n          the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "PS",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the PlayStation button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the PlayStation button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "R1",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right trigger 1 button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right trigger 1 button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "R2",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right trigger 2 button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right trigger 2 button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "R3",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the R3 (right stick) button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the R3 (right stick) button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisGreaterThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is greater than\n          the provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisLessThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is less than the\n          provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "button",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around this button's digital signal.\n\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n\n:returns: an event instance representing the button's digital signal attached\n          to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "circle",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the circle button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the circle button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "create",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the create button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the create button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "cross",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the cross button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the cross button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisCount",
                    "returnType": "int",
                    "tooltip": "Get the number of axes for the HID.\n\n:returns: the number of axis for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisType",
                    "returnType": "int",
                    "tooltip": "Get the axis type of a joystick axis.\n\n:returns: the axis type of a joystick axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getButtonCount",
                    "returnType": "int",
                    "tooltip": "Get the number of buttons for the HID.\n\n:returns: the number of buttons on the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCircleButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the circle button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCircleButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the circle button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCircleButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the circle button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCreateButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the create button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCreateButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the create button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCreateButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the create button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCrossButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the cross button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCrossButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the cross button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getCrossButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the cross button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL1Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left trigger 1 button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL1ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger 1 button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL1ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger 1 button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL2Axis",
                    "returnType": "float",
                    "tooltip": "Get the left trigger 2 axis value of the controller. Note that this axis\nis bound to the range of [0, 1] as opposed to the usual [-1, 1].\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL2Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left trigger 2 button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL2ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger 2 button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL2ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger 2 button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL3Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the L3 (left stick) button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL3ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the L3 (left stick) button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getL3ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the L3 (left stick) button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getLeftX",
                    "returnType": "float",
                    "tooltip": "Get the X axis value of left side of the controller. Right is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getLeftY",
                    "returnType": "float",
                    "tooltip": "Get the Y axis value of left side of the controller. Back is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Get the name of the HID.\n\n:returns: the name of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getOptionsButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the options button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getOptionsButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the options button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getOptionsButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the options button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "0",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOV",
                    "returnType": "wpilib.DriverStation.POVDirection",
                    "tooltip": "Get the angle of a POV on the HID.\n\n:param pov: The index of the POV to read (starting at 0)\n\n:returns: the angle of the POV."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOVCount",
                    "returnType": "int",
                    "tooltip": "Get the number of POVs for the HID.\n\n:returns: the number of POVs for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getPSButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the PlayStation button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getPSButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the PlayStation button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getPSButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the PlayStation button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPort",
                    "returnType": "int",
                    "tooltip": "Get the port number of the HID.\n\n:returns: The port number of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR1Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right trigger 1 button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR1ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger 1 button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR1ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger 1 button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR2Axis",
                    "returnType": "float",
                    "tooltip": "Get the right trigger 2 axis value of the controller. Note that this axis\nis bound to the range of [0, 1] as opposed to the usual [-1, 1].\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR2Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right trigger 2 button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR2ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger 2 button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR2ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger 2 button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR3Button",
                    "returnType": "bool",
                    "tooltip": "Read the value of the R3 (right stick) button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR3ButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the R3 (right stick) button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getR3ButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the R3 (right stick) button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawAxis",
                    "returnType": "float",
                    "tooltip": "Get the value of the axis.\n\n:param axis: The axis to read, starting at 0.\n\n:returns: The value of the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButton",
                    "returnType": "bool",
                    "tooltip": "Get the button value (starting at button 1).\n\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\n\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n\n:param button: The button number to be read (starting at 1)\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getRightX",
                    "returnType": "float",
                    "tooltip": "Get the X axis value of right side of the controller. Right is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getRightY",
                    "returnType": "float",
                    "tooltip": "Get the Y axis value of right side of the controller. Back is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getSquareButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the square button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getSquareButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the square button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getSquareButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the square button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTouchpad",
                    "returnType": "bool",
                    "tooltip": "Read the value of the touchpad button on the controller.\n\n:deprecated: Use GetTouchpadButton instead. This function is deprecated for\n             removal to make function names consistent to allow the HID classes to be\n             automatically generated.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTouchpadButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the touchpad button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTouchpadButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the touchpad button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTouchpadButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the touchpad button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTouchpadPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the touchpad was pressed since the last check.\n\n:deprecated: Use GetTouchpadButtonPressed instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the touchpad was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTouchpadReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the touchpad was released since the last check.\n\n:deprecated: Use GetLeftBumperButton instead. This function is deprecated\n             for removal to make function names consistent to allow the HID classes to\n             be automatically generated.\n\n:returns: Whether the touchpad was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTriangleButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the triangle button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTriangleButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the triangle button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "getTriangleButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the triangle button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getType",
                    "returnType": "wpilib.interfaces.GenericHID.HIDType",
                    "tooltip": "Get the type of the HID.\n\n:returns: the type of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": "Get if the HID is connected.\n\n:returns: true if the HID is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "options",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the options button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the options button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutput",
                    "returnType": "None",
                    "tooltip": "Set a single HID output value for the HID.\n\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutputs",
                    "returnType": "None",
                    "tooltip": "Set all output values for the HID.\n\n:param value: The 32 bit output value (1 bit for each output)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setRumble",
                    "returnType": "None",
                    "tooltip": "Set the rumble output for the HID.\n\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "square",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the square button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the square button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "touchpad",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the touchpad button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the touchpad button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PS5Controller"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.PS5Controller",
                    "functionName": "triangle",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the triangle button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the triangle button's\n          digital signal attached to the given loop."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PS5Controller.Axis",
            "classVariables": [
                {
                    "name": "kL2",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kR2",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PS5Controller.Axis",
                    "functionName": "__init__",
                    "returnType": "wpilib.PS5Controller.Axis",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PS5Controller.Button",
            "classVariables": [
                {
                    "name": "kCircle",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kCreate",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kCross",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kL1",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kL2",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kL3",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kOptions",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kPS",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kR1",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kR2",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kR3",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kSquare",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kTouchpad",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kTriangle",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PS5Controller.Button",
                    "functionName": "__init__",
                    "returnType": "wpilib.PS5Controller.Button",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PWM",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "True",
                            "name": "registerSendable",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWM",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWM",
                    "tooltip": "Allocate a PWM given a channel number.\n\nChecks channel value range and allocates the appropriate channel.\nThe allocation is only done to help users ensure that they don't double\nassign channels.\n\n:param channel:          The PWM channel number. 0-9 are on-board, 10-19 are on the\n                         MXP port\n:param registerSendable: If true, adds this instance to SendableRegistry"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWM"
                        }
                    ],
                    "declaringClassName": "wpilib.PWM",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWM"
                        }
                    ],
                    "declaringClassName": "wpilib.PWM",
                    "functionName": "getPulseTime",
                    "returnType": "wpimath.units.microseconds",
                    "tooltip": "Get the PWM pulse time directly from the hardware.\n\nRead a microsecond value from a PWM channel.\n\n:returns: Microsecond PWM control value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWM"
                        }
                    ],
                    "declaringClassName": "wpilib.PWM",
                    "functionName": "setDisabled",
                    "returnType": "None",
                    "tooltip": "Temporarily disables the PWM output. The next set call will re-enable\nthe output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWM"
                        },
                        {
                            "defaultValue": "",
                            "name": "mult",
                            "type": "wpilib.PWM.OutputPeriod"
                        }
                    ],
                    "declaringClassName": "wpilib.PWM",
                    "functionName": "setOutputPeriod",
                    "returnType": "None",
                    "tooltip": "Sets the PWM output period.\n\n:param mult: The output period to apply to this channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWM"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.microseconds"
                        }
                    ],
                    "declaringClassName": "wpilib.PWM",
                    "functionName": "setPulseTime",
                    "returnType": "None",
                    "tooltip": "Set the PWM pulse time directly to the hardware.\n\nWrite a microsecond value to a PWM channel.\n\n:param time: Microsecond PWM value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWM"
                        },
                        {
                            "defaultValue": "",
                            "name": "device",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWM",
                    "functionName": "setSimDevice",
                    "returnType": "None",
                    "tooltip": "Indicates this input is used by a simulated device.\n\n:param device: simulated device handle"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PWM.OutputPeriod",
            "classVariables": [
                {
                    "name": "kOutputPeriod_10Ms",
                    "tooltip": "",
                    "type": "wpilib.PWM.OutputPeriod",
                    "writable": false
                },
                {
                    "name": "kOutputPeriod_20Ms",
                    "tooltip": "",
                    "type": "wpilib.PWM.OutputPeriod",
                    "writable": false
                },
                {
                    "name": "kOutputPeriod_5Ms",
                    "tooltip": "",
                    "type": "wpilib.PWM.OutputPeriod",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWM.OutputPeriod",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWM.OutputPeriod",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PWMMotorController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWMMotorController",
                    "tooltip": "Constructor for a PWM Motor %Controller connected via PWM.\n\n:param name:    Name to use for SendableRegistry\n:param channel: The PWM channel that the controller is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.PWMSparkFlex",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMSparkFlex",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWMSparkFlex",
                    "tooltip": "Constructor for a SPARK Flex connected via PWM.\n\n:param channel: The PWM channel that the SPARK Flex is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PWMSparkFlex",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.PWMSparkMax",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMSparkMax",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWMSparkMax",
                    "tooltip": "Constructor for a SPARK MAX connected via PWM.\n\n:param channel: The PWM channel that the SPARK MAX is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PWMSparkMax",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.PWMTalonFX",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMTalonFX",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWMTalonFX",
                    "tooltip": "Constructor for a Talon FX connected via PWM.\n\n:param channel: The PWM channel that the Talon FX is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PWMTalonFX",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.PWMTalonSRX",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMTalonSRX",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWMTalonSRX",
                    "tooltip": "Constructor for a Talon SRX connected via PWM.\n\n:param channel: The PWM channel that the Talon SRX is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PWMTalonSRX",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.PWMVenom",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMVenom",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWMVenom",
                    "tooltip": "Constructor for a Venom connected via PWM.\n\n:param channel: The PWM channel that the Venom is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PWMVenom",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.PWMVictorSPX",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMVictorSPX",
                    "functionName": "__init__",
                    "returnType": "wpilib.PWMVictorSPX",
                    "tooltip": "Constructor for a Victor SPX connected via PWM.\n\n:param channel: The PWM channel that the Victor SPX is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PWMVictorSPX",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.PneumaticHub",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticHub",
                    "tooltip": "Constructs a PneumaticHub with the default ID (1).\n\n:param busId: The bus ID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticHub",
                    "tooltip": "Constructs a PneumaticHub.\n\n:param busId:  The bus ID.\n:param module: module number to construct"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "checkAndReserveSolenoids",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "checkSolenoidChannel",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "clearStickyFaults",
                    "returnType": "None",
                    "tooltip": "Clears the sticky faults."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "disableCompressor",
                    "returnType": "None",
                    "tooltip": "Disables the compressor. The compressor will not turn on until\nEnableCompressorDigital(), EnableCompressorAnalog(), or\nEnableCompressorHybrid() are called."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "minPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "enableCompressorAnalog",
                    "returnType": "None",
                    "tooltip": "Enables the compressor in analog mode. This mode uses an analog pressure\nsensor connected to analog channel 0 to cycle the compressor. The\ncompressor will turn on when the pressure drops below ``minPressure``\nand will turn off when the pressure reaches ``maxPressure``.\n\n:param minPressure: The minimum pressure. The compressor will turn on when\n                    the pressure drops below this value. Range 0 - 120 PSI.\n:param maxPressure: The maximum pressure. The compressor will turn off when\n                    the pressure reaches this value. Range 0 - 120 PSI. Must be larger then\n                    minPressure."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "enableCompressorDigital",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "minPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "enableCompressorHybrid",
                    "returnType": "None",
                    "tooltip": "Enables the compressor in hybrid mode. This mode uses both a digital\npressure switch and an analog pressure sensor connected to analog channel 0\nto cycle the compressor.\n\nThe compressor will turn on when \\a both:\n\n- The digital pressure switch indicates the system is not full AND\n- The analog pressure sensor indicates that the pressure in the system is\nbelow the specified minimum pressure.\n\nThe compressor will turn off when \\a either:\n\n- The digital pressure switch is disconnected or indicates that the system\nis full OR\n- The pressure detected by the analog sensor is greater than the specified\nmaximum pressure.\n\n:param minPressure: The minimum pressure. The compressor will turn on when\n                    the pressure drops below this value and the pressure switch indicates that\n                    the system is not full.  Range 0 - 120 PSI.\n:param maxPressure: The maximum pressure. The compressor will turn off when\n                    the pressure reaches this value or the pressure switch is disconnected or\n                    indicates that the system is full. Range 0 - 120 PSI. Must be larger then\n                    minPressure."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "fireOneShot",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "get5VRegulatedVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the current voltage of the regulated 5v supply.\n\n:returns: The current voltage of the 5v supply."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getAnalogVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the raw voltage of the specified analog input channel.\n\n:param channel: The analog input channel to read voltage from.\n\n:returns: The voltage of the specified analog input channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getCompressor",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getCompressorConfigType",
                    "returnType": "wpilib.CompressorConfigType",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getCompressorCurrent",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getFaults",
                    "returnType": "wpilib.PneumaticHub.Faults",
                    "tooltip": "Returns the faults currently active on this device.\n\n:returns: The faults."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getInputVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the current input voltage for this device.\n\n:returns: The input voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getModuleNumber",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getPressure",
                    "returnType": "wpimath.units.pounds_per_square_inch",
                    "tooltip": "Returns the pressure read by an analog pressure sensor on the specified\nanalog input channel.\n\n:param channel: The analog input channel to read pressure from.\n\n:returns: The pressure read by an analog pressure sensor on the specified\n          analog input channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getPressureSwitch",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getSolenoidDisabledList",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getSolenoids",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getSolenoidsTotalCurrent",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the total current drawn by all solenoids.\n\n:returns: Total current drawn by all solenoids."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getSolenoidsVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the current voltage of the solenoid power supply.\n\n:returns: The current voltage of the solenoid power supply."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getStickyFaults",
                    "returnType": "wpilib.PneumaticHub.StickyFaults",
                    "tooltip": "Returns the sticky faults currently active on this device.\n\n:returns: The sticky faults."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getVersion",
                    "returnType": "wpilib.PneumaticHub.Version",
                    "tooltip": "Returns the hardware and firmware versions of this device.\n\n:returns: The hardware and firmware versions."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "makeCompressor",
                    "returnType": "wpilib.Compressor",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "forwardChannel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "reverseChannel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "makeDoubleSolenoid",
                    "returnType": "wpilib.DoubleSolenoid",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "makeSolenoid",
                    "returnType": "wpilib.Solenoid",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "device",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "reportUsage",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "reserveCompressor",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "duration",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "setOneShotDuration",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "values",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "setSolenoids",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "unreserveCompressor",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "unreserveSolenoids",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getDefaultForType",
                    "returnType": "int",
                    "tooltip": "For internal use to get the default for a specific type.\n\n:param moduleType: module type\n\n:returns: module default"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub",
                    "functionName": "getForType",
                    "returnType": "wpilib.PneumaticsBase",
                    "tooltip": "For internal use to get a module for a specific type.\n\n:param busId:      The bus ID.\n:param module:     module number\n:param moduleType: module type\n\n:returns: module"
                }
            ]
        },
        {
            "className": "wpilib.PneumaticHub.Faults",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PneumaticHub.Faults",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticHub.Faults",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticHub.Faults"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticHub.Faults",
                    "functionName": "getChannelFault",
                    "returnType": "bool",
                    "tooltip": "Gets whether there is a fault at the specified channel.\n\n:param channel: Channel to check for faults.\n\n:returns: True if a a fault exists at the channel, otherwise false.\n          @throws A ChannelIndexOutOfRange error if the provided channel is outside\n          of the range supported by the hardware."
                }
            ],
            "instanceVariables": [
                {
                    "name": "Brownout",
                    "tooltip": "The input voltage is below the minimum voltage.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CanWarning",
                    "tooltip": "A warning was raised by the device's CAN controller.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel0Fault",
                    "tooltip": "Fault on channel 0.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel10Fault",
                    "tooltip": "Fault on channel 10.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel11Fault",
                    "tooltip": "Fault on channel 11.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel12Fault",
                    "tooltip": "Fault on channel 12.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel13Fault",
                    "tooltip": "Fault on channel 13.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel14Fault",
                    "tooltip": "Fault on channel 14.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel15Fault",
                    "tooltip": "Fault on channel 15.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel1Fault",
                    "tooltip": "Fault on channel 1.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel2Fault",
                    "tooltip": "Fault on channel 2.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel3Fault",
                    "tooltip": "Fault on channel 3.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel4Fault",
                    "tooltip": "Fault on channel 4.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel5Fault",
                    "tooltip": "Fault on channel 5.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel6Fault",
                    "tooltip": "Fault on channel 6.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel7Fault",
                    "tooltip": "Fault on channel 7.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel8Fault",
                    "tooltip": "Fault on channel 8.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel9Fault",
                    "tooltip": "Fault on channel 9.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CompressorOpen",
                    "tooltip": "The compressor output has an open circuit.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CompressorOverCurrent",
                    "tooltip": "An overcurrent event occurred on the compressor output.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HardwareFault",
                    "tooltip": "The hardware on the device has malfunctioned.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "SolenoidOverCurrent",
                    "tooltip": "An overcurrent event occurred on a solenoid output.",
                    "type": "int",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PneumaticHub.StickyFaults",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PneumaticHub.StickyFaults",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticHub.StickyFaults",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "Brownout",
                    "tooltip": "The input voltage is below the minimum voltage.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CanBusOff",
                    "tooltip": "The device's CAN controller experienced a \"Bus Off\" event.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CanWarning",
                    "tooltip": "A warning was raised by the device's CAN controller.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CompressorOpen",
                    "tooltip": "The compressor output has an open circuit.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CompressorOverCurrent",
                    "tooltip": "An overcurrent event occurred on the compressor output.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "FirmwareFault",
                    "tooltip": "The firmware on the device has malfunctioned.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HardwareFault",
                    "tooltip": "The hardware on the device has malfunctioned.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HasReset",
                    "tooltip": "The device has rebooted.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "SolenoidOverCurrent",
                    "tooltip": "An overcurrent event occurred on a solenoid output.",
                    "type": "int",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PneumaticHub.Version",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PneumaticHub.Version",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticHub.Version",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "FirmwareFix",
                    "tooltip": "The firmware fix version.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "FirmwareMajor",
                    "tooltip": "The firmware major version.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "FirmwareMinor",
                    "tooltip": "The firmware minor version.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HardwareMajor",
                    "tooltip": "The hardware major version.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HardwareMinor",
                    "tooltip": "The hardware minor version.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "UniqueId",
                    "tooltip": "The device's unique ID.",
                    "type": "int",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PneumaticsBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticsBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "checkAndReserveSolenoids",
                    "returnType": "int",
                    "tooltip": "Check to see if the solenoids marked in the bitmask can be reserved, and if\nso, reserve them.\n\n:param mask: The bitmask of solenoids to reserve. The LSB represents\n             solenoid 0.\n\n:returns: 0 if successful; mask of solenoids that couldn't be allocated\n          otherwise"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "checkSolenoidChannel",
                    "returnType": "bool",
                    "tooltip": "Check if a solenoid channel is valid.\n\n:param channel: Channel to check\n\n:returns: True if channel exists"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "disableCompressor",
                    "returnType": "None",
                    "tooltip": "Disables the compressor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "minPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "enableCompressorAnalog",
                    "returnType": "None",
                    "tooltip": "If supported by the device, enables the compressor in analog mode. This\nmode uses an analog pressure sensor connected to analog channel 0 to cycle\nthe compressor. The compressor will turn on when the pressure drops below\n``minPressure`` and will turn off when the pressure reaches {@code\nmaxPressure}. This mode is only supported by the REV PH with the REV Analog\nPressure Sensor connected to analog channel 0.\n\nOn CTRE PCM, this will enable digital control.\n\n:param minPressure: The minimum pressure. The compressor will turn on\n                    when the pressure drops below this value.\n:param maxPressure: The maximum pressure. The compressor will turn\n                    off when the pressure reaches this value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "enableCompressorDigital",
                    "returnType": "None",
                    "tooltip": "Enables the compressor in digital mode using the digital pressure switch.\nThe compressor will turn on when the pressure switch indicates that the\nsystem is not full, and will turn off when the pressure switch indicates\nthat the system is full."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "minPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "enableCompressorHybrid",
                    "returnType": "None",
                    "tooltip": "If supported by the device, enables the compressor in hybrid mode. This\nmode uses both a digital pressure switch and an analog pressure sensor\nconnected to analog channel 0 to cycle the compressor. This mode is only\nsupported by the REV PH with the REV Analog Pressure Sensor connected to\nanalog channel 0.\n\nThe compressor will turn on when \\a both:\n\n- The digital pressure switch indicates the system is not full AND\n- The analog pressure sensor indicates that the pressure in the system\nis below the specified minimum pressure.\n\nThe compressor will turn off when \\a either:\n\n- The digital pressure switch is disconnected or indicates that the system\nis full OR\n- The pressure detected by the analog sensor is greater than the specified\nmaximum pressure.\n\nOn CTRE PCM, this will enable digital control.\n\n:param minPressure: The minimum pressure. The compressor will turn on\n                    when the pressure drops below this value and the pressure switch indicates\n                    that the system is not full.\n:param maxPressure: The maximum pressure. The compressor will turn\n                    off when the pressure reaches this value or the pressure switch is\n                    disconnected or indicates that the system is full."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "fireOneShot",
                    "returnType": "None",
                    "tooltip": "Fire a single solenoid shot.\n\n:param index: solenoid index"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getAnalogVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "If supported by the device, returns the raw voltage of the specified analog\ninput channel.\n\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n\n:param channel: The analog input channel to read voltage from.\n\n:returns: The voltage of the specified analog input channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getCompressor",
                    "returnType": "bool",
                    "tooltip": "Returns whether the compressor is active or not.\n\n:returns: True if the compressor is on - otherwise false."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getCompressorConfigType",
                    "returnType": "wpilib.CompressorConfigType",
                    "tooltip": "Returns the active compressor configuration.\n\n:returns: The active compressor configuration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getCompressorCurrent",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the current drawn by the compressor.\n\n:returns: The current drawn by the compressor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getModuleNumber",
                    "returnType": "int",
                    "tooltip": "Get module number for this module.\n\n:returns: module number"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getPressure",
                    "returnType": "wpimath.units.pounds_per_square_inch",
                    "tooltip": "If supported by the device, returns the pressure read by an analog\npressure sensor on the specified analog input channel.\n\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n\n:param channel: The analog input channel to read pressure from.\n\n:returns: The pressure read by an analog pressure sensor on the\n          specified analog input channel."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getPressureSwitch",
                    "returnType": "bool",
                    "tooltip": "Returns the state of the pressure switch.\n\n:returns: True if pressure switch indicates that the system is full,\n          otherwise false."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getSolenoidDisabledList",
                    "returnType": "int",
                    "tooltip": "Get a bitmask of disabled solenoids.\n\n:returns: Bitmask indicating disabled solenoids. The LSB represents solenoid\n          0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getSolenoids",
                    "returnType": "int",
                    "tooltip": "Gets a bitmask of solenoid values.\n\n:returns: Bitmask containing the state of the solenoids. The LSB represents\n          solenoid 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "makeCompressor",
                    "returnType": "wpilib.Compressor",
                    "tooltip": "Create a compressor object.\n\n:returns: Compressor object"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "forwardChannel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "reverseChannel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "makeDoubleSolenoid",
                    "returnType": "wpilib.DoubleSolenoid",
                    "tooltip": "Create a double solenoid object for the specified channels.\n\n:param forwardChannel: solenoid channel for forward\n:param reverseChannel: solenoid channel for reverse\n\n:returns: DoubleSolenoid object"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "makeSolenoid",
                    "returnType": "wpilib.Solenoid",
                    "tooltip": "Create a solenoid object for the specified channel.\n\n:param channel: solenoid channel\n\n:returns: Solenoid object"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "device",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "reportUsage",
                    "returnType": "None",
                    "tooltip": "Report usage.\n\n:param device: device and channel as appropriate\n:param data:   arbitrary usage data"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "reserveCompressor",
                    "returnType": "bool",
                    "tooltip": "Reserve the compressor.\n\n:returns: true if successful; false if compressor already reserved"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "duration",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "setOneShotDuration",
                    "returnType": "None",
                    "tooltip": "Set the duration for a single solenoid shot.\n\n:param index:    solenoid index\n:param duration: shot duration"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "values",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "setSolenoids",
                    "returnType": "None",
                    "tooltip": "Sets solenoids on a pneumatics module.\n\n:param mask:   Bitmask indicating which solenoids to set. The LSB represents\n               solenoid 0.\n:param values: Bitmask indicating the desired states of the solenoids. The\n               LSB represents solenoid 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "unreserveCompressor",
                    "returnType": "None",
                    "tooltip": "Unreserve the compressor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "unreserveSolenoids",
                    "returnType": "None",
                    "tooltip": "Unreserve the solenoids marked in the bitmask.\n\n:param mask: The bitmask of solenoids to unreserve. The LSB represents\n             solenoid 0."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getDefaultForType",
                    "returnType": "int",
                    "tooltip": "For internal use to get the default for a specific type.\n\n:param moduleType: module type\n\n:returns: module default"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsBase",
                    "functionName": "getForType",
                    "returnType": "wpilib.PneumaticsBase",
                    "tooltip": "For internal use to get a module for a specific type.\n\n:param busId:      The bus ID.\n:param module:     module number\n:param moduleType: module type\n\n:returns: module"
                }
            ]
        },
        {
            "className": "wpilib.PneumaticsControlModule",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticsControlModule",
                    "tooltip": "Constructs a PneumaticsControlModule with the default ID (0).\n\n:param busId: The bus ID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticsControlModule",
                    "tooltip": "Constructs a PneumaticsControlModule.\n\n:param busId:  The bus ID.\n:param module: module number to construct"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "checkAndReserveSolenoids",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "checkSolenoidChannel",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "clearAllStickyFaults",
                    "returnType": "None",
                    "tooltip": "Clears all sticky faults on this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "disableCompressor",
                    "returnType": "None",
                    "tooltip": "Disables the compressor. The compressor will not turn on until\nEnableCompressorDigital() is called."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "minPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "enableCompressorAnalog",
                    "returnType": "None",
                    "tooltip": "Enables the compressor in digital mode. Analog mode is unsupported by the\nCTRE PCM.\n\n:param minPressure: Unsupported.\n:param maxPressure: Unsupported.\n                    @see EnableCompressorDigital()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "enableCompressorDigital",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "minPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPressure",
                            "type": "wpimath.units.pounds_per_square_inch"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "enableCompressorHybrid",
                    "returnType": "None",
                    "tooltip": "Enables the compressor in digital mode. Hybrid mode is unsupported by the\nCTRE PCM.\n\n:param minPressure: Unsupported.\n:param maxPressure: Unsupported.\n                    @see EnableCompressorDigital()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "fireOneShot",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getAnalogVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Unsupported by the CTRE PCM.\n\n:param channel: Unsupported.\n\n:returns: 0"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressor",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressorConfigType",
                    "returnType": "wpilib.CompressorConfigType",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressorCurrent",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressorCurrentTooHighFault",
                    "returnType": "bool",
                    "tooltip": "Return whether the compressor current is currently too high.\n\n:returns: True if the compressor current is too high, otherwise false.\n          @see GetCompressorCurrentTooHighStickyFault()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressorCurrentTooHighStickyFault",
                    "returnType": "bool",
                    "tooltip": "Returns whether the compressor current has been too high since sticky\nfaults were last cleared. This fault is persistent and can be cleared by\nClearAllStickyFaults()\n\n:returns: True if the compressor current has been too high since sticky\n          faults were last cleared.\n          @see GetCompressorCurrentTooHighFault()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressorNotConnectedFault",
                    "returnType": "bool",
                    "tooltip": "Returns whether the compressor is currently disconnected.\n\n:returns: True if compressor is currently disconnected, otherwise false.\n          @see GetCompressorNotConnectedStickyFault()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressorNotConnectedStickyFault",
                    "returnType": "bool",
                    "tooltip": "Returns whether the compressor has been disconnected since sticky faults\nwere last cleared. This fault is persistent and can be cleared by\nClearAllStickyFaults()\n\n:returns: True if the compressor has been disconnected since sticky faults\n          were last cleared, otherwise false.\n          @see GetCompressorNotConnectedFault()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressorShortedFault",
                    "returnType": "bool",
                    "tooltip": "Returns whether the compressor is currently shorted.\n\n:returns: True if the compressor is currently shorted, otherwise false.\n          @see GetCompressorShortedStickyFault()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getCompressorShortedStickyFault",
                    "returnType": "bool",
                    "tooltip": "Returns whether the compressor has been shorted since sticky faults were\nlast cleared. This fault is persistent and can be cleared by\nClearAllStickyFaults()\n\n:returns: True if the compressor has been shorted since sticky faults were\n          last cleared, otherwise false.\n          @see GetCompressorShortedFault()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getModuleNumber",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getPressure",
                    "returnType": "wpimath.units.pounds_per_square_inch",
                    "tooltip": "Unsupported by the CTRE PCM.\n\n:param channel: Unsupported.\n\n:returns: 0"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getPressureSwitch",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getSolenoidDisabledList",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getSolenoidVoltageFault",
                    "returnType": "bool",
                    "tooltip": "Returns whether the solenoid is currently reporting a voltage fault.\n\n:returns: True if solenoid is reporting a fault, otherwise false.\n          @see GetSolenoidVoltageStickyFault()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getSolenoidVoltageStickyFault",
                    "returnType": "bool",
                    "tooltip": "Returns whether the solenoid has reported a voltage fault since sticky\nfaults were last cleared. This fault is persistent and can be cleared by\nClearAllStickyFaults()\n\n:returns: True if solenoid is reporting a fault, otherwise false.\n          @see GetSolenoidVoltageFault()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getSolenoids",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "makeCompressor",
                    "returnType": "wpilib.Compressor",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "forwardChannel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "reverseChannel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "makeDoubleSolenoid",
                    "returnType": "wpilib.DoubleSolenoid",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "makeSolenoid",
                    "returnType": "wpilib.Solenoid",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "device",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "reportUsage",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "reserveCompressor",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "duration",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "setOneShotDuration",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "values",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "setSolenoids",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "unreserveCompressor",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PneumaticsControlModule"
                        },
                        {
                            "defaultValue": "",
                            "name": "mask",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "unreserveSolenoids",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getDefaultForType",
                    "returnType": "int",
                    "tooltip": "For internal use to get the default for a specific type.\n\n:param moduleType: module type\n\n:returns: module default"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsControlModule",
                    "functionName": "getForType",
                    "returnType": "wpilib.PneumaticsBase",
                    "tooltip": "For internal use to get a module for a specific type.\n\n:param busId:      The bus ID.\n:param module:     module number\n:param moduleType: module type\n\n:returns: module"
                }
            ]
        },
        {
            "className": "wpilib.PneumaticsModuleType",
            "classVariables": [
                {
                    "name": "CTREPCM",
                    "tooltip": "",
                    "type": "wpilib.PneumaticsModuleType",
                    "writable": false
                },
                {
                    "name": "REVPH",
                    "tooltip": "",
                    "type": "wpilib.PneumaticsModuleType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PneumaticsModuleType",
                    "functionName": "__init__",
                    "returnType": "wpilib.PneumaticsModuleType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PowerDistribution",
            "classVariables": [
                {
                    "name": "kDefaultModule",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "__init__",
                    "returnType": "wpilib.PowerDistribution",
                    "tooltip": "Constructs a PowerDistribution object.\n\nDetects the connected PDP/PDH using the default CAN ID (0 for CTRE and 1\nfor REV).\n\n:param busId: The bus ID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PowerDistribution.ModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "__init__",
                    "returnType": "wpilib.PowerDistribution",
                    "tooltip": "Constructs a PowerDistribution object.\n\n:param busId:      The bus ID.\n:param module:     The CAN ID of the PDP/PDH\n:param moduleType: The type of module"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "clearStickyFaults",
                    "returnType": "None",
                    "tooltip": "Remove all of the fault flags on the PDP/PDH."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getAllCurrents",
                    "returnType": "list[float]",
                    "tooltip": "Query all currents of the PDP.\n\n:returns: The current of each channel in Amperes"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getCurrent",
                    "returnType": "float",
                    "tooltip": "Query the current of a single channel of the PDP/PDH.\n\n:param channel: the channel to query (0-15 for PDP, 0-23 for PDH)\n\n:returns: The current of the channel in Amperes"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getFaults",
                    "returnType": "wpilib.PowerDistribution.Faults",
                    "tooltip": "Returns the power distribution faults.\n\nOn a CTRE PDP, this will return an object with no faults active.\n\n:returns: The power distribution faults."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getModule",
                    "returnType": "int",
                    "tooltip": "Gets module number (CAN ID)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getNumChannels",
                    "returnType": "int",
                    "tooltip": "Gets the number of channels for this power distribution object.\n\n:returns: Number of output channels (16 for PDP, 24 for PDH)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getStickyFaults",
                    "returnType": "wpilib.PowerDistribution.StickyFaults",
                    "tooltip": "Returns the power distribution sticky faults.\n\nOn a CTRE PDP, this will return an object with no faults active.\n\n:returns: The power distribution sticky faults."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getSwitchableChannel",
                    "returnType": "bool",
                    "tooltip": "Gets whether the PDH switchable channel is turned on or off. Returns false\nwith the CTRE PDP.\n\n:returns: The output state of the PDH switchable channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getTemperature",
                    "returnType": "float",
                    "tooltip": "Query the temperature of the PDP.\n\nNot supported on the Rev PDH and returns 0.\n\n:returns: The temperature in degrees Celsius"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getTotalCurrent",
                    "returnType": "float",
                    "tooltip": "Query the total current of all monitored PDP/PDH channels.\n\n:returns: The total current drawn from all channels in Amperes"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getTotalEnergy",
                    "returnType": "float",
                    "tooltip": "Query the total energy drawn from the monitored PDP channels.\n\nNot supported on the Rev PDH and returns 0.\n\n:returns: The total energy drawn in Joules"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getTotalPower",
                    "returnType": "float",
                    "tooltip": "Query the total power drawn from all monitored PDP channels.\n\nNot supported on the Rev PDH and returns 0.\n\n:returns: The total power drawn in Watts"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getType",
                    "returnType": "wpilib.PowerDistribution.ModuleType",
                    "tooltip": "Gets module type."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getVersion",
                    "returnType": "wpilib.PowerDistribution.Version",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "getVoltage",
                    "returnType": "float",
                    "tooltip": "Query the input voltage of the PDP/PDH.\n\n:returns: The input voltage in volts"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "resetTotalEnergy",
                    "returnType": "None",
                    "tooltip": "Reset the total energy drawn from the PDP.\n\nNot supported on the Rev PDH and does nothing.\n\n@see PowerDistribution#GetTotalEnergy"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution",
                    "functionName": "setSwitchableChannel",
                    "returnType": "None",
                    "tooltip": "Sets the PDH switchable channel on or off. Does nothing with the CTRE PDP.\n\n:param enabled: Whether to turn the PDH switchable channel on or off"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PowerDistribution.Faults",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PowerDistribution.Faults",
                    "functionName": "__init__",
                    "returnType": "wpilib.PowerDistribution.Faults",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution.Faults"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution.Faults",
                    "functionName": "getBreakerFault",
                    "returnType": "bool",
                    "tooltip": "Gets whether there is a breaker fault at a specified channel.\n\n:param channel: Channel to check for faults.\n\n:returns: If there is a breaker fault.\n          @throws A ChannelIndexOutOfRange error if the given int is outside of the\n          range supported by the hardware."
                }
            ],
            "instanceVariables": [
                {
                    "name": "Brownout",
                    "tooltip": "The input voltage is below the minimum voltage.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CanWarning",
                    "tooltip": "A warning was raised by the device's CAN controller.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel0BreakerFault",
                    "tooltip": "Breaker fault on channel 0.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel10BreakerFault",
                    "tooltip": "Breaker fault on channel 10.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel11BreakerFault",
                    "tooltip": "Breaker fault on channel 12.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel12BreakerFault",
                    "tooltip": "Breaker fault on channel 13.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel13BreakerFault",
                    "tooltip": "Breaker fault on channel 14.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel14BreakerFault",
                    "tooltip": "Breaker fault on channel 15.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel15BreakerFault",
                    "tooltip": "Breaker fault on channel 16.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel16BreakerFault",
                    "tooltip": "Breaker fault on channel 17.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel17BreakerFault",
                    "tooltip": "Breaker fault on channel 18.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel18BreakerFault",
                    "tooltip": "Breaker fault on channel 19.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel19BreakerFault",
                    "tooltip": "Breaker fault on channel 20.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel1BreakerFault",
                    "tooltip": "Breaker fault on channel 1.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel20BreakerFault",
                    "tooltip": "Breaker fault on channel 21.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel21BreakerFault",
                    "tooltip": "Breaker fault on channel 22.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel22BreakerFault",
                    "tooltip": "Breaker fault on channel 23.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel23BreakerFault",
                    "tooltip": "Breaker fault on channel 24.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel2BreakerFault",
                    "tooltip": "Breaker fault on channel 2.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel3BreakerFault",
                    "tooltip": "Breaker fault on channel 3.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel4BreakerFault",
                    "tooltip": "Breaker fault on channel 4.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel5BreakerFault",
                    "tooltip": "Breaker fault on channel 5.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel6BreakerFault",
                    "tooltip": "Breaker fault on channel 6.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel7BreakerFault",
                    "tooltip": "Breaker fault on channel 7.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel8BreakerFault",
                    "tooltip": "Breaker fault on channel 8.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel9BreakerFault",
                    "tooltip": "Breaker fault on channel 9.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HardwareFault",
                    "tooltip": "The hardware on the device has malfunctioned.",
                    "type": "int",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PowerDistribution.ModuleType",
            "classVariables": [
                {
                    "name": "kCTRE",
                    "tooltip": "",
                    "type": "wpilib.PowerDistribution.ModuleType",
                    "writable": false
                },
                {
                    "name": "kRev",
                    "tooltip": "",
                    "type": "wpilib.PowerDistribution.ModuleType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution.ModuleType",
                    "functionName": "__init__",
                    "returnType": "wpilib.PowerDistribution.ModuleType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PowerDistribution.StickyFaults",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PowerDistribution.StickyFaults",
                    "functionName": "__init__",
                    "returnType": "wpilib.PowerDistribution.StickyFaults",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PowerDistribution.StickyFaults"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.PowerDistribution.StickyFaults",
                    "functionName": "getBreakerFault",
                    "returnType": "bool",
                    "tooltip": "Gets whether there is a sticky breaker fault at the specified channel.\n\n:param channel: Index to check for sticky faults.\n\n:returns: True if there is a sticky breaker fault at the channel, otherwise\n          false.\n          @throws A ChannelIndexOutOfRange error if the provided channel is outside\n          of the range supported by the hardware."
                }
            ],
            "instanceVariables": [
                {
                    "name": "Brownout",
                    "tooltip": "The input voltage is below the minimum voltage.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CanBusOff",
                    "tooltip": "The device's CAN controller experienced a \"Bus Off\" event.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "CanWarning",
                    "tooltip": "A warning was raised by the device's CAN controller.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel0BreakerFault",
                    "tooltip": "Breaker fault on channel 0.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel10BreakerFault",
                    "tooltip": "Breaker fault on channel 10.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel11BreakerFault",
                    "tooltip": "Breaker fault on channel 12.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel12BreakerFault",
                    "tooltip": "Breaker fault on channel 13.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel13BreakerFault",
                    "tooltip": "Breaker fault on channel 14.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel14BreakerFault",
                    "tooltip": "Breaker fault on channel 15.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel15BreakerFault",
                    "tooltip": "Breaker fault on channel 16.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel16BreakerFault",
                    "tooltip": "Breaker fault on channel 17.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel17BreakerFault",
                    "tooltip": "Breaker fault on channel 18.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel18BreakerFault",
                    "tooltip": "Breaker fault on channel 19.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel19BreakerFault",
                    "tooltip": "Breaker fault on channel 20.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel1BreakerFault",
                    "tooltip": "Breaker fault on channel 1.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel20BreakerFault",
                    "tooltip": "Breaker fault on channel 21.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel21BreakerFault",
                    "tooltip": "Breaker fault on channel 22.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel22BreakerFault",
                    "tooltip": "Breaker fault on channel 23.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel23BreakerFault",
                    "tooltip": "Breaker fault on channel 24.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel2BreakerFault",
                    "tooltip": "Breaker fault on channel 2.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel3BreakerFault",
                    "tooltip": "Breaker fault on channel 3.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel4BreakerFault",
                    "tooltip": "Breaker fault on channel 4.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel5BreakerFault",
                    "tooltip": "Breaker fault on channel 5.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel6BreakerFault",
                    "tooltip": "Breaker fault on channel 6.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel7BreakerFault",
                    "tooltip": "Breaker fault on channel 7.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel8BreakerFault",
                    "tooltip": "Breaker fault on channel 8.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "Channel9BreakerFault",
                    "tooltip": "Breaker fault on channel 9.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "FirmwareFault",
                    "tooltip": "The firmware on the device has malfunctioned.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HardwareFault",
                    "tooltip": "The hardware on the device has malfunctioned.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HasReset",
                    "tooltip": "The device has rebooted.",
                    "type": "int",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.PowerDistribution.Version",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.PowerDistribution.Version",
                    "functionName": "__init__",
                    "returnType": "wpilib.PowerDistribution.Version",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "FirmwareFix",
                    "tooltip": "Firmware fix version number.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "FirmwareMajor",
                    "tooltip": "Firmware major version number.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "FirmwareMinor",
                    "tooltip": "Firmware minor version number.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HardwareMajor",
                    "tooltip": "Hardware major version number.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "HardwareMinor",
                    "tooltip": "Hardware minor version number.",
                    "type": "int",
                    "writable": true
                },
                {
                    "name": "UniqueId",
                    "tooltip": "Unique ID.",
                    "type": "int",
                    "writable": true
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Preferences",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "__init__",
                    "returnType": "wpilib.Preferences",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "containsKey",
                    "returnType": "bool",
                    "tooltip": "Returns whether or not there is a key with the given name.\n\n:param key: the key\n\n:returns: if there is a value at the given key"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "False",
                            "name": "defaultValue",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "getBoolean",
                    "returnType": "bool",
                    "tooltip": "Returns the boolean at the given key.  If this table does not have a value\nfor that position, then the given defaultValue value will be returned.\n\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n\n:returns: either the value in the table, or the defaultValue"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "defaultValue",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "getDouble",
                    "returnType": "float",
                    "tooltip": "Returns the double at the given key.  If this table does not have a value\nfor that position, then the given defaultValue value will be returned.\n\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n\n:returns: either the value in the table, or the defaultValue"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "defaultValue",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "getFloat",
                    "returnType": "float",
                    "tooltip": "Returns the float at the given key.  If this table does not have a value\nfor that position, then the given defaultValue value will be returned.\n\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n\n:returns: either the value in the table, or the defaultValue"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "0",
                            "name": "defaultValue",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "getInt",
                    "returnType": "int",
                    "tooltip": "Returns the int at the given key.  If this table does not have a value for\nthat position, then the given defaultValue value will be returned.\n\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n\n:returns: either the value in the table, or the defaultValue"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "getKeys",
                    "returnType": "list[str]",
                    "tooltip": "Returns a vector of all the keys.\n\n:returns: a vector of the keys"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "0",
                            "name": "defaultValue",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "getLong",
                    "returnType": "int",
                    "tooltip": "Returns the long (int64_t) at the given key.  If this table does not have a\nvalue for that position, then the given defaultValue value will be\nreturned.\n\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n\n:returns: either the value in the table, or the defaultValue"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "''",
                            "name": "defaultValue",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "getString",
                    "returnType": "str",
                    "tooltip": "Returns the string at the given key.  If this table does not have a value\nfor that position, then the given defaultValue will be returned.\n\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n\n:returns: either the value in the table, or the defaultValue"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "initBoolean",
                    "returnType": "None",
                    "tooltip": "Puts the given boolean into the preferences table if it doesn't\nalready exist."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "initDouble",
                    "returnType": "None",
                    "tooltip": "Puts the given double into the preferences table if it doesn't\nalready exist."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "initFloat",
                    "returnType": "None",
                    "tooltip": "Puts the given float into the preferences table if it doesn't\nalready exist."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "initInt",
                    "returnType": "None",
                    "tooltip": "Puts the given int into the preferences table if it doesn't\nalready exist."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "initLong",
                    "returnType": "None",
                    "tooltip": "Puts the given long into the preferences table if it doesn't\nalready exist."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "initString",
                    "returnType": "None",
                    "tooltip": "Puts the given string into the preferences table if it doesn't\nalready exist."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "remove",
                    "returnType": "None",
                    "tooltip": "Remove a preference.\n\n:param key: the key"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "removeAll",
                    "returnType": "None",
                    "tooltip": "Remove all preferences."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "setBoolean",
                    "returnType": "None",
                    "tooltip": "Puts the given boolean into the preferences table.\n\nThe key may not have any whitespace nor an equals sign.\n\n:param key:   the key\n:param value: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "setDouble",
                    "returnType": "None",
                    "tooltip": "Puts the given double into the preferences table.\n\nThe key may not have any whitespace nor an equals sign.\n\n:param key:   the key\n:param value: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "setFloat",
                    "returnType": "None",
                    "tooltip": "Puts the given float into the preferences table.\n\nThe key may not have any whitespace nor an equals sign.\n\n:param key:   the key\n:param value: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "setInt",
                    "returnType": "None",
                    "tooltip": "Puts the given int into the preferences table.\n\nThe key may not have any whitespace nor an equals sign.\n\n:param key:   the key\n:param value: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "setLong",
                    "returnType": "None",
                    "tooltip": "Puts the given long (int64_t) into the preferences table.\n\nThe key may not have any whitespace nor an equals sign.\n\n:param key:   the key\n:param value: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Preferences",
                    "functionName": "setString",
                    "returnType": "None",
                    "tooltip": "Puts the given string into the preferences table.\n\nThe value may not have quotation marks, nor may the key have any whitespace\nnor an equals sign.\n\n:param key:   the key\n:param value: the value"
                }
            ]
        },
        {
            "className": "wpilib.RobotBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "__init__",
                    "returnType": "wpilib.RobotBase",
                    "tooltip": "Constructor for a generic robot program.\n\nUser code can be placed in the constructor that runs before the\nAutonomous or Operator Control period starts. The constructor will run to\ncompletion before Autonomous is entered.\n\nThis must be used to ensure that the communications code starts. In the\nfuture it would be nice to put this code into it's own task that loads on\nboot so ensure that it runs."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "endCompetition",
                    "returnType": "None",
                    "tooltip": "Ends the main loop in StartCompetition()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "getControlState",
                    "returnType": "tuple[bool, bool, bool]",
                    "tooltip": "More efficient way to determine what state the robot is in.\n\n:returns: booleans representing enabled, isautonomous, istest\n\n.. versionadded:: 2019.2.1\n\n.. note:: This function only exists in RobotPy"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isAutonomous",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Autonomous mode.\n\n:returns: True if the robot is currently operating Autonomously as determined\n          by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isAutonomousEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Autonomous mode and enabled.\n\n:returns: True if the robot us currently operating Autonomously while enabled\n          as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isDisabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the Robot is currently disabled.\n\n:returns: True if the Robot is currently disabled by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the Robot is currently enabled.\n\n:returns: True if the Robot is currently enabled by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTeleop",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Operator Control mode.\n\n:returns: True if the robot is currently operating in Tele-Op mode as\n          determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTeleopEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is current in Operator Control mode and enabled.\n\n:returns: True if the robot is currently operating in Tele-Op mode while\n          enabled as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTest",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Test mode.\n\n:returns: True if the robot is currently running in Test mode as determined\n          by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTestEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is current in Test mode and enabled.\n\n:returns: True if the robot is currently operating in Test mode while\n          enabled as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "startCompetition",
                    "returnType": "None",
                    "tooltip": "Start the main robot code. This function will be called once and should not\nexit until signalled by EndCompetition()"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "getRuntimeType",
                    "returnType": "wpilib.RuntimeType",
                    "tooltip": "Get the current runtime type.\n\n:returns: Current runtime type."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isReal",
                    "returnType": "bool",
                    "tooltip": "Get if the robot is real.\n\n:returns: If the robot is running in the real world."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isSimulation",
                    "returnType": "bool",
                    "tooltip": "Get if the robot is a simulation.\n\n:returns: If the robot is running in simulation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "robot_cls",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "main",
                    "returnType": "object",
                    "tooltip": "Starting point for the application"
                }
            ]
        },
        {
            "className": "wpilib.RobotController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "__init__",
                    "returnType": "wpilib.RobotController",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getBatteryVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Read the battery voltage.\n\n:returns: The battery voltage in Volts."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getBrownoutVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Get the current brownout voltage setting.\n\n:returns: The brownout voltage"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getCANStatus",
                    "returnType": "wpilib.CANStatus",
                    "tooltip": "Get the current status of the CAN bus.\n\n:param busId: The bus ID.\n\n:returns: The status of the CAN bus"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getCPUTemp",
                    "returnType": "wpimath.units.celsius",
                    "tooltip": "Get the current CPU temperature.\n\n:returns: current CPU temperature"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getComments",
                    "returnType": "str",
                    "tooltip": "Return the comments from the roboRIO web interface.\n\nThe comments string is cached after the first call to this function on the\nRoboRIO - restart the robot code to reload the comments string after\nchanging it in the web interface.\n\n:returns: The comments from the roboRIO web interface."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getCommsDisableCount",
                    "returnType": "int",
                    "tooltip": "Gets the number of times the system has been disabled due to communication\nerrors with the Driver Station.\n\n:returns: number of disables due to communication errors."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getCurrent3V3",
                    "returnType": "float",
                    "tooltip": "Get the current output of the 3.3V rail.\n\n:returns: The controller 3.3V rail output current value in Amps"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getEnabled3V3",
                    "returnType": "bool",
                    "tooltip": "Get the enabled state of the 3.3V rail. The rail may be disabled due to\ncalling SetEnabled3V3(), a controller brownout, a short circuit on the\nrail, or controller over-voltage.\n\n:returns: The controller 3.3V rail enabled value. True for enabled."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getFPGARevision",
                    "returnType": "int",
                    "tooltip": "Return the FPGA Revision number.\n\nThe format of the revision is 3 numbers. The 12 most significant bits are\nthe Major Revision. The next 8 bits are the Minor Revision. The 12 least\nsignificant bits are the Build Number.\n\n:returns: FPGA Revision number."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getFPGATime",
                    "returnType": "int",
                    "tooltip": "Read the microsecond-resolution timer on the FPGA.\n\n:returns: The current time in microseconds according to the FPGA (since FPGA\n          reset)."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getFPGAVersion",
                    "returnType": "int",
                    "tooltip": "Return the FPGA Version number.\n\nFor now, expect this to be competition year.\n\n:returns: FPGA Version number."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getFaultCount3V3",
                    "returnType": "int",
                    "tooltip": "Get the count of the total current faults on the 3.3V rail since the\ncode started.\n\n:returns: The number of faults"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getInputVoltage",
                    "returnType": "float",
                    "tooltip": "Get the input voltage to the robot controller.\n\n:returns: The controller input voltage value in Volts"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getRSLState",
                    "returnType": "bool",
                    "tooltip": "Gets the current state of the Robot Signal Light (RSL)\n\n:returns: The current state of the RSL- true if on, false if off"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getSerialNumber",
                    "returnType": "str",
                    "tooltip": "Return the serial number of the roboRIO.\n\n:returns: The serial number of the roboRIO."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getTeamNumber",
                    "returnType": "int",
                    "tooltip": "Returns the team number configured for the robot controller.\n\n:returns: team number, or 0 if not found."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getTime",
                    "returnType": "int",
                    "tooltip": "Read the microsecond timestamp. By default, the time is based on the FPGA\nhardware clock in microseconds since the FPGA started. However, the return\nvalue of this method may be modified to use any time base, including\nnon-monotonic and non-continuous time bases.\n\n:returns: The current time in microseconds."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "getVoltage3V3",
                    "returnType": "float",
                    "tooltip": "Get the voltage of the 3.3V rail.\n\n:returns: The controller 3.3V rail voltage value in Volts"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "isBrownedOut",
                    "returnType": "bool",
                    "tooltip": "Check if the system is browned out.\n\n:returns: True if the system is browned out"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "isSysActive",
                    "returnType": "bool",
                    "tooltip": "Check if the FPGA outputs are enabled.\n\nThe outputs may be disabled if the robot is disabled or e-stopped, the\nwatchdog has expired, or if the roboRIO browns out.\n\n:returns: True if the FPGA outputs are enabled."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "isSystemTimeValid",
                    "returnType": "bool",
                    "tooltip": "Gets if the system time is valid.\n\n:returns: True if the system time is valid, false otherwise"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "resetRailFaultCounts",
                    "returnType": "None",
                    "tooltip": "Reset the overcurrent fault counters for all user rails to 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "brownoutVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "setBrownoutVoltage",
                    "returnType": "None",
                    "tooltip": "Set the voltage the roboRIO will brownout and disable all outputs.\n\nNote that this only does anything on the roboRIO 2.\nOn the roboRIO it is a no-op.\n\n:param brownoutVoltage: The brownout voltage"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "setEnabled3V3",
                    "returnType": "None",
                    "tooltip": "Enables or disables the 3.3V rail.\n\n:param enabled: whether to enable the 3.3V rail."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "supplier",
                            "type": "Callable[[], int]"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotController",
                    "functionName": "setTimeSource",
                    "returnType": "None",
                    "tooltip": "Sets a new source to provide the clock time in microseconds. Changing this\naffects the return value of ``GetTime``.\n\n:param supplier: Function to return the time in microseconds."
                }
            ]
        },
        {
            "className": "wpilib.RobotState",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotState",
                    "functionName": "__init__",
                    "returnType": "wpilib.RobotState",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotState",
                    "functionName": "isAutonomous",
                    "returnType": "bool",
                    "tooltip": "Returns true if the robot is in autonomous mode.\n\n:returns: True if the robot is in autonomous mode."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotState",
                    "functionName": "isDisabled",
                    "returnType": "bool",
                    "tooltip": "Returns true if the robot is disabled.\n\n:returns: True if the robot is disabled."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotState",
                    "functionName": "isEStopped",
                    "returnType": "bool",
                    "tooltip": "Returns true if the robot is E-stopped.\n\n:returns: True if the robot is E-stopped."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotState",
                    "functionName": "isEnabled",
                    "returnType": "bool",
                    "tooltip": "Returns true if the robot is enabled.\n\n:returns: True if the robot is enabled."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotState",
                    "functionName": "isTeleop",
                    "returnType": "bool",
                    "tooltip": "Returns true if the robot is in teleop mode.\n\n:returns: True if the robot is in teleop mode."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.RobotState",
                    "functionName": "isTest",
                    "returnType": "bool",
                    "tooltip": "Returns true if the robot is in test mode.\n\n:returns: True if the robot is in test mode."
                }
            ]
        },
        {
            "className": "wpilib.RuntimeType",
            "classVariables": [
                {
                    "name": "kRoboRIO",
                    "tooltip": "",
                    "type": "wpilib.RuntimeType",
                    "writable": false
                },
                {
                    "name": "kRoboRIO2",
                    "tooltip": "",
                    "type": "wpilib.RuntimeType",
                    "writable": false
                },
                {
                    "name": "kSimulation",
                    "tooltip": "",
                    "type": "wpilib.RuntimeType",
                    "writable": false
                },
                {
                    "name": "kSystemCore",
                    "tooltip": "",
                    "type": "wpilib.RuntimeType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.RuntimeType",
                    "functionName": "__init__",
                    "returnType": "wpilib.RuntimeType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SD540",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SD540",
                    "functionName": "__init__",
                    "returnType": "wpilib.SD540",
                    "tooltip": "Constructor for a SD540 connected via PWM.\n\n:param channel: The PWM channel that the SD540 is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.SD540",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.SendableBuilderImpl",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "__init__",
                    "returnType": "wpilib.SendableBuilderImpl",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], list[int]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[typing.SupportsInt]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addBooleanArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], bool]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[bool], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addBooleanProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], list[float]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[typing.SupportsFloat]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addDoubleArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], float]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[typing.SupportsFloat], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addDoubleProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], list[float]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[typing.SupportsFloat]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addFloatArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], float]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[typing.SupportsFloat], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addFloatProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], list[int]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[typing.SupportsInt]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addIntegerArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], int]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[typing.SupportsInt], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addIntegerProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "typeString",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], list[int]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[Buffer], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addRawProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[List[typing.SupportsInt]], List[int]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[typing.SupportsInt]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addSmallBooleanArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[List[typing.SupportsFloat]], List[float]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[typing.SupportsFloat]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addSmallDoubleArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[List[typing.SupportsFloat]], List[float]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[typing.SupportsFloat]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addSmallFloatArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[List[typing.SupportsInt]], List[int]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[typing.SupportsInt]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addSmallIntegerArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "typeString",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[List[typing.SupportsInt]], Buffer]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[Buffer], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addSmallRawProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[List[str]], List[str]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[str]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addSmallStringArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[List[str]], str]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[str], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addSmallStringProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], list[str]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[List[str]], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addStringArrayProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "getter",
                            "type": "Callable[[], str]"
                        },
                        {
                            "defaultValue": "",
                            "name": "setter",
                            "type": "Callable[[str], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "addStringProperty",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "clearProperties",
                    "returnType": "None",
                    "tooltip": "Clear properties."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "ntcore.NTSendableBuilder"
                        }
                    ],
                    "declaringClassName": "ntcore.NTSendableBuilder",
                    "functionName": "getBackendKind",
                    "returnType": "wpiutil.SendableBuilder.BackendKind",
                    "tooltip": "Gets the kind of backend being used.\n\n:returns: Backend kind"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "getTable",
                    "returnType": "ntcore.NetworkTable",
                    "tooltip": "Get the network table.\n\n:returns: The network table"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "getTopic",
                    "returnType": "ntcore.Topic",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "isActuator",
                    "returnType": "bool",
                    "tooltip": "Return whether this sendable should be treated as an actuator.\n\n:returns: True if actuator, false if not."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "isPublished",
                    "returnType": "bool",
                    "tooltip": "Return whether this sendable has an associated table.\n\n:returns: True if it has a table, false if not."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstBoolean",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "List[typing.SupportsInt]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstBooleanArray",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstDouble",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "List[typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstDoubleArray",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstFloat",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "List[typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstFloatArray",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstInteger",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "List[typing.SupportsInt]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstIntegerArray",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "typeString",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstRaw",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstString",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "List[str]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "publishConstStringArray",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "setActuator",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "setSmartDashboardType",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "table",
                            "type": "ntcore.NetworkTable"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "setTable",
                    "returnType": "None",
                    "tooltip": "Set the network table.  Must be called prior to any Add* functions being\ncalled.\n\n:param table: Network table"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "setUpdateTable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "startListeners",
                    "returnType": "None",
                    "tooltip": "Hook setters for all properties."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "stopListeners",
                    "returnType": "None",
                    "tooltip": "Unhook setters for all properties."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableBuilderImpl"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableBuilderImpl",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Synchronize with network table values by calling the getters for all\nproperties and setters when the network table value has changed."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SendableChooser",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.SendableChooser",
                    "functionName": "__init__",
                    "returnType": "wpilib.SendableChooser",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableChooser"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "object",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableChooser",
                    "functionName": "addOption",
                    "returnType": "None",
                    "tooltip": "Adds the given object to the list of options.\n\nOn the SmartDashboard on the desktop, the object will appear as the given\nname.\n\n:param name:   the name of the option\n:param object: the option"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableChooser"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableChooser",
                    "functionName": "getSelected",
                    "returnType": "object",
                    "tooltip": "Returns a copy of the selected option (a std::weak_ptr<U> if T =\nstd::shared_ptr<U>).\n\nIf there is none selected, it will return the default. If there is none\nselected and no default, then it will return a value-initialized instance.\nFor integer types, this is 0. For container types like std::string, this is\nan empty string.\n\n:returns: The option selected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableChooser"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableChooser",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableChooser"
                        },
                        {
                            "defaultValue": "",
                            "name": "listener",
                            "type": "Callable[[object], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableChooser",
                    "functionName": "onChange",
                    "returnType": "None",
                    "tooltip": "Bind a listener that's called when the selected value changes.\nOnly one listener can be bound. Calling this function will replace the\nprevious listener.\n\n:param listener: The function to call that accepts the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SendableChooser"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "object",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableChooser",
                    "functionName": "setDefaultOption",
                    "returnType": "None",
                    "tooltip": "Add the given object to the list of options and marks it as the default.\n\nFunctionally, this is very close to AddOption() except that it will use\nthis as the default option if none other is explicitly selected.\n\n:param name:   the name of the option\n:param object: the option"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SendableChooserBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.SendableChooserBase",
                    "functionName": "__init__",
                    "returnType": "wpilib.SendableChooserBase",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SensorUtil",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "__init__",
                    "returnType": "wpilib.SensorUtil",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "checkAnalogInputChannel",
                    "returnType": "bool",
                    "tooltip": "Check that the analog input number is value.\n\nVerify that the analog input number is one of the legal channel numbers.\nChannel numbers are 0-based.\n\n:returns: Analog channel is valid"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "checkDigitalChannel",
                    "returnType": "bool",
                    "tooltip": "Check that the digital channel number is valid.\n\nVerify that the channel number is one of the legal channel numbers. Channel\nnumbers are 0-based.\n\n:returns: Digital channel is valid"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "checkPWMChannel",
                    "returnType": "bool",
                    "tooltip": "Check that the PWM channel number is valid.\n\nVerify that the channel number is one of the legal channel numbers. Channel\nnumbers are 0-based.\n\n:returns: PWM channel is valid"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "getDefaultCTREPCMModule",
                    "returnType": "int",
                    "tooltip": "Get the number of the default solenoid module.\n\n:returns: The number of the default solenoid module."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "getDefaultREVPHModule",
                    "returnType": "int",
                    "tooltip": "Get the number of the default solenoid module.\n\n:returns: The number of the default solenoid module."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "getNumAnalogInputs",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "getNumDigitalChannels",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.SensorUtil",
                    "functionName": "getNumPwmChannels",
                    "returnType": "int",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpilib.SerialPort",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "baudRate",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "<Port.kOnboard: 0>",
                            "name": "port",
                            "type": "wpilib.SerialPort.Port"
                        },
                        {
                            "defaultValue": "8",
                            "name": "dataBits",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "<Parity.kParity_None: 0>",
                            "name": "parity",
                            "type": "wpilib.SerialPort.Parity"
                        },
                        {
                            "defaultValue": "<StopBits.kStopBits_One: 10>",
                            "name": "stopBits",
                            "type": "wpilib.SerialPort.StopBits"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "__init__",
                    "returnType": "wpilib.SerialPort",
                    "tooltip": "Create an instance of a Serial Port class.\n\n:param baudRate: The baud rate to configure the serial port.\n:param port:     The physical port to use\n:param dataBits: The number of data bits per transfer.  Valid values are\n                 between 5 and 8 bits.\n:param parity:   Select the type of parity checking to use.\n:param stopBits: The number of stop bits to use as defined by the enum\n                 StopBits."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "baudRate",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "portName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "<Port.kOnboard: 0>",
                            "name": "port",
                            "type": "wpilib.SerialPort.Port"
                        },
                        {
                            "defaultValue": "8",
                            "name": "dataBits",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "<Parity.kParity_None: 0>",
                            "name": "parity",
                            "type": "wpilib.SerialPort.Parity"
                        },
                        {
                            "defaultValue": "<StopBits.kStopBits_One: 10>",
                            "name": "stopBits",
                            "type": "wpilib.SerialPort.StopBits"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "__init__",
                    "returnType": "wpilib.SerialPort",
                    "tooltip": "Create an instance of a Serial Port class.\n\nPrefer to use the constructor that doesn't take a port name, but in some\ncases the automatic detection might not work correctly.\n\n:param baudRate: The baud rate to configure the serial port.\n:param port:     The physical port to use\n:param portName: The direct port name to use\n:param dataBits: The number of data bits per transfer.  Valid values are\n                 between 5 and 8 bits.\n:param parity:   Select the type of parity checking to use.\n:param stopBits: The number of stop bits to use as defined by the enum\n                 StopBits."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "disableTermination",
                    "returnType": "None",
                    "tooltip": "Disable termination behavior."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        },
                        {
                            "defaultValue": "'\\n'",
                            "name": "terminator",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "enableTermination",
                    "returnType": "None",
                    "tooltip": "Enable termination and specify the termination character.\n\nTermination is currently only implemented for receive.\nWhen the the terminator is received, the Read() or Scanf() will return\nfewer bytes than requested, stopping after the terminator.\n\n:param terminator: The character to use for termination."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "flush",
                    "returnType": "None",
                    "tooltip": "Force the output buffer to be written to the port.\n\nThis is used when SetWriteBufferMode() is set to kFlushWhenFull to force a\nflush before the buffer is full."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "getBytesReceived",
                    "returnType": "int",
                    "tooltip": "Get the number of bytes currently available to read from the serial port.\n\n:returns: The number of bytes available to read"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        },
                        {
                            "defaultValue": "",
                            "name": "buffer",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "read",
                    "returnType": "int",
                    "tooltip": "Read raw bytes out of the buffer.\n\n:param buffer: Pointer to the buffer to store the bytes in.\n:param count:  The maximum number of bytes to read.\n\n:returns: The number of bytes actually read into the buffer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the serial port driver to a known state.\n\nEmpty the transmit and receive buffers in the device and formatted I/O."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        },
                        {
                            "defaultValue": "",
                            "name": "flowControl",
                            "type": "wpilib.SerialPort.FlowControl"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "setFlowControl",
                    "returnType": "None",
                    "tooltip": "Set the type of flow control to enable on this port.\n\nBy default, flow control is disabled."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        },
                        {
                            "defaultValue": "",
                            "name": "size",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "setReadBufferSize",
                    "returnType": "None",
                    "tooltip": "Specify the size of the input buffer.\n\nSpecify the amount of data that can be stored before data\nfrom the device is returned to Read or Scanf.  If you want\ndata that is received to be returned immediately, set this to 1.\n\nIt the buffer is not filled before the read timeout expires, all\ndata that has been received so far will be returned.\n\n:param size: The read buffer size."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        },
                        {
                            "defaultValue": "",
                            "name": "timeout",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "setTimeout",
                    "returnType": "None",
                    "tooltip": "Configure the timeout of the serial port.\n\nThis defines the timeout for transactions with the hardware.\nIt will affect reads and very large writes.\n\n:param timeout: The time to wait for I/O."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        },
                        {
                            "defaultValue": "",
                            "name": "mode",
                            "type": "wpilib.SerialPort.WriteBufferMode"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "setWriteBufferMode",
                    "returnType": "None",
                    "tooltip": "Specify the flushing behavior of the output buffer.\n\nWhen set to kFlushOnAccess, data is synchronously written to the serial\nport after each call to either Printf() or Write().\n\nWhen set to kFlushWhenFull, data will only be written to the serial port\nwhen the buffer is full or when Flush() is called.\n\n:param mode: The write buffer mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        },
                        {
                            "defaultValue": "",
                            "name": "size",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "setWriteBufferSize",
                    "returnType": "None",
                    "tooltip": "Specify the size of the output buffer.\n\nSpecify the amount of data that can be stored before being\ntransmitted to the device.\n\n:param size: The write buffer size."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SerialPort"
                        },
                        {
                            "defaultValue": "",
                            "name": "buffer",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort",
                    "functionName": "write",
                    "returnType": "int",
                    "tooltip": "Write raw bytes to the buffer.\n\n:param buffer: Pointer to the buffer to read the bytes from.\n:param count:  The maximum number of bytes to write.\n\n:returns: The number of bytes actually written into the port."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SerialPort.FlowControl",
            "classVariables": [
                {
                    "name": "kFlowControl_DtrDsr",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.FlowControl",
                    "writable": false
                },
                {
                    "name": "kFlowControl_None",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.FlowControl",
                    "writable": false
                },
                {
                    "name": "kFlowControl_RtsCts",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.FlowControl",
                    "writable": false
                },
                {
                    "name": "kFlowControl_XonXoff",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.FlowControl",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort.FlowControl",
                    "functionName": "__init__",
                    "returnType": "wpilib.SerialPort.FlowControl",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SerialPort.Parity",
            "classVariables": [
                {
                    "name": "kParity_Even",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Parity",
                    "writable": false
                },
                {
                    "name": "kParity_Mark",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Parity",
                    "writable": false
                },
                {
                    "name": "kParity_None",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Parity",
                    "writable": false
                },
                {
                    "name": "kParity_Odd",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Parity",
                    "writable": false
                },
                {
                    "name": "kParity_Space",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Parity",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort.Parity",
                    "functionName": "__init__",
                    "returnType": "wpilib.SerialPort.Parity",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SerialPort.Port",
            "classVariables": [
                {
                    "name": "kMXP",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Port",
                    "writable": false
                },
                {
                    "name": "kOnboard",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Port",
                    "writable": false
                },
                {
                    "name": "kUSB",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Port",
                    "writable": false
                },
                {
                    "name": "kUSB1",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Port",
                    "writable": false
                },
                {
                    "name": "kUSB2",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.Port",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort.Port",
                    "functionName": "__init__",
                    "returnType": "wpilib.SerialPort.Port",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SerialPort.StopBits",
            "classVariables": [
                {
                    "name": "kStopBits_One",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.StopBits",
                    "writable": false
                },
                {
                    "name": "kStopBits_OnePointFive",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.StopBits",
                    "writable": false
                },
                {
                    "name": "kStopBits_Two",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.StopBits",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort.StopBits",
                    "functionName": "__init__",
                    "returnType": "wpilib.SerialPort.StopBits",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SerialPort.WriteBufferMode",
            "classVariables": [
                {
                    "name": "kFlushOnAccess",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.WriteBufferMode",
                    "writable": false
                },
                {
                    "name": "kFlushWhenFull",
                    "tooltip": "",
                    "type": "wpilib.SerialPort.WriteBufferMode",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SerialPort.WriteBufferMode",
                    "functionName": "__init__",
                    "returnType": "wpilib.SerialPort.WriteBufferMode",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Servo",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Servo",
                    "functionName": "__init__",
                    "returnType": "wpilib.Servo",
                    "tooltip": "Constructor.\n\nBy default, 2.4 ms is used as the max PWM value and 0.6 ms is used as the\nmin PWM value.\n\n:param channel: The PWM channel to which the servo is attached. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Servo"
                        }
                    ],
                    "declaringClassName": "wpilib.Servo",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the servo position.\n\nServo values range from 0.0 to 1.0 corresponding to the range of full left\nto full right. This returns the commanded position, not the position that\nthe servo is actually at, as the servo does not report its own position.\n\n:returns: Position from 0.0 to 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Servo"
                        }
                    ],
                    "declaringClassName": "wpilib.Servo",
                    "functionName": "getAngle",
                    "returnType": "float",
                    "tooltip": "Get the servo angle.\n\nThis returns the commanded angle, not the angle that the servo is actually\nat, as the servo does not report its own angle.\n\n:returns: The angle in degrees to which the servo is set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Servo"
                        }
                    ],
                    "declaringClassName": "wpilib.Servo",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Servo"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.Servo",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Servo"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Servo",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the servo position.\n\nServo values range from 0.0 to 1.0 corresponding to the range of full left\nto full right.\n\n:param value: Position from 0.0 to 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Servo"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.Servo",
                    "functionName": "setAngle",
                    "returnType": "None",
                    "tooltip": "Set the servo angle.\n\nThe angles are based on the HS-322HD Servo, and have a range of 0 to 180\ndegrees.\n\nServo angles that are out of the supported range of the servo simply\n\"saturate\" in that direction. In other words, if the servo has a range of\n(X degrees to Y degrees) than angles of less than X result in an angle of\nX being set and angles of more than Y degrees result in an angle of Y being\nset.\n\n:param angle: The angle in degrees to set the servo."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SharpIR",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "a",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "b",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "min",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "max",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpilib.SharpIR",
                    "functionName": "__init__",
                    "returnType": "wpilib.SharpIR",
                    "tooltip": "Manually construct a SharpIR object. The distance is computed using this\nformula: A*v ^ B. Prefer to use one of the static factories to create this\ndevice instead.\n\n:param channel: Analog input channel the sensor is connected to\n:param a:       Constant A\n:param b:       Constant B\n:param min:     Minimum distance to report\n:param max:     Maximum distance to report"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SharpIR"
                        }
                    ],
                    "declaringClassName": "wpilib.SharpIR",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": "Get the analog input channel number.\n\n:returns: analog input channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SharpIR"
                        }
                    ],
                    "declaringClassName": "wpilib.SharpIR",
                    "functionName": "getRange",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Get the range from the distance sensor.\n\n:returns: range of the target returned by the sensor"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.SharpIR"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.SharpIR",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SharpIR",
                    "functionName": "GP2Y0A02YK0F",
                    "returnType": "wpilib.SharpIR",
                    "tooltip": "Sharp GP2Y0A02YK0F is an analog IR sensor capable of measuring\ndistances from 20cm to 150cm.\n\n:param channel: Analog input channel the sensor is connected to\n\n:returns: sensor object"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SharpIR",
                    "functionName": "GP2Y0A21YK0F",
                    "returnType": "wpilib.SharpIR",
                    "tooltip": "Sharp GP2Y0A21YK0F is an analog IR sensor capable of measuring\ndistances from 10cm to 80cm.\n\n:param channel: Analog input channel the sensor is connected to\n\n:returns: sensor object"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SharpIR",
                    "functionName": "GP2Y0A41SK0F",
                    "returnType": "wpilib.SharpIR",
                    "tooltip": "Sharp GP2Y0A41SK0F is an analog IR sensor capable of measuring\ndistances from 4cm to 30cm.\n\n:param channel: Analog input channel the sensor is connected to\n\n:returns: sensor object"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SharpIR",
                    "functionName": "GP2Y0A51SK0F",
                    "returnType": "wpilib.SharpIR",
                    "tooltip": "Sharp GP2Y0A51SK0F is an analog IR sensor capable of measuring\ndistances from 2cm to 15cm.\n\n:param channel: Analog input channel the sensor is connected to\n\n:returns: sensor object"
                }
            ]
        },
        {
            "className": "wpilib.SmartDashboard",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "__init__",
                    "returnType": "wpilib.SmartDashboard",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "clearPersistent",
                    "returnType": "None",
                    "tooltip": "Stop making a key's value persistent through program restarts.\nThe key cannot be null.\n\n:param key: the key name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "containsKey",
                    "returnType": "bool",
                    "tooltip": "Determines whether the given key is in this table.\n\n:param key: the key to search for\n\n:returns: true if the table as a value assigned to the given key"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getBoolean",
                    "returnType": "object",
                    "tooltip": "Returns the value at the specified key.\n\nIf the key is not found, returns the default value.\n\n:param keyName:      the key\n:param defaultValue: the default value to return if key doesn't exist\n\n:returns: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getBooleanArray",
                    "returnType": "object",
                    "tooltip": "Returns the boolean array the key maps to.\n\nIf the key does not exist or is of different type, it will return the\ndefault value.\n\n:param key:          The key to look up.\n:param defaultValue: The value to be returned if no value is found.\n\n:returns: the value associated with the given key or the given default value\n          if there is no value associated with the key\n          \n          .. note:: This makes a copy of the array. If the overhead of this is a concern,\n             use GetValue() instead.\n          \n          .. note:: The returned array is std::vector<int> instead of std::vector<bool>\n             because std::vector<bool> is special-cased in C++. 0 is false, any\n             non-zero value is true."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getData",
                    "returnType": "wpiutil.Sendable",
                    "tooltip": "Returns the value at the specified key.\n\n:param keyName: the key\n\n:returns: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getEntry",
                    "returnType": "ntcore.NetworkTableEntry",
                    "tooltip": "Returns an NT Entry mapping to the specified key\n\nThis is useful if an entry is used often, or is read and then modified.\n\n:param key: the key\n\n:returns: the entry for the key"
                },
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "types",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getKeys",
                    "returnType": "list[str]",
                    "tooltip": ":param types: bitmask of types; 0 is treated as a \"don't care\".\n\n:returns: keys currently in the table"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getNumber",
                    "returnType": "object",
                    "tooltip": "Returns the value at the specified key.\n\nIf the key is not found, returns the default value.\n\n:param keyName:      the key\n:param defaultValue: the default value to return if the key doesn't exist\n\n:returns: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getNumberArray",
                    "returnType": "object",
                    "tooltip": "Returns the number array the key maps to.\n\nIf the key does not exist or is of different type, it will return the\ndefault value.\n\n:param key:          The key to look up.\n:param defaultValue: The value to be returned if no value is found.\n\n:returns: the value associated with the given key or the given default value\n          if there is no value associated with the key\n          \n          .. note:: This makes a copy of the array. If the overhead of this is a concern,\n             use GetValue() instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getRaw",
                    "returnType": "object",
                    "tooltip": "Returns the raw value (byte array) the key maps to.\n\nIf the key does not exist or is of different type, it will return the\ndefault value.\n\n:param key:          The key to look up.\n:param defaultValue: The value to be returned if no value is found.\n\n:returns: the value associated with the given key or the given default value\n          if there is no value associated with the key\n          \n          .. note:: This makes a copy of the raw contents. If the overhead of this is a\n             concern, use GetValue() instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getString",
                    "returnType": "object",
                    "tooltip": "Returns the value at the specified key.\n\nIf the key is not found, returns the default value.\n\n:param keyName:      the key\n:param defaultValue: the default value to return if the key doesn't exist\n\n:returns: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getStringArray",
                    "returnType": "object",
                    "tooltip": "Returns the string array the key maps to.\n\nIf the key does not exist or is of different type, it will return the\ndefault value.\n\n:param key:          The key to look up.\n:param defaultValue: The value to be returned if no value is found.\n\n:returns: the value associated with the given key or the given default value\n          if there is no value associated with the key\n          \n          .. note:: This makes a copy of the array. If the overhead of this is a concern,\n             use GetValue() instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "getValue",
                    "returnType": "ntcore.Value",
                    "tooltip": "Retrieves the complex value (such as an array) in this table into the\ncomplex data object.\n\n:param keyName: the key"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "init",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "isPersistent",
                    "returnType": "bool",
                    "tooltip": "Returns whether the value is persistent through program restarts.\nThe key cannot be null.\n\n:param key: the key name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "task",
                            "type": "Callable[[], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "postListenerTask",
                    "returnType": "None",
                    "tooltip": "Posts a task from a listener to the ListenerExecutor, so that it can be run\nsynchronously from the main loop on the next call to updateValues().\n\n:param task: The task to run synchronously from the main thread."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putBoolean",
                    "returnType": "bool",
                    "tooltip": "Maps the specified key to the specified value in this table.\n\nThe value can be retrieved by calling the get method with a key that is\nequal to the original key.\n\n:param keyName: the key\n:param value:   the value\n\n:returns: False if the table key already exists with a different type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "List[typing.SupportsInt]"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putBooleanArray",
                    "returnType": "bool",
                    "tooltip": "Put a boolean array in the table.\n\n:param key:   the key to be assigned to\n:param value: the value that will be assigned\n\n:returns: False if the table key already exists with a different type\n          \n          .. note:: The array must be of int's rather than of bool's because\n             std::vector<bool> is special-cased in C++. 0 is false, any\n             non-zero value is true."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "wpiutil.Sendable"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putData",
                    "returnType": "None",
                    "tooltip": "Maps the specified key to the specified value in this table.\n\nThe value can be retrieved by calling the get method with a key that is\nequal to the original key.\n\nIn order for the value to appear in the dashboard, it must be registered\nwith SendableRegistry.  WPILib components do this automatically.\n\n:param key:  the key\n:param data: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpiutil.Sendable"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putData",
                    "returnType": "None",
                    "tooltip": "Maps the specified key (where the key is the name of the Sendable)\nto the specified value in this table.\n\nThe value can be retrieved by calling the get method with a key that is\nequal to the original key.\n\nIn order for the value to appear in the dashboard, it must be registered\nwith SendableRegistry.  WPILib components do this automatically.\n\n:param value: the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putNumber",
                    "returnType": "bool",
                    "tooltip": "Maps the specified key to the specified value in this table.\n\nThe value can be retrieved by calling the get method with a key that is\nequal to the original key.\n\n:param keyName: the key\n:param value:   the value\n\n:returns: False if the table key already exists with a different type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "List[typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putNumberArray",
                    "returnType": "bool",
                    "tooltip": "Put a number array in the table.\n\n:param key:   The key to be assigned to.\n:param value: The value that will be assigned.\n\n:returns: False if the table key already exists with a different type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putRaw",
                    "returnType": "bool",
                    "tooltip": "Put a raw value (byte array) in the table.\n\n:param key:   The key to be assigned to.\n:param value: The value that will be assigned.\n\n:returns: False if the table key already exists with a different type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putString",
                    "returnType": "bool",
                    "tooltip": "Maps the specified key to the specified value in this table.\n\nThe value can be retrieved by calling the get method with a key that is\nequal to the original key.\n\n:param keyName: the key\n:param value:   the value\n\n:returns: False if the table key already exists with a different type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "List[str]"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putStringArray",
                    "returnType": "bool",
                    "tooltip": "Put a string array in the table.\n\n:param key:   The key to be assigned to.\n:param value: The value that will be assigned.\n\n:returns: False if the table key already exists with a different type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "keyName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "ntcore.Value"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "putValue",
                    "returnType": "bool",
                    "tooltip": "Maps the specified key to the specified complex value (such as an array) in\nthis table.\n\nThe value can be retrieved by calling the RetrieveValue method with a key\nthat is equal to the original key.\n\n:param keyName: the key\n:param value:   the value\n\n:returns: False if the table key already exists with a different type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setDefaultBoolean",
                    "returnType": "bool",
                    "tooltip": "Set the value in the table if key does not exist\n\n:param key:          the key\n:param defaultValue: the value to set if key doesn't exist.\n\n:returns: True if the table key did not already exist, otherwise False"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "List[typing.SupportsInt]"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setDefaultBooleanArray",
                    "returnType": "bool",
                    "tooltip": "Set the value in the table if key does not exist.\n\n:param key:          the key\n:param defaultValue: the value to set if key doesn't exist.\n\n:returns: True if the table key did not already exist, otherwise False"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setDefaultNumber",
                    "returnType": "bool",
                    "tooltip": "Set the value in the table if key does not exist.\n\n:param key:          The key.\n:param defaultValue: The value to set if key doesn't exist.\n\n:returns: True if the table key did not already exist, otherwise False"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "List[typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setDefaultNumberArray",
                    "returnType": "bool",
                    "tooltip": "Set the value in the table if key does not exist.\n\n:param key:          The key.\n:param defaultValue: The value to set if key doesn't exist.\n\n:returns: True if the table key did not already exist, otherwise False"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "Buffer"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setDefaultRaw",
                    "returnType": "bool",
                    "tooltip": "Set the value in the table if key does not exist.\n\n:param key:          The key.\n:param defaultValue: The value to set if key doesn't exist.\n\n:returns: True if the table key did not already exist, otherwise False"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setDefaultString",
                    "returnType": "bool",
                    "tooltip": "Set the value in the table if key does not exist.\n\n:param key:          the key\n:param defaultValue: the value to set if key doesn't exist.\n\n:returns: True if the table key did not already exist, otherwise False"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "List[str]"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setDefaultStringArray",
                    "returnType": "bool",
                    "tooltip": "Set the value in the table if key does not exist.\n\n:param key:          The key.\n:param defaultValue: The value to set if key doesn't exist.\n\n:returns: True if the table key did not already exist, otherwise False"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "defaultValue",
                            "type": "ntcore.Value"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setDefaultValue",
                    "returnType": "bool",
                    "tooltip": "Set the value in the table if key does not exist.\n\n:param key:          the key\n:param defaultValue: The value to set if key doesn't exist.\n\n:returns: True if the table key did not already exist, otherwise False"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "key",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "setPersistent",
                    "returnType": "None",
                    "tooltip": "Makes a key's value persistent through program restarts.\n\n:param key: the key to make persistent"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.SmartDashboard",
                    "functionName": "updateValues",
                    "returnType": "None",
                    "tooltip": "Puts all sendable data to the dashboard."
                }
            ]
        },
        {
            "className": "wpilib.Solenoid",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "__init__",
                    "returnType": "wpilib.Solenoid",
                    "tooltip": "Constructs a solenoid for a specified module and type.\n\n:param busId:      The bus ID.\n:param module:     The module ID to use.\n:param moduleType: The module type to use.\n:param channel:    The channel the solenoid is on."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "busId",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleType",
                            "type": "wpilib.PneumaticsModuleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "__init__",
                    "returnType": "wpilib.Solenoid",
                    "tooltip": "Constructs a solenoid for a default module and specified type.\n\n:param busId:      The bus ID.\n:param moduleType: The module type to use.\n:param channel:    The channel the solenoid is on."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Solenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "get",
                    "returnType": "bool",
                    "tooltip": "Read the current value of the solenoid.\n\n:returns: The current value of the solenoid."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Solenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": "Get the channel this solenoid is connected to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Solenoid"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Solenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "isDisabled",
                    "returnType": "bool",
                    "tooltip": "Check if solenoid is Disabled.\n\nIf a solenoid is shorted, it is added to the DisabledList and\ndisabled until power cycle, or until faults are cleared.\n\n@see ClearAllPCMStickyFaults()\n\n:returns: If solenoid is disabled due to short."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Solenoid"
                        },
                        {
                            "defaultValue": "",
                            "name": "on",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the value of a solenoid.\n\n:param on: Turn the solenoid output off or on."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Solenoid"
                        },
                        {
                            "defaultValue": "",
                            "name": "duration",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "setPulseDuration",
                    "returnType": "None",
                    "tooltip": "Set the pulse duration in the pneumatics module. This is used in\nconjunction with the startPulse method to allow the pneumatics module to\ncontrol the timing of a pulse.\n\nOn the PCM, the timing can be controlled in 0.01 second increments, with a\nmaximum of 2.55 seconds. On the PH, the timing can be controlled in 0.001\nsecond increments, with a maximum of 65.534 seconds.\n\n@see startPulse()\n\n:param duration: The duration of the pulse."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Solenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "startPulse",
                    "returnType": "None",
                    "tooltip": "%Trigger the pneumatics module to generate a pulse of the duration set in\nsetPulseDuration.\n\n@see setPulseDuration()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Solenoid"
                        }
                    ],
                    "declaringClassName": "wpilib.Solenoid",
                    "functionName": "toggle",
                    "returnType": "None",
                    "tooltip": "Toggle the value of the solenoid.\n\nIf the solenoid is set to on, it'll be turned off. If the solenoid is set\nto off, it'll be turned on."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Spark",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Spark",
                    "functionName": "__init__",
                    "returnType": "wpilib.Spark",
                    "tooltip": "Constructor for a SPARK connected via PWM.\n\n:param channel: The PWM channel that the SPARK is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Spark",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.SparkMini",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.SparkMini",
                    "functionName": "__init__",
                    "returnType": "wpilib.SparkMini",
                    "tooltip": "Constructor for a SPARKMini connected via PWM.\n\n:param channel: The PWM channel that the SPARKMini is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.SparkMini",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.StadiaController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "__init__",
                    "returnType": "wpilib.StadiaController",
                    "tooltip": "Construct an instance of a controller.\n\nThe controller index is the USB port on the Driver Station.\n\n:param port: The port on the Driver Station that the controller is plugged\n             into (0-5)."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "A",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the A button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the A button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "B",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the B button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the B button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param pov:   index of the POV to read (starting at 0). Defaults to 0.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVCenter",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the center of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDown",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down left direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the right direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUp",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up direction of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up direction of a POV on\n          the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "X",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the X button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the X button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "Y",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the Y button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the Y button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisGreaterThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is greater than\n          the provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisLessThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is less than the\n          provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "button",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around this button's digital signal.\n\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n\n:returns: an event instance representing the button's digital signal attached\n          to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "ellipses",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the ellipses button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the ellipses button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "frame",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the frame button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the frame button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getAButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the A button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getAButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the A button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getAButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the A button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisCount",
                    "returnType": "int",
                    "tooltip": "Get the number of axes for the HID.\n\n:returns: the number of axis for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisType",
                    "returnType": "int",
                    "tooltip": "Get the axis type of a joystick axis.\n\n:returns: the axis type of a joystick axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getBButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the B button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getBButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the B button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getBButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the B button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getButtonCount",
                    "returnType": "int",
                    "tooltip": "Get the number of buttons for the HID.\n\n:returns: the number of buttons on the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getEllipsesButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the ellipses button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getEllipsesButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the ellipses button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getEllipsesButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the ellipses button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getFrameButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the frame button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getFrameButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the frame button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getFrameButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the frame button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getGoogleButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the google button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getGoogleButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the google button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getGoogleButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the google button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getHamburgerButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the hamburger button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getHamburgerButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the hamburger button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getHamburgerButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the hamburger button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftBumper",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left bumper (LB) button on the controller.\n\n:deprecated: Use GetLeftBumperButton instead. This function is deprecated\n             for removal to make function names consistent to allow the HID classes to\n             be automatically generated.\n\n:returns: the state of the button"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftBumperButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left bumper button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftBumperButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left bumper button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftBumperButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left bumper button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftBumperPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left bumper (LB) was pressed since the last check.\n\n:deprecated: Use GetLeftBumperButtonPressed instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the button was pressed since the last check"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftBumperReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left bumper (LB) was released since the last check.\n\n:deprecated: Use GetLeftBumperButtonReleased instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftStickButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left stick button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftStickButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left stick button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftStickButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left stick button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftTriggerButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left trigger button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftTriggerButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftTriggerButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left trigger button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftX",
                    "returnType": "float",
                    "tooltip": "Get the X axis value of left side of the controller. Right is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getLeftY",
                    "returnType": "float",
                    "tooltip": "Get the Y axis value of left side of the controller. Back is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Get the name of the HID.\n\n:returns: the name of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "0",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOV",
                    "returnType": "wpilib.DriverStation.POVDirection",
                    "tooltip": "Get the angle of a POV on the HID.\n\n:param pov: The index of the POV to read (starting at 0)\n\n:returns: the angle of the POV."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOVCount",
                    "returnType": "int",
                    "tooltip": "Get the number of POVs for the HID.\n\n:returns: the number of POVs for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPort",
                    "returnType": "int",
                    "tooltip": "Get the port number of the HID.\n\n:returns: The port number of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawAxis",
                    "returnType": "float",
                    "tooltip": "Get the value of the axis.\n\n:param axis: The axis to read, starting at 0.\n\n:returns: The value of the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButton",
                    "returnType": "bool",
                    "tooltip": "Get the button value (starting at button 1).\n\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\n\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n\n:param button: The button number to be read (starting at 1)\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightBumper",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right bumper (RB) button on the controller.\n\n:deprecated: Use GetRightBumperButton instead. This function is deprecated\n             for removal to make function names consistent to allow the HID classes to\n             be automatically generated.\n\n:returns: the state of the button"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightBumperButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right bumper button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightBumperButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right bumper button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightBumperButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right bumper button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightBumperPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right bumper (RB) was pressed since the last check.\n\n:deprecated: Use GetRightBumperButtonPressed instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the button was pressed since the last check"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightBumperReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right bumper (RB) was released since the last check.\n\n:deprecated: Use GetRightBumperButtonReleased instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightStickButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right stick button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightStickButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right stick button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightStickButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right stick button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightTriggerButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right trigger button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightTriggerButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightTriggerButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right trigger button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightX",
                    "returnType": "float",
                    "tooltip": "Get the X axis value of right side of the controller. Right is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getRightY",
                    "returnType": "float",
                    "tooltip": "Get the Y axis value of right side of the controller. Back is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getStadiaButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the stadia button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getStadiaButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the stadia button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getStadiaButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the stadia button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getType",
                    "returnType": "wpilib.interfaces.GenericHID.HIDType",
                    "tooltip": "Get the type of the HID.\n\n:returns: the type of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getXButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the X button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getXButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the X button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getXButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the X button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getYButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the Y button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getYButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the Y button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "getYButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the Y button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "google",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the google button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the google button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "hamburger",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the hamburger button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the hamburger button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": "Get if the HID is connected.\n\n:returns: true if the HID is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "leftBumper",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left bumper button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left bumper button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "leftStick",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left stick button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left stick button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "leftTrigger",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left trigger button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left trigger button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "rightBumper",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right bumper button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right bumper button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "rightStick",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right stick button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right stick button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "rightTrigger",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right trigger button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right trigger button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutput",
                    "returnType": "None",
                    "tooltip": "Set a single HID output value for the HID.\n\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutputs",
                    "returnType": "None",
                    "tooltip": "Set all output values for the HID.\n\n:param value: The 32 bit output value (1 bit for each output)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setRumble",
                    "returnType": "None",
                    "tooltip": "Set the rumble output for the HID.\n\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.StadiaController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.StadiaController",
                    "functionName": "stadia",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the stadia button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the stadia button's\n          digital signal attached to the given loop."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.StadiaController.Axis",
            "classVariables": [
                {
                    "name": "kLeftX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.StadiaController.Axis",
                    "functionName": "__init__",
                    "returnType": "wpilib.StadiaController.Axis",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.StadiaController.Button",
            "classVariables": [
                {
                    "name": "kA",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kB",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kEllipses",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kFrame",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kGoogle",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kHamburger",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftBumper",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftStick",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftTrigger",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightBumper",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightStick",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightTrigger",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kStadia",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.StadiaController.Button",
                    "functionName": "__init__",
                    "returnType": "wpilib.StadiaController.Button",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.SystemServer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.SystemServer",
                    "functionName": "__init__",
                    "returnType": "wpilib.SystemServer",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.SystemServer",
                    "functionName": "getSystemServer",
                    "returnType": "ntcore.NetworkTableInstance",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpilib.Talon",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Talon",
                    "functionName": "__init__",
                    "returnType": "wpilib.Talon",
                    "tooltip": "Constructor for a Talon connected via PWM.\n\n:param channel: The PWM channel that the Talon is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Talon",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.TimedRobot",
            "classVariables": [
                {
                    "name": "kDefaultPeriod",
                    "tooltip": "",
                    "type": "float",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0.02",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "__init__",
                    "returnType": "wpilib.TimedRobot",
                    "tooltip": "Constructor for TimedRobot.\n\n:param period: Period."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimedRobot"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "offset",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "addPeriodic",
                    "returnType": "None",
                    "tooltip": "Add a callback to run at a specific period with a starting time offset.\n\nThis is scheduled on TimedRobot's Notifier, so TimedRobot and the callback\nrun synchronously. Interactions between them are thread-safe.\n\n:param callback: The callback to run.\n:param period:   The period at which to run the callback.\n:param offset:   The offset from the common starting time. This is useful\n                 for scheduling a callback in a different timeslot relative\n                 to TimedRobot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousExit",
                    "returnType": "None",
                    "tooltip": "Exit code for autonomous mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits autonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for autonomous mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters autonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for autonomous mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in\nautonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledExit",
                    "returnType": "None",
                    "tooltip": "Exit code for disabled mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits disabled mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for disabled mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time\nthe robot enters disabled mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for disabled mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in disabled\nmode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "driverStationConnected",
                    "returnType": "None",
                    "tooltip": "Code that needs to know the DS state should go here.\n\nUsers should override this method for initialization that needs to occur\nafter the DS is connected, such as needing the alliance information."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimedRobot"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "endCompetition",
                    "returnType": "None",
                    "tooltip": "Ends the main loop in StartCompetition()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "getControlState",
                    "returnType": "tuple[bool, bool, bool]",
                    "tooltip": "More efficient way to determine what state the robot is in.\n\n:returns: booleans representing enabled, isautonomous, istest\n\n.. versionadded:: 2019.2.1\n\n.. note:: This function only exists in RobotPy"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimedRobot"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "getLoopStartTime",
                    "returnType": "int",
                    "tooltip": "Return the system clock time in micrseconds for the start of the current\nperiodic loop. This is in the same time base as Timer.GetFPGATimestamp(),\nbut is stable through a loop. It is updated at the beginning of every\nperiodic callback (including the normal periodic loop).\n\n:returns: Robot running time in microseconds, as of the start of the current\n          periodic function."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gets time period between calls to Periodic() functions."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isAutonomous",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Autonomous mode.\n\n:returns: True if the robot is currently operating Autonomously as determined\n          by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isAutonomousEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Autonomous mode and enabled.\n\n:returns: True if the robot us currently operating Autonomously while enabled\n          as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isDisabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the Robot is currently disabled.\n\n:returns: True if the Robot is currently disabled by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the Robot is currently enabled.\n\n:returns: True if the Robot is currently enabled by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTeleop",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Operator Control mode.\n\n:returns: True if the robot is currently operating in Tele-Op mode as\n          determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTeleopEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is current in Operator Control mode and enabled.\n\n:returns: True if the robot is currently operating in Tele-Op mode while\n          enabled as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTest",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Test mode.\n\n:returns: True if the robot is currently running in Test mode as determined\n          by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTestEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is current in Test mode and enabled.\n\n:returns: True if the robot is currently operating in Test mode while\n          enabled as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "printWatchdogEpochs",
                    "returnType": "None",
                    "tooltip": "Prints list of epochs added so far and their times."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "robotInit",
                    "returnType": "None",
                    "tooltip": "Robot-wide initialization code should go here.\n\nUsers should override this method for default Robot-wide initialization\nwhich will be called when the robot is first powered on. It will be called\nexactly one time.\n\nNote: This method is functionally identical to the class constructor so\nthat should be used instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "robotPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for all modes should go here.\n\nThis function is called each time a new packet is received from the driver\nstation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "setNetworkTablesFlushEnabled",
                    "returnType": "None",
                    "tooltip": "Enables or disables flushing NetworkTables every loop iteration.\nBy default, this is enabled.\n\n:deprecated: Deprecated without replacement.\n\n:param enabled: True to enable, false to disable"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimedRobot"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "startCompetition",
                    "returnType": "None",
                    "tooltip": "Provide an alternate \"main loop\" via StartCompetition()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopExit",
                    "returnType": "None",
                    "tooltip": "Exit code for teleop mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits teleop mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for teleop mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters teleop mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for teleop mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in teleop\nmode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testExit",
                    "returnType": "None",
                    "tooltip": "Exit code for test mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits test mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for test mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters test mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for test mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in test\nmode."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "getRuntimeType",
                    "returnType": "wpilib.RuntimeType",
                    "tooltip": "Get the current runtime type.\n\n:returns: Current runtime type."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "isReal",
                    "returnType": "bool",
                    "tooltip": "Get if the robot is real.\n\n:returns: If the robot is running in the real world."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "isSimulation",
                    "returnType": "bool",
                    "tooltip": "Get if the robot is a simulation.\n\n:returns: If the robot is running in simulation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "robot_cls",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "main",
                    "returnType": "object",
                    "tooltip": "Starting point for the application"
                }
            ]
        },
        {
            "className": "wpilib.Timer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "__init__",
                    "returnType": "wpilib.Timer",
                    "tooltip": "Create a new timer object.\n\nCreate a new timer object and reset the time to zero. The timer is\ninitially not running and must be started."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Timer"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "advanceIfElapsed",
                    "returnType": "bool",
                    "tooltip": "Check if the period specified has passed and if it has, advance the start\ntime by that period. This is useful to decide if it's time to do periodic\nwork without drifting later by the time it took to get around to checking.\n\n:param period: The period to check for.\n\n:returns: True if the period has passed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Timer"
                        }
                    ],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "get",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Get the current time from the timer. If the clock is running it is derived\nfrom the current system clock the start time stored in the timer class. If\nthe clock is not running, then return the time when it was last stopped.\n\n:returns: Current time value for this timer in seconds"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Timer"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "hasElapsed",
                    "returnType": "bool",
                    "tooltip": "Check if the period specified has passed.\n\n:param period: The period to check.\n\n:returns: True if the period has passed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Timer"
                        }
                    ],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "isRunning",
                    "returnType": "bool",
                    "tooltip": "Whether the timer is currently running.\n\n:returns: true if running."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Timer"
                        }
                    ],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the timer by setting the time to 0.\n\nMake the timer startTime the current time so new requests will be relative\nto now."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Timer"
                        }
                    ],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "restart",
                    "returnType": "None",
                    "tooltip": "Restart the timer by stopping the timer, if it is not already stopped,\nresetting the accumulated time, then starting the timer again. If you\nwant an event to periodically reoccur at some time interval from the\nstart time, consider using AdvanceIfElapsed() instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Timer"
                        }
                    ],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "start",
                    "returnType": "None",
                    "tooltip": "Start the timer running.\n\nJust set the running flag to true indicating that all time requests should\nbe relative to the system clock. Note that this method is a no-op if the\ntimer is already running."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Timer"
                        }
                    ],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "stop",
                    "returnType": "None",
                    "tooltip": "Stop the timer.\n\nThis computes the time as of now and clears the running flag, causing all\nsubsequent time requests to be read from the accumulated time rather than\nlooking at the system clock."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "getFPGATimestamp",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Return the FPGA system clock time in seconds.\n\nReturn the time from the FPGA hardware clock in seconds since the FPGA\nstarted. Rolls over after 71 minutes.\n\n:returns: Robot running time in seconds."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "getMatchTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Return the approximate match time.\n\nThe FMS does not send an official match time to the robots, but does send\nan approximate match time. The value will count down the time remaining in\nthe current period (auto or teleop).\n\nWarning: This is not an official time (so it cannot be used to dispute ref\ncalls or guarantee that a function will trigger before the match ends).\n\nThe Practice Match function of the DS approximates the behavior seen on the\nfield.\n\n:returns: Time remaining in current match period (auto or teleop)"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.Timer",
                    "functionName": "getTimestamp",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Return the clock time in seconds. By default, the time is based on the FPGA\nhardware clock in seconds since the FPGA started. However, the return value\nof this method may be modified to use any time base, including\nnon-monotonic time bases.\n\n:returns: Robot running time in seconds."
                }
            ]
        },
        {
            "className": "wpilib.TimesliceRobot",
            "classVariables": [
                {
                    "name": "kDefaultPeriod",
                    "tooltip": "",
                    "type": "float",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "robotPeriodicAllocation",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "controllerPeriod",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.TimesliceRobot",
                    "functionName": "__init__",
                    "returnType": "wpilib.TimesliceRobot",
                    "tooltip": "Constructor for TimesliceRobot.\n\n:param robotPeriodicAllocation: The allocation to give the TimesliceRobot\n                                periodic functions.\n:param controllerPeriod:        The controller period. The sum of all scheduler\n                                allocations should be less than or equal to this\n                                value."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimedRobot"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "offset",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "addPeriodic",
                    "returnType": "None",
                    "tooltip": "Add a callback to run at a specific period with a starting time offset.\n\nThis is scheduled on TimedRobot's Notifier, so TimedRobot and the callback\nrun synchronously. Interactions between them are thread-safe.\n\n:param callback: The callback to run.\n:param period:   The period at which to run the callback.\n:param offset:   The offset from the common starting time. This is useful\n                 for scheduling a callback in a different timeslot relative\n                 to TimedRobot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousExit",
                    "returnType": "None",
                    "tooltip": "Exit code for autonomous mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits autonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for autonomous mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters autonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "autonomousPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for autonomous mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in\nautonomous mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledExit",
                    "returnType": "None",
                    "tooltip": "Exit code for disabled mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits disabled mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for disabled mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time\nthe robot enters disabled mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "disabledPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for disabled mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in disabled\nmode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "driverStationConnected",
                    "returnType": "None",
                    "tooltip": "Code that needs to know the DS state should go here.\n\nUsers should override this method for initialization that needs to occur\nafter the DS is connected, such as needing the alliance information."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimedRobot"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "endCompetition",
                    "returnType": "None",
                    "tooltip": "Ends the main loop in StartCompetition()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "getControlState",
                    "returnType": "tuple[bool, bool, bool]",
                    "tooltip": "More efficient way to determine what state the robot is in.\n\n:returns: booleans representing enabled, isautonomous, istest\n\n.. versionadded:: 2019.2.1\n\n.. note:: This function only exists in RobotPy"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimedRobot"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "getLoopStartTime",
                    "returnType": "int",
                    "tooltip": "Return the system clock time in micrseconds for the start of the current\nperiodic loop. This is in the same time base as Timer.GetFPGATimestamp(),\nbut is stable through a loop. It is updated at the beginning of every\nperiodic callback (including the normal periodic loop).\n\n:returns: Robot running time in microseconds, as of the start of the current\n          periodic function."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gets time period between calls to Periodic() functions."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isAutonomous",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Autonomous mode.\n\n:returns: True if the robot is currently operating Autonomously as determined\n          by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isAutonomousEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Autonomous mode and enabled.\n\n:returns: True if the robot us currently operating Autonomously while enabled\n          as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isDisabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the Robot is currently disabled.\n\n:returns: True if the Robot is currently disabled by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the Robot is currently enabled.\n\n:returns: True if the Robot is currently enabled by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTeleop",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Operator Control mode.\n\n:returns: True if the robot is currently operating in Tele-Op mode as\n          determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTeleopEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is current in Operator Control mode and enabled.\n\n:returns: True if the robot is currently operating in Tele-Op mode while\n          enabled as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTest",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is currently in Test mode.\n\n:returns: True if the robot is currently running in Test mode as determined\n          by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.RobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.RobotBase",
                    "functionName": "isTestEnabled",
                    "returnType": "bool",
                    "tooltip": "Determine if the robot is current in Test mode and enabled.\n\n:returns: True if the robot is currently operating in Test mode while\n          enabled as determined by the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "printWatchdogEpochs",
                    "returnType": "None",
                    "tooltip": "Prints list of epochs added so far and their times."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "robotInit",
                    "returnType": "None",
                    "tooltip": "Robot-wide initialization code should go here.\n\nUsers should override this method for default Robot-wide initialization\nwhich will be called when the robot is first powered on. It will be called\nexactly one time.\n\nNote: This method is functionally identical to the class constructor so\nthat should be used instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "robotPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for all modes should go here.\n\nThis function is called each time a new packet is received from the driver\nstation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimesliceRobot"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "allocation",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.TimesliceRobot",
                    "functionName": "schedule",
                    "returnType": "None",
                    "tooltip": "Schedule a periodic function with the constructor's controller period and\nthe given allocation. The function's runtime allocation will be placed\nafter the end of the previous one's.\n\nIf a call to this function makes the allocations exceed the controller\nperiod, an exception will be thrown since that means the TimesliceRobot\nperiodic functions and the given function will have conflicting\ntimeslices.\n\n:param func:       Function to schedule.\n:param allocation: The function's runtime allocation out of the controller\n                   period."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "setNetworkTablesFlushEnabled",
                    "returnType": "None",
                    "tooltip": "Enables or disables flushing NetworkTables every loop iteration.\nBy default, this is enabled.\n\n:deprecated: Deprecated without replacement.\n\n:param enabled: True to enable, false to disable"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.TimedRobot"
                        }
                    ],
                    "declaringClassName": "wpilib.TimedRobot",
                    "functionName": "startCompetition",
                    "returnType": "None",
                    "tooltip": "Provide an alternate \"main loop\" via StartCompetition()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopExit",
                    "returnType": "None",
                    "tooltip": "Exit code for teleop mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits teleop mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for teleop mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters teleop mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "teleopPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for teleop mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in teleop\nmode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testExit",
                    "returnType": "None",
                    "tooltip": "Exit code for test mode should go here.\n\nUsers should override this method for code which will be called each time\nthe robot exits test mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testInit",
                    "returnType": "None",
                    "tooltip": "Initialization code for test mode should go here.\n\nUsers should override this method for initialization code which will be\ncalled each time the robot enters test mode."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.IterativeRobotBase"
                        }
                    ],
                    "declaringClassName": "wpilib.IterativeRobotBase",
                    "functionName": "testPeriodic",
                    "returnType": "None",
                    "tooltip": "Periodic code for test mode should go here.\n\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in test\nmode."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.TimesliceRobot",
                    "functionName": "getRuntimeType",
                    "returnType": "wpilib.RuntimeType",
                    "tooltip": "Get the current runtime type.\n\n:returns: Current runtime type."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.TimesliceRobot",
                    "functionName": "isReal",
                    "returnType": "bool",
                    "tooltip": "Get if the robot is real.\n\n:returns: If the robot is running in the real world."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.TimesliceRobot",
                    "functionName": "isSimulation",
                    "returnType": "bool",
                    "tooltip": "Get if the robot is a simulation.\n\n:returns: If the robot is running in simulation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "robot_cls",
                            "type": "object"
                        }
                    ],
                    "declaringClassName": "wpilib.TimesliceRobot",
                    "functionName": "main",
                    "returnType": "object",
                    "tooltip": "Starting point for the application"
                }
            ]
        },
        {
            "className": "wpilib.Tracer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Tracer",
                    "functionName": "__init__",
                    "returnType": "wpilib.Tracer",
                    "tooltip": "Constructs a Tracer instance."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Tracer"
                        },
                        {
                            "defaultValue": "",
                            "name": "epochName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Tracer",
                    "functionName": "addEpoch",
                    "returnType": "None",
                    "tooltip": "Adds time since last epoch to the list printed by PrintEpochs().\n\nEpochs are a way to partition the time elapsed so that when overruns occur,\none can determine which parts of an operation consumed the most time.\n\n:param epochName: The name to associate with the epoch."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Tracer"
                        }
                    ],
                    "declaringClassName": "wpilib.Tracer",
                    "functionName": "clearEpochs",
                    "returnType": "None",
                    "tooltip": "Clears all epochs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Tracer"
                        }
                    ],
                    "declaringClassName": "wpilib.Tracer",
                    "functionName": "getEpochs",
                    "returnType": "str",
                    "tooltip": "Retreives list of epochs added so far as a string\n\n.. versionadded:: 2021.1.2\n\n.. note:: This function only exists in RobotPy"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Tracer"
                        }
                    ],
                    "declaringClassName": "wpilib.Tracer",
                    "functionName": "printEpochs",
                    "returnType": "None",
                    "tooltip": "Prints list of epochs added so far and their times to the DriverStation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Tracer"
                        }
                    ],
                    "declaringClassName": "wpilib.Tracer",
                    "functionName": "resetTimer",
                    "returnType": "None",
                    "tooltip": "Restarts the epoch timer."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.Victor",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.Victor",
                    "functionName": "__init__",
                    "returnType": "wpilib.Victor",
                    "tooltip": "Constructor for a Victor 888 connected via PWM.\n\n:param channel: The PWM channel that the Victor 888 is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.Victor",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.VictorSP",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.VictorSP",
                    "functionName": "__init__",
                    "returnType": "wpilib.VictorSP",
                    "tooltip": "Constructor for a Victor SP connected via PWM.\n\n:param channel: The PWM channel that the Victor SP is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "follower",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "addFollower",
                    "returnType": "None",
                    "tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "eliminateDeadband",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "enableDeadbandElimination",
                    "returnType": "None",
                    "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getChannel",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "getVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the voltage output of the motor controller, nominally between -12 V\nand 12 V.\n\n:returns: The voltage of the motor controller, nominally between -12 V and 12\n          V."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.PWMMotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.VictorSP",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.Watchdog",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "timeout",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "__init__",
                    "returnType": "wpilib.Watchdog",
                    "tooltip": "Watchdog constructor.\n\n:param timeout:  The watchdog's timeout in seconds with microsecond\n                 resolution.\n:param callback: This function is called when the timeout expires."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        },
                        {
                            "defaultValue": "",
                            "name": "epochName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "addEpoch",
                    "returnType": "None",
                    "tooltip": "Adds time since last epoch to the list printed by PrintEpochs().\n\nEpochs are a way to partition the time elapsed so that when overruns occur,\none can determine which parts of an operation consumed the most time.\n\n:param epochName: The name to associate with the epoch."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": "Disables the watchdog timer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "enable",
                    "returnType": "None",
                    "tooltip": "Enables the watchdog timer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "getTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the time since the watchdog was last fed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "getTimeout",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the watchdog's timeout."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "isExpired",
                    "returnType": "bool",
                    "tooltip": "Returns true if the watchdog timer has expired."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "printEpochs",
                    "returnType": "None",
                    "tooltip": "Prints list of epochs added so far and their times."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the watchdog timer.\n\nThis also enables the timer if it was previously disabled."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        },
                        {
                            "defaultValue": "",
                            "name": "timeout",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "setTimeout",
                    "returnType": "None",
                    "tooltip": "Sets the watchdog's timeout.\n\n:param timeout: The watchdog's timeout in seconds with microsecond\n                resolution."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.Watchdog"
                        },
                        {
                            "defaultValue": "",
                            "name": "suppress",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.Watchdog",
                    "functionName": "suppressTimeoutMessage",
                    "returnType": "None",
                    "tooltip": "Enable or disable suppression of the generic timeout message.\n\nThis may be desirable if the user-provided callback already prints a more\nspecific message.\n\n:param suppress: Whether to suppress generic timeout message."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.XboxController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "__init__",
                    "returnType": "wpilib.XboxController",
                    "tooltip": "Construct an instance of a controller.\n\nThe controller index is the USB port on the Driver Station.\n\n:param port: The port on the Driver Station that the controller is plugged\n             into (0-5)."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "A",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the A button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the A button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "B",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the B button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the B button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param pov:   index of the POV to read (starting at 0). Defaults to 0.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVCenter",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the center of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDown",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down left direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the right direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUp",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up direction of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up direction of a POV on\n          the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "X",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the X button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the X button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "Y",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the Y button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the Y button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisGreaterThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is greater than\n          the provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisLessThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is less than the\n          provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "back",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the back button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the back button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "button",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around this button's digital signal.\n\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n\n:returns: an event instance representing the button's digital signal attached\n          to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getAButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the A button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getAButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the A button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getAButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the A button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisCount",
                    "returnType": "int",
                    "tooltip": "Get the number of axes for the HID.\n\n:returns: the number of axis for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisType",
                    "returnType": "int",
                    "tooltip": "Get the axis type of a joystick axis.\n\n:returns: the axis type of a joystick axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getBButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the B button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getBButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the B button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getBButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the B button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getBackButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the back button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getBackButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the back button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getBackButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the back button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getButtonCount",
                    "returnType": "int",
                    "tooltip": "Get the number of buttons for the HID.\n\n:returns: the number of buttons on the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftBumper",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left bumper (LB) button on the controller.\n\n:deprecated: Use GetLeftBumperButton instead. This function is deprecated\n             for removal to make function names consistent to allow the HID classes to\n             be automatically generated.\n\n:returns: the state of the button"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftBumperButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left bumper button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftBumperButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left bumper button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftBumperButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left bumper button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftBumperPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left bumper (LB) was pressed since the last check.\n\n:deprecated: Use GetLeftBumperButtonPressed instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the button was pressed since the last check"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftBumperReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left bumper (LB) was released since the last check.\n\n:deprecated: Use GetLeftBumperButtonReleased instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftStickButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the left stick button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftStickButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the left stick button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftStickButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the left stick button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftTriggerAxis",
                    "returnType": "float",
                    "tooltip": "Get the left trigger axis value of the controller. Note that this axis\nis bound to the range of [0, 1] as opposed to the usual [-1, 1].\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftX",
                    "returnType": "float",
                    "tooltip": "Get the X axis value of left side of the controller. Right is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getLeftY",
                    "returnType": "float",
                    "tooltip": "Get the Y axis value of left side of the controller. Back is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Get the name of the HID.\n\n:returns: the name of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "0",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOV",
                    "returnType": "wpilib.DriverStation.POVDirection",
                    "tooltip": "Get the angle of a POV on the HID.\n\n:param pov: The index of the POV to read (starting at 0)\n\n:returns: the angle of the POV."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOVCount",
                    "returnType": "int",
                    "tooltip": "Get the number of POVs for the HID.\n\n:returns: the number of POVs for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPort",
                    "returnType": "int",
                    "tooltip": "Get the port number of the HID.\n\n:returns: The port number of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawAxis",
                    "returnType": "float",
                    "tooltip": "Get the value of the axis.\n\n:param axis: The axis to read, starting at 0.\n\n:returns: The value of the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButton",
                    "returnType": "bool",
                    "tooltip": "Get the button value (starting at button 1).\n\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\n\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n\n:param button: The button number to be read (starting at 1)\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightBumper",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right bumper (RB) button on the controller.\n\n:deprecated: Use GetRightBumperButton instead. This function is deprecated\n             for removal to make function names consistent to allow the HID classes to\n             be automatically generated.\n\n:returns: the state of the button"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightBumperButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right bumper button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightBumperButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right bumper button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightBumperButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right bumper button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightBumperPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right bumper (RB) was pressed since the last check.\n\n:deprecated: Use GetRightBumperButtonPressed instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the button was pressed since the last check"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightBumperReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right bumper (RB) was released since the last check.\n\n:deprecated: Use GetRightBumperButtonReleased instead. This function is\n             deprecated for removal to make function names consistent to allow the HID\n             classes to be automatically generated.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightStickButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the right stick button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightStickButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the right stick button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightStickButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the right stick button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightTriggerAxis",
                    "returnType": "float",
                    "tooltip": "Get the right trigger axis value of the controller. Note that this axis\nis bound to the range of [0, 1] as opposed to the usual [-1, 1].\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightX",
                    "returnType": "float",
                    "tooltip": "Get the X axis value of right side of the controller. Right is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getRightY",
                    "returnType": "float",
                    "tooltip": "Get the Y axis value of right side of the controller. Back is positive.\n\n:returns: the axis value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getStartButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the start button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getStartButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the start button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getStartButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the start button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getType",
                    "returnType": "wpilib.interfaces.GenericHID.HIDType",
                    "tooltip": "Get the type of the HID.\n\n:returns: the type of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getXButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the X button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getXButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the X button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getXButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the X button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getYButton",
                    "returnType": "bool",
                    "tooltip": "Read the value of the Y button on the controller.\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getYButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the Y button was pressed since the last check.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "getYButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the Y button was released since the last check.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": "Get if the HID is connected.\n\n:returns: true if the HID is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "leftBumper",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left bumper button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left bumper button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "leftStick",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the left stick button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the left stick button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "leftTrigger",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the axis value of the left trigger.\nThe returned trigger will be true when the axis value is greater than\n``threshold``.\n\n:param threshold: the minimum axis value for the returned event to be true.\n                  This value should be in the range [0, 1] where 0 is the unpressed state of\n                  the axis.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the left trigger's axis\n          exceeds the provided threshold, attached to the given event loop"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "leftTrigger",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the axis value of the left trigger.\nThe returned trigger will be true when the axis value is greater than 0.5.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the left trigger's axis\n          exceeds 0.5, attached to the given event loop"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "rightBumper",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right bumper button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right bumper button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "rightStick",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the right stick button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the right stick button's\n          digital signal attached to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "rightTrigger",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the axis value of the right trigger.\nThe returned trigger will be true when the axis value is greater than\n``threshold``.\n\n:param threshold: the minimum axis value for the returned event to be true.\n                  This value should be in the range [0, 1] where 0 is the unpressed state of\n                  the axis.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the right trigger's axis\n          exceeds the provided threshold, attached to the given event loop"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "rightTrigger",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the axis value of the right trigger.\nThe returned trigger will be true when the axis value is greater than 0.5.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the right trigger's axis\n          exceeds 0.5, attached to the given event loop"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutput",
                    "returnType": "None",
                    "tooltip": "Set a single HID output value for the HID.\n\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutputs",
                    "returnType": "None",
                    "tooltip": "Set all output values for the HID.\n\n:param value: The 32 bit output value (1 bit for each output)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setRumble",
                    "returnType": "None",
                    "tooltip": "Set the rumble output for the HID.\n\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.XboxController"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.XboxController",
                    "functionName": "start",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around the start button's\ndigital signal.\n\n:param loop: the event loop instance to attach the event to.\n\n:returns: an event instance representing the start button's\n          digital signal attached to the given loop."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.XboxController.Axis",
            "classVariables": [
                {
                    "name": "kLeftTrigger",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightTrigger",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.XboxController.Axis",
                    "functionName": "__init__",
                    "returnType": "wpilib.XboxController.Axis",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.XboxController.Button",
            "classVariables": [
                {
                    "name": "kA",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kB",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kBack",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftBumper",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftStick",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightBumper",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightStick",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kStart",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.XboxController.Button",
                    "functionName": "__init__",
                    "returnType": "wpilib.XboxController.Button",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib",
            "staticMethods": []
        },
        {
            "className": "wpilib.counter.EdgeConfiguration",
            "classVariables": [
                {
                    "name": "kFallingEdge",
                    "tooltip": "",
                    "type": "wpilib.counter.EdgeConfiguration",
                    "writable": false
                },
                {
                    "name": "kRisingEdge",
                    "tooltip": "",
                    "type": "wpilib.counter.EdgeConfiguration",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.EdgeConfiguration",
                    "functionName": "__init__",
                    "returnType": "wpilib.counter.EdgeConfiguration",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib.counter",
            "staticMethods": []
        },
        {
            "className": "wpilib.counter.Tachometer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "configuration",
                            "type": "wpilib.counter.EdgeConfiguration"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "__init__",
                    "returnType": "wpilib.counter.Tachometer",
                    "tooltip": "Constructs a new tachometer.\n\n:param channel:       The DIO Channel.\n:param configuration: Edge configuration"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "getEdgesPerRevolution",
                    "returnType": "int",
                    "tooltip": "Gets the number of edges per revolution.\n\n:returns: Edges per revolution."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "getFrequency",
                    "returnType": "wpimath.units.hertz",
                    "tooltip": "Gets the tachometer frequency.\n\n:returns: Current frequency."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gets the tachometer period.\n\n:returns: Current period."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "getRevolutionsPerMinute",
                    "returnType": "wpimath.units.revolutions_per_minute",
                    "tooltip": "Gets the current tachometer revolutions per minute.\n\nSetEdgesPerRevolution must be set with a non 0 value for this to work.\n\n:returns: Current RPM."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "getRevolutionsPerSecond",
                    "returnType": "wpimath.units.turns_per_second",
                    "tooltip": "Gets the current tachometer revolutions per second.\n\nSetEdgesPerRevolution must be set with a non 0 value for this to work.\n\n:returns: Current RPS."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "getStopped",
                    "returnType": "bool",
                    "tooltip": "Gets if the tachometer is stopped.\n\n:returns: True if the tachometer is stopped."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        },
                        {
                            "defaultValue": "",
                            "name": "configuration",
                            "type": "wpilib.counter.EdgeConfiguration"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "setEdgeConfiguration",
                    "returnType": "None",
                    "tooltip": "Sets the configuration for the channel.\n\n:param configuration: The channel configuration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        },
                        {
                            "defaultValue": "",
                            "name": "edges",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "setEdgesPerRevolution",
                    "returnType": "None",
                    "tooltip": "Sets the number of edges per revolution.\n\n:param edges: Edges per revolution."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.Tachometer"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPeriod",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.Tachometer",
                    "functionName": "setMaxPeriod",
                    "returnType": "None",
                    "tooltip": "Sets the maximum period before the tachometer is considered stopped.\n\n:param maxPeriod: The max period."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.counter",
            "staticMethods": []
        },
        {
            "className": "wpilib.counter.UpDownCounter",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "configuration",
                            "type": "wpilib.counter.EdgeConfiguration"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.UpDownCounter",
                    "functionName": "__init__",
                    "returnType": "wpilib.counter.UpDownCounter",
                    "tooltip": "Constructs a new UpDown Counter.\n\n:param channel:       The DIO channel\n:param configuration: Edge configuration"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.UpDownCounter"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.UpDownCounter",
                    "functionName": "getCount",
                    "returnType": "int",
                    "tooltip": "Gets the current count.\n\n:returns: The current count."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpiutil.Sendable"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpiutil.Sendable",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.UpDownCounter"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.UpDownCounter",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the current count."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.counter.UpDownCounter"
                        },
                        {
                            "defaultValue": "",
                            "name": "configuration",
                            "type": "wpilib.counter.EdgeConfiguration"
                        }
                    ],
                    "declaringClassName": "wpilib.counter.UpDownCounter",
                    "functionName": "setEdgeConfiguration",
                    "returnType": "None",
                    "tooltip": "Sets the configuration for the channel.\n\n:param configuration: The channel configuration."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.counter",
            "staticMethods": []
        },
        {
            "className": "wpilib.drive.DifferentialDrive",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "leftMotor",
                            "type": "wpilib.interfaces.MotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightMotor",
                            "type": "wpilib.interfaces.MotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "__init__",
                    "returnType": "wpilib.drive.DifferentialDrive",
                    "tooltip": "Construct a DifferentialDrive.\n\nTo pass multiple motors per side, use CAN motor controller followers or\nPWMSpeedController::AddFollower(). If a motor needs to be inverted, do so\nbefore passing it in.\n\n:param leftMotor:  Left motor.\n:param rightMotor: Right motor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "leftMotor",
                            "type": "Callable[[typing.SupportsFloat], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightMotor",
                            "type": "Callable[[typing.SupportsFloat], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "__init__",
                    "returnType": "wpilib.drive.DifferentialDrive",
                    "tooltip": "Construct a DifferentialDrive.\n\nTo pass multiple motors per side, use CAN motor controller followers or\nPWMSpeedController::AddFollower(). If a motor needs to be inverted, do so\nbefore passing it in.\n\n:param leftMotor:  Left motor setter.\n:param rightMotor: Right motor setter."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.DifferentialDrive"
                        },
                        {
                            "defaultValue": "",
                            "name": "xSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "zRotation",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "True",
                            "name": "squareInputs",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "arcadeDrive",
                    "returnType": "None",
                    "tooltip": "Arcade drive method for differential drive platform.\n\nNote: Some drivers may prefer inverted rotation controls. This can be done\nby negating the value passed for rotation.\n\n:param xSpeed:       The speed at which the robot should drive along the X\n                     axis [-1.0..1.0]. Forward is positive.\n:param zRotation:    The rotation rate of the robot around the Z axis\n                     [-1.0..1.0]. Counterclockwise is positive.\n:param squareInputs: If set, decreases the input sensitivity at low speeds."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.DifferentialDrive"
                        },
                        {
                            "defaultValue": "",
                            "name": "xSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "zRotation",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "allowTurnInPlace",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "curvatureDrive",
                    "returnType": "None",
                    "tooltip": "Curvature drive method for differential drive platform.\n\nThe rotation argument controls the curvature of the robot's path rather\nthan its rate of heading change. This makes the robot more controllable at\nhigh speeds.\n\n:param xSpeed:           The robot's speed along the X axis [-1.0..1.0].\n                         Forward is positive.\n:param zRotation:        The normalized curvature [-1.0..1.0].\n                         Counterclockwise is positive.\n:param allowTurnInPlace: If set, overrides constant-curvature turning for\n                         turn-in-place maneuvers. zRotation will control\n                         turning rate instead of curvature."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "feedWatchdog",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object. Resets the timer that will stop the motors if\nit completes.\n\n@see MotorSafetyHelper::Feed()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.DifferentialDrive"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.DifferentialDrive"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "deadband",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "setDeadband",
                    "returnType": "None",
                    "tooltip": "Sets the deadband applied to the drive inputs (e.g., joystick values).\n\nThe default value is 0.02. Inputs smaller than the deadband are set to 0.0\nwhile inputs larger than the deadband are scaled from 0.0 to 1.0. See\nfrc::ApplyDeadband().\n\n:param deadband: The deadband to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxOutput",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "setMaxOutput",
                    "returnType": "None",
                    "tooltip": "Configure the scaling factor for using RobotDrive with motor controllers in\na mode other than PercentVbus or to limit the maximum output.\n\n:param maxOutput: Multiplied with the output percentage computed by the\n                  drive functions."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.DifferentialDrive"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.DifferentialDrive"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "True",
                            "name": "squareInputs",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "tankDrive",
                    "returnType": "None",
                    "tooltip": "Tank drive method for differential drive platform.\n\n:param leftSpeed:    The robot left side's speed along the X axis\n                     [-1.0..1.0]. Forward is positive.\n:param rightSpeed:   The robot right side's speed along the X axis\n                     [-1.0..1.0]. Forward is positive.\n:param squareInputs: If set, decreases the input sensitivity at low speeds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.drive",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "xSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "zRotation",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "True",
                            "name": "squareInputs",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "arcadeDriveIK",
                    "returnType": "wpilib.drive.DifferentialDrive.WheelSpeeds",
                    "tooltip": "Arcade drive inverse kinematics for differential drive platform.\n\nNote: Some drivers may prefer inverted rotation controls. This can be done\nby negating the value passed for rotation.\n\n:param xSpeed:       The speed at which the robot should drive along the X\n                     axis [-1.0..1.0]. Forward is positive.\n:param zRotation:    The rotation rate of the robot around the Z axis\n                     [-1.0..1.0]. Clockwise is positive.\n:param squareInputs: If set, decreases the input sensitivity at low speeds.\n\n:returns: Wheel speeds [-1.0..1.0]."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "xSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "zRotation",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "allowTurnInPlace",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "curvatureDriveIK",
                    "returnType": "wpilib.drive.DifferentialDrive.WheelSpeeds",
                    "tooltip": "Curvature drive inverse kinematics for differential drive platform.\n\nThe rotation argument controls the curvature of the robot's path rather\nthan its rate of heading change. This makes the robot more controllable at\nhigh speeds.\n\n:param xSpeed:           The robot's speed along the X axis [-1.0..1.0].\n                         Forward is positive.\n:param zRotation:        The normalized curvature [-1.0..1.0]. Clockwise is\n                         positive.\n:param allowTurnInPlace: If set, overrides constant-curvature turning for\n                         turn-in-place maneuvers. zRotation will control\n                         turning rate instead of curvature.\n\n:returns: Wheel speeds [-1.0..1.0]."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "leftSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "True",
                            "name": "squareInputs",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.DifferentialDrive",
                    "functionName": "tankDriveIK",
                    "returnType": "wpilib.drive.DifferentialDrive.WheelSpeeds",
                    "tooltip": "Tank drive inverse kinematics for differential drive platform.\n\n:param leftSpeed:    The robot left side's speed along the X axis\n                     [-1.0..1.0]. Forward is positive.\n:param rightSpeed:   The robot right side's speed along the X axis\n                     [-1.0..1.0]. Forward is positive.\n:param squareInputs: If set, decreases the input sensitivity at low speeds.\n\n:returns: Wheel speeds [-1.0..1.0]."
                }
            ]
        },
        {
            "className": "wpilib.drive.DifferentialDrive.WheelSpeeds",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.drive.DifferentialDrive.WheelSpeeds",
                    "functionName": "__init__",
                    "returnType": "wpilib.drive.DifferentialDrive.WheelSpeeds",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "left",
                    "tooltip": "Left wheel speed.",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "right",
                    "tooltip": "Right wheel speed.",
                    "type": "float",
                    "writable": true
                }
            ],
            "moduleName": "wpilib.drive",
            "staticMethods": []
        },
        {
            "className": "wpilib.drive.MecanumDrive",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "frontLeftMotor",
                            "type": "wpilib.interfaces.MotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "rearLeftMotor",
                            "type": "wpilib.interfaces.MotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "frontRightMotor",
                            "type": "wpilib.interfaces.MotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "rearRightMotor",
                            "type": "wpilib.interfaces.MotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "__init__",
                    "returnType": "wpilib.drive.MecanumDrive",
                    "tooltip": "Construct a MecanumDrive.\n\nIf a motor needs to be inverted, do so before passing it in.\n\n:param frontLeftMotor:  Front-left motor.\n:param rearLeftMotor:   Rear-left motor.\n:param frontRightMotor: Front-right motor.\n:param rearRightMotor:  Rear-right motor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "frontLeftMotor",
                            "type": "Callable[[typing.SupportsFloat], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "rearLeftMotor",
                            "type": "Callable[[typing.SupportsFloat], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "frontRightMotor",
                            "type": "Callable[[typing.SupportsFloat], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "rearRightMotor",
                            "type": "Callable[[typing.SupportsFloat], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "__init__",
                    "returnType": "wpilib.drive.MecanumDrive",
                    "tooltip": "Construct a MecanumDrive.\n\nIf a motor needs to be inverted, do so before passing it in.\n\n:param frontLeftMotor:  Front-left motor setter.\n:param rearLeftMotor:   Rear-left motor setter.\n:param frontRightMotor: Front-right motor setter.\n:param rearRightMotor:  Rear-right motor setter."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.MecanumDrive"
                        },
                        {
                            "defaultValue": "",
                            "name": "xSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "ySpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "zRotation",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "Rotation2d(0.000000)",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "driveCartesian",
                    "returnType": "None",
                    "tooltip": "Drive method for Mecanum platform.\n\nAngles are measured counterclockwise from the positive X axis. The robot's\nspeed is independent from its angle or rotation rate.\n\n:param xSpeed:    The robot's speed along the X axis [-1.0..1.0]. Forward is\n                  positive.\n:param ySpeed:    The robot's speed along the Y axis [-1.0..1.0]. Left is\n                  positive.\n:param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n                  Counterclockwise is positive.\n:param gyroAngle: The gyro heading around the Z axis. Use this to implement\n                  field-oriented controls."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.MecanumDrive"
                        },
                        {
                            "defaultValue": "",
                            "name": "magnitude",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "zRotation",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "drivePolar",
                    "returnType": "None",
                    "tooltip": "Drive method for Mecanum platform.\n\nAngles are measured counterclockwise from the positive X axis. The robot's\nspeed is independent from its angle or rotation rate.\n\n:param magnitude: The robot's speed at a given angle [-1.0..1.0]. Forward is\n                  positive.\n:param angle:     The angle around the Z axis at which the robot drives.\n:param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n                  Counterclockwise is positive."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "feedWatchdog",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object. Resets the timer that will stop the motors if\nit completes.\n\n@see MotorSafetyHelper::Feed()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.MecanumDrive"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.MecanumDrive"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "deadband",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "setDeadband",
                    "returnType": "None",
                    "tooltip": "Sets the deadband applied to the drive inputs (e.g., joystick values).\n\nThe default value is 0.02. Inputs smaller than the deadband are set to 0.0\nwhile inputs larger than the deadband are scaled from 0.0 to 1.0. See\nfrc::ApplyDeadband().\n\n:param deadband: The deadband to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxOutput",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "setMaxOutput",
                    "returnType": "None",
                    "tooltip": "Configure the scaling factor for using RobotDrive with motor controllers in\na mode other than PercentVbus or to limit the maximum output.\n\n:param maxOutput: Multiplied with the output percentage computed by the\n                  drive functions."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.MecanumDrive"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.drive",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "xSpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "ySpeed",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "zRotation",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "Rotation2d(0.000000)",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.MecanumDrive",
                    "functionName": "driveCartesianIK",
                    "returnType": "wpilib.drive.MecanumDrive.WheelSpeeds",
                    "tooltip": "Cartesian inverse kinematics for Mecanum platform.\n\nAngles are measured counterclockwise from the positive X axis. The robot's\nspeed is independent from its angle or rotation rate.\n\n:param xSpeed:    The robot's speed along the X axis [-1.0..1.0]. Forward is\n                  positive.\n:param ySpeed:    The robot's speed along the Y axis [-1.0..1.0]. Left is\n                  positive.\n:param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n                  Counterclockwise is positive.\n:param gyroAngle: The gyro heading around the Z axis. Use this to implement\n                  field-oriented controls.\n\n:returns: Wheel speeds [-1.0..1.0]."
                }
            ]
        },
        {
            "className": "wpilib.drive.MecanumDrive.WheelSpeeds",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.drive.MecanumDrive.WheelSpeeds",
                    "functionName": "__init__",
                    "returnType": "wpilib.drive.MecanumDrive.WheelSpeeds",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "frontLeft",
                    "tooltip": "Front-left wheel speed.",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "frontRight",
                    "tooltip": "Front-right wheel speed.",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "rearLeft",
                    "tooltip": "Rear-left wheel speed.",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "rearRight",
                    "tooltip": "Rear-right wheel speed.",
                    "type": "float",
                    "writable": true
                }
            ],
            "moduleName": "wpilib.drive",
            "staticMethods": []
        },
        {
            "className": "wpilib.drive.RobotDriveBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "__init__",
                    "returnType": "wpilib.drive.RobotDriveBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "check",
                    "returnType": "None",
                    "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "feed",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "feedWatchdog",
                    "returnType": "None",
                    "tooltip": "Feed the motor safety object. Resets the timer that will stop the motors if\nit completes.\n\n@see MotorSafetyHelper::Feed()"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "getDescription",
                    "returnType": "str",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "getExpiration",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isAlive",
                    "returnType": "bool",
                    "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "isSafetyEnabled",
                    "returnType": "bool",
                    "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "deadband",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "setDeadband",
                    "returnType": "None",
                    "tooltip": "Sets the deadband applied to the drive inputs (e.g., joystick values).\n\nThe default value is 0.02. Inputs smaller than the deadband are set to 0.0\nwhile inputs larger than the deadband are scaled from 0.0 to 1.0. See\nfrc::ApplyDeadband().\n\n:param deadband: The deadband to set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "expirationTime",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setExpiration",
                    "returnType": "None",
                    "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxOutput",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "setMaxOutput",
                    "returnType": "None",
                    "tooltip": "Configure the scaling factor for using RobotDrive with motor controllers in\na mode other than PercentVbus or to limit the maximum output.\n\n:param maxOutput: Multiplied with the output percentage computed by the\n                  drive functions."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.MotorSafety"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.MotorSafety",
                    "functionName": "setSafetyEnabled",
                    "returnType": "None",
                    "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.drive.RobotDriveBase"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.drive",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.drive.RobotDriveBase",
                    "functionName": "checkMotors",
                    "returnType": "None",
                    "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out."
                }
            ]
        },
        {
            "className": "wpilib.drive.RobotDriveBase.MotorType",
            "classVariables": [
                {
                    "name": "kBack",
                    "tooltip": "",
                    "type": "wpilib.drive.RobotDriveBase.MotorType",
                    "writable": false
                },
                {
                    "name": "kFrontLeft",
                    "tooltip": "",
                    "type": "wpilib.drive.RobotDriveBase.MotorType",
                    "writable": false
                },
                {
                    "name": "kFrontRight",
                    "tooltip": "",
                    "type": "wpilib.drive.RobotDriveBase.MotorType",
                    "writable": false
                },
                {
                    "name": "kLeft",
                    "tooltip": "",
                    "type": "wpilib.drive.RobotDriveBase.MotorType",
                    "writable": false
                },
                {
                    "name": "kRearLeft",
                    "tooltip": "",
                    "type": "wpilib.drive.RobotDriveBase.MotorType",
                    "writable": false
                },
                {
                    "name": "kRearRight",
                    "tooltip": "",
                    "type": "wpilib.drive.RobotDriveBase.MotorType",
                    "writable": false
                },
                {
                    "name": "kRight",
                    "tooltip": "",
                    "type": "wpilib.drive.RobotDriveBase.MotorType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.drive.RobotDriveBase.MotorType",
                    "functionName": "__init__",
                    "returnType": "wpilib.drive.RobotDriveBase.MotorType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib.drive",
            "staticMethods": []
        },
        {
            "className": "wpilib.event.BooleanEvent",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        },
                        {
                            "defaultValue": "",
                            "name": "signal",
                            "type": "Callable[[], bool]"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "__init__",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Creates a new event that is active when the condition is true.\n\n:param loop:   the loop that polls this event\n:param signal: the digital signal represented by this object."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        },
                        {
                            "defaultValue": "",
                            "name": "ctor",
                            "type": "Callable"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "castTo",
                    "returnType": "object",
                    "tooltip": "A method to \"downcast\" a BooleanEvent instance to a subclass (for example,\nto a command-based version of this class).\n\n:param ctor: a method reference to the constructor of the subclass that\n             accepts the loop as the first parameter and the condition/signal as the\n             second.\n\n:returns: an instance of the subclass."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        },
                        {
                            "defaultValue": "",
                            "name": "debounceTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "<DebounceType.kRising: 0>",
                            "name": "type",
                            "type": "wpimath.filter.Debouncer.DebounceType"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "debounce",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Creates a new debounced event from this event - it will become active when\nthis event has been active for longer than the specified period.\n\n:param debounceTime: The debounce period.\n:param type:         The debounce type.\n\n:returns: The debounced event."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "falling",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Creates a new event that triggers when this one changes from true to false.\n\n:returns: the event."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "getAsBoolean",
                    "returnType": "bool",
                    "tooltip": "Returns the state of this signal (high or low) as of the last loop poll.\n\n:returns: true for the high state, false for the low state. If the event was\n          never polled, it returns the state at event construction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        },
                        {
                            "defaultValue": "",
                            "name": "action",
                            "type": "Callable[[], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "ifHigh",
                    "returnType": "None",
                    "tooltip": "Bind an action to this event.\n\n:param action: the action to run if this event is active."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "rising",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Creates a new event that triggers when this one changes from false to true.\n\n:returns: the new event."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.event",
            "staticMethods": []
        },
        {
            "className": "wpilib.event.EventLoop",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.event.EventLoop",
                    "functionName": "__init__",
                    "returnType": "wpilib.event.EventLoop",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.EventLoop"
                        },
                        {
                            "defaultValue": "",
                            "name": "action",
                            "type": "Callable[[], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.event.EventLoop",
                    "functionName": "bind",
                    "returnType": "None",
                    "tooltip": "Bind a new action to run when the loop is polled.\n\n:param action: the action to run."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.event.EventLoop",
                    "functionName": "clear",
                    "returnType": "None",
                    "tooltip": "Clear all bindings."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.event.EventLoop",
                    "functionName": "poll",
                    "returnType": "None",
                    "tooltip": "Poll all bindings."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.event",
            "staticMethods": []
        },
        {
            "className": "wpilib.event.NetworkBooleanEvent",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        },
                        {
                            "defaultValue": "",
                            "name": "topic",
                            "type": "ntcore.BooleanTopic"
                        }
                    ],
                    "declaringClassName": "wpilib.event.NetworkBooleanEvent",
                    "functionName": "__init__",
                    "returnType": "wpilib.event.NetworkBooleanEvent",
                    "tooltip": "Creates a new event with the given boolean topic determining whether it is\nactive.\n\n:param loop:  the loop that polls this event\n:param topic: The boolean topic that contains the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        },
                        {
                            "defaultValue": "",
                            "name": "sub",
                            "type": "ntcore.BooleanSubscriber"
                        }
                    ],
                    "declaringClassName": "wpilib.event.NetworkBooleanEvent",
                    "functionName": "__init__",
                    "returnType": "wpilib.event.NetworkBooleanEvent",
                    "tooltip": "Creates a new event with the given boolean subscriber determining whether\nit is active.\n\n:param loop: the loop that polls this event\n:param sub:  The boolean subscriber that provides the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        },
                        {
                            "defaultValue": "",
                            "name": "table",
                            "type": "ntcore.NetworkTable"
                        },
                        {
                            "defaultValue": "",
                            "name": "topicName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.event.NetworkBooleanEvent",
                    "functionName": "__init__",
                    "returnType": "wpilib.event.NetworkBooleanEvent",
                    "tooltip": "Creates a new event with the given boolean topic determining whether it is\nactive.\n\n:param loop:      the loop that polls this event\n:param table:     The NetworkTable that contains the topic\n:param topicName: The topic name within the table that contains the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        },
                        {
                            "defaultValue": "",
                            "name": "tableName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "topicName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.event.NetworkBooleanEvent",
                    "functionName": "__init__",
                    "returnType": "wpilib.event.NetworkBooleanEvent",
                    "tooltip": "Creates a new event with the given boolean topic determining whether it is\nactive.\n\n:param loop:      the loop that polls this event\n:param tableName: The NetworkTable name that contains the topic\n:param topicName: The topic name within the table that contains the value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        },
                        {
                            "defaultValue": "",
                            "name": "inst",
                            "type": "ntcore.NetworkTableInstance"
                        },
                        {
                            "defaultValue": "",
                            "name": "tableName",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "topicName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.event.NetworkBooleanEvent",
                    "functionName": "__init__",
                    "returnType": "wpilib.event.NetworkBooleanEvent",
                    "tooltip": "Creates a new event with the given boolean topic determining whether it is\nactive.\n\n:param loop:      the loop that polls this event\n:param inst:      The NetworkTable instance to use\n:param tableName: The NetworkTable that contains the topic\n:param topicName: The topic name within the table that contains the value"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        },
                        {
                            "defaultValue": "",
                            "name": "ctor",
                            "type": "Callable"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "castTo",
                    "returnType": "object",
                    "tooltip": "A method to \"downcast\" a BooleanEvent instance to a subclass (for example,\nto a command-based version of this class).\n\n:param ctor: a method reference to the constructor of the subclass that\n             accepts the loop as the first parameter and the condition/signal as the\n             second.\n\n:returns: an instance of the subclass."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        },
                        {
                            "defaultValue": "",
                            "name": "debounceTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "<DebounceType.kRising: 0>",
                            "name": "type",
                            "type": "wpimath.filter.Debouncer.DebounceType"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "debounce",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Creates a new debounced event from this event - it will become active when\nthis event has been active for longer than the specified period.\n\n:param debounceTime: The debounce period.\n:param type:         The debounce type.\n\n:returns: The debounced event."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "falling",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Creates a new event that triggers when this one changes from true to false.\n\n:returns: the event."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "getAsBoolean",
                    "returnType": "bool",
                    "tooltip": "Returns the state of this signal (high or low) as of the last loop poll.\n\n:returns: true for the high state, false for the low state. If the event was\n          never polled, it returns the state at event construction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        },
                        {
                            "defaultValue": "",
                            "name": "action",
                            "type": "Callable[[], None]"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "ifHigh",
                    "returnType": "None",
                    "tooltip": "Bind an action to this event.\n\n:param action: the action to run if this event is active."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.event.BooleanEvent"
                        }
                    ],
                    "declaringClassName": "wpilib.event.BooleanEvent",
                    "functionName": "rising",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Creates a new event that triggers when this one changes from false to true.\n\n:returns: the new event."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.event",
            "staticMethods": []
        },
        {
            "className": "wpilib.interfaces.CounterBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.interfaces.CounterBase",
                    "functionName": "__init__",
                    "returnType": "wpilib.interfaces.CounterBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.CounterBase"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.CounterBase",
                    "functionName": "get",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.CounterBase"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.CounterBase",
                    "functionName": "getDirection",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.CounterBase"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.CounterBase",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.CounterBase"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.CounterBase",
                    "functionName": "getStopped",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.CounterBase"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.CounterBase",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.CounterBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPeriod",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.CounterBase",
                    "functionName": "setMaxPeriod",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.interfaces",
            "staticMethods": []
        },
        {
            "className": "wpilib.interfaces.CounterBase.EncodingType",
            "classVariables": [
                {
                    "name": "k1X",
                    "tooltip": "",
                    "type": "wpilib.interfaces.CounterBase.EncodingType",
                    "writable": true
                },
                {
                    "name": "k2X",
                    "tooltip": "",
                    "type": "wpilib.interfaces.CounterBase.EncodingType",
                    "writable": true
                },
                {
                    "name": "k4X",
                    "tooltip": "",
                    "type": "wpilib.interfaces.CounterBase.EncodingType",
                    "writable": true
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.CounterBase.EncodingType",
                    "functionName": "__init__",
                    "returnType": "wpilib.interfaces.CounterBase.EncodingType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib.interfaces",
            "staticMethods": []
        },
        {
            "className": "wpilib.interfaces.GenericHID",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "__init__",
                    "returnType": "wpilib.interfaces.GenericHID",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpilib.DriverStation.POVDirection"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POV",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around this angle of a POV on the\nHID.\n\n:param loop:  the event loop instance to attach the event to.\n:param pov:   index of the POV to read (starting at 0). Defaults to 0.\n:param angle: POV angle.\n\n:returns: a BooleanEvent instance based around this angle of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVCenter",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the center of a POV on the\n          HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDown",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down left direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVDownRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the down right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the down right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the right direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUp",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up direction of\nthe default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up direction of a POV on\n          the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpLeft",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up left direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up left direction of a POV\n          on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "POVUpRight",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs a BooleanEvent instance based around the up right direction\nof the default (index 0) POV on the HID.\n\n:returns: a BooleanEvent instance based around the up right direction of a\n          POV on the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisGreaterThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is greater than\n          the provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "threshold",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "axisLessThan",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n\n:returns: an event instance that is true when the axis value is less than the\n          provided threshold."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "loop",
                            "type": "wpilib.event.EventLoop"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "button",
                    "returnType": "wpilib.event.BooleanEvent",
                    "tooltip": "Constructs an event instance around this button's digital signal.\n\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n\n:returns: an event instance representing the button's digital signal attached\n          to the given loop."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisCount",
                    "returnType": "int",
                    "tooltip": "Get the number of axes for the HID.\n\n:returns: the number of axis for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getAxisType",
                    "returnType": "int",
                    "tooltip": "Get the axis type of a joystick axis.\n\n:returns: the axis type of a joystick axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getButtonCount",
                    "returnType": "int",
                    "tooltip": "Get the number of buttons for the HID.\n\n:returns: the number of buttons on the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Get the name of the HID.\n\n:returns: the name of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "0",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOV",
                    "returnType": "wpilib.DriverStation.POVDirection",
                    "tooltip": "Get the angle of a POV on the HID.\n\n:param pov: The index of the POV to read (starting at 0)\n\n:returns: the angle of the POV."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPOVCount",
                    "returnType": "int",
                    "tooltip": "Get the number of POVs for the HID.\n\n:returns: the number of POVs for the current HID"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getPort",
                    "returnType": "int",
                    "tooltip": "Get the port number of the HID.\n\n:returns: The port number of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawAxis",
                    "returnType": "float",
                    "tooltip": "Get the value of the axis.\n\n:param axis: The axis to read, starting at 0.\n\n:returns: The value of the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButton",
                    "returnType": "bool",
                    "tooltip": "Get the button value (starting at button 1).\n\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\n\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n\n:param button: The button number to be read (starting at 1)\n\n:returns: The state of the button."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonPressed",
                    "returnType": "bool",
                    "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was pressed since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getRawButtonReleased",
                    "returnType": "bool",
                    "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\n\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n\n:param button: The button index, beginning at 1.\n\n:returns: Whether the button was released since the last check."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "getType",
                    "returnType": "wpilib.interfaces.GenericHID.HIDType",
                    "tooltip": "Get the type of the HID.\n\n:returns: the type of the HID."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": "Get if the HID is connected.\n\n:returns: true if the HID is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutput",
                    "returnType": "None",
                    "tooltip": "Set a single HID output value for the HID.\n\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setOutputs",
                    "returnType": "None",
                    "tooltip": "Set all output values for the HID.\n\n:param value: The 32 bit output value (1 bit for each output)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.GenericHID"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID",
                    "functionName": "setRumble",
                    "returnType": "None",
                    "tooltip": "Set the rumble output for the HID.\n\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.interfaces",
            "staticMethods": []
        },
        {
            "className": "wpilib.interfaces.GenericHID.HIDType",
            "classVariables": [
                {
                    "name": "kHID1stPerson",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kHIDDriving",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kHIDFlight",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kHIDGamepad",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kHIDJoystick",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kUnknown",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputArcadePad",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputArcadeStick",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputDancePad",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputDrumKit",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputFlightStick",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputGamepad",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputGuitar",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputGuitar2",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputGuitar3",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputUnknown",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                },
                {
                    "name": "kXInputWheel",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.HIDType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID.HIDType",
                    "functionName": "__init__",
                    "returnType": "wpilib.interfaces.GenericHID.HIDType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib.interfaces",
            "staticMethods": []
        },
        {
            "className": "wpilib.interfaces.GenericHID.RumbleType",
            "classVariables": [
                {
                    "name": "kBothRumble",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.RumbleType",
                    "writable": false
                },
                {
                    "name": "kLeftRumble",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.RumbleType",
                    "writable": false
                },
                {
                    "name": "kRightRumble",
                    "tooltip": "",
                    "type": "wpilib.interfaces.GenericHID.RumbleType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.GenericHID.RumbleType",
                    "functionName": "__init__",
                    "returnType": "wpilib.interfaces.GenericHID.RumbleType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib.interfaces",
            "staticMethods": []
        },
        {
            "className": "wpilib.interfaces.MotorController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.interfaces.MotorController",
                    "functionName": "__init__",
                    "returnType": "wpilib.interfaces.MotorController",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.MotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.MotorController",
                    "functionName": "disable",
                    "returnType": "None",
                    "tooltip": "Common interface for disabling a motor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.MotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.MotorController",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Common interface for getting the current set speed of a motor controller.\n\n:returns: The current set speed.  Value is between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.MotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.MotorController",
                    "functionName": "getInverted",
                    "returnType": "bool",
                    "tooltip": "Common interface for returning the inversion state of a motor controller.\n\n:returns: isInverted The state of inversion, true is inverted."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.MotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.MotorController",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Common interface for setting the speed of a motor controller.\n\n:param speed: The speed to set.  Value should be between -1.0 and 1.0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.MotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInverted",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.MotorController",
                    "functionName": "setInverted",
                    "returnType": "None",
                    "tooltip": "Common interface for inverting direction of a motor controller.\n\n:param isInverted: The state of inversion, true is inverted."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.MotorController"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.MotorController",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the voltage output of the MotorController.  Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.interfaces.MotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.interfaces.MotorController",
                    "functionName": "stopMotor",
                    "returnType": "None",
                    "tooltip": "Common interface to stop the motor until Set is called again."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.interfaces",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.ADXL345Sim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "accel",
                            "type": "wpilib.ADXL345_I2C"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ADXL345Sim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.ADXL345Sim",
                    "tooltip": "Constructs from a ADXL345_I2C object.\n\n:param accel: ADXL345 accel to simulate"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ADXL345Sim"
                        },
                        {
                            "defaultValue": "",
                            "name": "accel",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ADXL345Sim",
                    "functionName": "setX",
                    "returnType": "None",
                    "tooltip": "Sets the X acceleration.\n\n:param accel: The X acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ADXL345Sim"
                        },
                        {
                            "defaultValue": "",
                            "name": "accel",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ADXL345Sim",
                    "functionName": "setY",
                    "returnType": "None",
                    "tooltip": "Sets the Y acceleration.\n\n:param accel: The Y acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ADXL345Sim"
                        },
                        {
                            "defaultValue": "",
                            "name": "accel",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ADXL345Sim",
                    "functionName": "setZ",
                    "returnType": "None",
                    "tooltip": "Sets the Z acceleration.\n\n:param accel: The Z acceleration."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.AddressableLEDSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.AddressableLEDSim",
                    "tooltip": "Constructs an addressable LED for a specific channel.\n\n:param channel: output channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "addressableLED",
                            "type": "wpilib.AddressableLED"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.AddressableLEDSim",
                    "tooltip": "Constructs from an AddressableLED object.\n\n:param addressableLED: AddressableLED to simulate"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "hal._wpiHal.AddressableLEDData"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "getData",
                    "returnType": "int",
                    "tooltip": "Get the LED data.\n\n:param data: output parameter to fill with LED data\n\n:returns: the length of the LED data"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Check if initialized.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "getLength",
                    "returnType": "int",
                    "tooltip": "Get the length of the LED strip.\n\n:returns: the length"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "getStart",
                    "returnType": "int",
                    "tooltip": "Get the start.\n\n:returns: the start"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the Initialized property.\n\n:param callback:      the callback that will be called whenever the Initialized\n                      property is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object storing this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "registerLengthCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the length.\n\n:param callback:      the callback that will be called whenever the length is\n                      changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "registerStartCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the start.\n\n:param callback:      the callback that will be called whenever the start\n                      is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "hal._wpiHal.AddressableLEDData"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "setData",
                    "returnType": "None",
                    "tooltip": "Change the LED data.\n\n:param data: the new data"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Change the Initialized value of the LED strip.\n\n:param initialized: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "setLength",
                    "returnType": "None",
                    "tooltip": "Change the length of the LED strip.\n\n:param length: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AddressableLEDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "setStart",
                    "returnType": "None",
                    "tooltip": "Change the start.\n\n:param start: the new start"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "hal._wpiHal.AddressableLEDData"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "getGlobalData",
                    "returnType": "int",
                    "tooltip": "Get the global LED data.\n\n:param start:  the start of the LED data\n:param length: the length of the LED data\n:param data:   output parameter to fill with LED data\n\n:returns: the length of the LED data"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, typing.SupportsInt, typing.SupportsInt], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "registerDataCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the LED data.\n\n:param callback:      the callback that will be called whenever the LED data is\n                      changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "data",
                            "type": "hal._wpiHal.AddressableLEDData"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AddressableLEDSim",
                    "functionName": "setGlobalData",
                    "returnType": "None",
                    "tooltip": "Change the global LED data.\n\n:param start:  the start of the LED data\n:param length: the length of the LED data\n:param data:   the new data"
                }
            ]
        },
        {
            "className": "wpilib.simulation.AnalogEncoderSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "encoder",
                            "type": "wpilib.AnalogEncoder"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogEncoderSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.AnalogEncoderSim",
                    "tooltip": "Constructs from an AnalogEncoder object.\n\n:param encoder: AnalogEncoder to simulate"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogEncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogEncoderSim",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the simulated position."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogEncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogEncoderSim",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the position.\n\n:param value: The position."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.AnalogInputSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "analogInput",
                            "type": "wpilib.AnalogInput"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.AnalogInputSim",
                    "tooltip": "Constructs from an AnalogInput object.\n\n:param analogInput: AnalogInput to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.AnalogInputSim",
                    "tooltip": "Constructs from an analog input channel number.\n\n:param channel: Channel number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "getAverageBits",
                    "returnType": "int",
                    "tooltip": "Get the number of average bits.\n\n:returns: the number of average bits"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Check if this analog input has been initialized.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "getOversampleBits",
                    "returnType": "int",
                    "tooltip": "Get the amount of oversampling bits.\n\n:returns: the amount of oversampling bits"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "getVoltage",
                    "returnType": "float",
                    "tooltip": "Get the voltage.\n\n:returns: the voltage"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "registerAverageBitsCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the number of average bits.\n\n:param callback:      the callback that will be called whenever the number of\n                      average bits is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on whether the analog input is initialized.\n\n:param callback:      the callback that will be called whenever the analog input\n                      is initialized\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "registerOversampleBitsCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the amount of oversampling bits.\n\n:param callback:      the callback that will be called whenever the oversampling\n                      bits are changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "registerVoltageCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the voltage.\n\n:param callback:      the callback that will be called whenever the voltage is\n                      changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all simulation data for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "averageBits",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "setAverageBits",
                    "returnType": "None",
                    "tooltip": "Change the number of average bits.\n\n:param averageBits: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Change whether this analog input has been initialized.\n\n:param initialized: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "oversampleBits",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "setOversampleBits",
                    "returnType": "None",
                    "tooltip": "Change the amount of oversampling bits.\n\n:param oversampleBits: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.AnalogInputSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltage",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.AnalogInputSim",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Change the voltage.\n\n:param voltage: the new value"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.BatterySim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.BatterySim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.BatterySim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "nominalVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "resistance",
                            "type": "wpimath.units.ohms"
                        },
                        {
                            "defaultValue": "",
                            "name": "currents",
                            "type": "List[wpimath.units.amperes]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.BatterySim",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculate the loaded battery voltage. Use this with\nRoboRioSim::SetVInVoltage(double) to set the simulated battery voltage,\nwhich can then be retrieved with the RobotController::GetBatteryVoltage()\nmethod.\n\n:param nominalVoltage: The nominal battery voltage. Usually 12v.\n:param resistance:     The forward resistance of the battery. Most batteries\n                       are at or below 20 milliohms.\n:param currents:       The currents drawn from the battery.\n\n:returns: The battery's voltage under load."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "currents",
                            "type": "List[wpimath.units.amperes]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.BatterySim",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculate the loaded battery voltage. Use this with\nRoboRioSimSetVInVoltage(double) to set the simulated battery voltage, which\ncan then be retrieved with the RobotController::GetBatteryVoltage() method.\nThis function assumes a nominal voltage of 12V and a resistance of 20\nmilliohms (0.020 ohms).\n\n:param currents: The currents drawn from the battery.\n\n:returns: The battery's voltage under load."
                }
            ]
        },
        {
            "className": "wpilib.simulation.CTREPCMSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.CTREPCMSim",
                    "tooltip": "Constructs with the default PCM module number (CAN ID)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.CTREPCMSim",
                    "tooltip": "Constructs from a PCM module number (CAN ID).\n\n:param module: module number"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "pneumatics",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.CTREPCMSim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "getAllSolenoidOutputs",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "getClosedLoopEnabled",
                    "returnType": "bool",
                    "tooltip": "Check whether the closed loop compressor control is active.\n\n:returns: true if active"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "getCompressorCurrent",
                    "returnType": "float",
                    "tooltip": "Read the compressor current.\n\n:returns: the current of the compressor connected to this module"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "getCompressorOn",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "getPressureSwitch",
                    "returnType": "bool",
                    "tooltip": "Check the value of the pressure switch.\n\n:returns: the pressure switch value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "getSolenoidOutput",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "registerClosedLoopEnabledCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the closed loop state changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "registerCompressorCurrentCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the compressor current changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "registerCompressorOnCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "registerPressureSwitchCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the pressure switch value changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "registerSolenoidOutputCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputs",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "setAllSolenoidOutputs",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "closedLoopEnabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "setClosedLoopEnabled",
                    "returnType": "None",
                    "tooltip": "Turn on/off the closed loop control of the compressor.\n\n:param closedLoopEnabled: whether the control loop is active"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "compressorCurrent",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "setCompressorCurrent",
                    "returnType": "None",
                    "tooltip": "Set the compressor current.\n\n:param compressorCurrent: the new compressor current"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "compressorOn",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "setCompressorOn",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pressureSwitch",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "setPressureSwitch",
                    "returnType": "None",
                    "tooltip": "Set the value of the pressure switch.\n\n:param pressureSwitch: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CTREPCMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "solenoidOutput",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "setSolenoidOutput",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CTREPCMSim",
                    "functionName": "getForType",
                    "returnType": "wpilib.simulation.PneumaticsBaseSim",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpilib.simulation.CallbackStore",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CallbackStore",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.CallbackStore"
                        },
                        {
                            "defaultValue": "",
                            "name": "uid",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.CallbackStore",
                    "functionName": "setUid",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DCMotorSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearbox",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "[0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(2)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DCMotorSim",
                    "tooltip": "Creates a simulated DC motor mechanism.\n\n:param plant:              The linear system representing the DC motor. This\n                           system can be created with LinearSystemId::DCMotorSystem(). If\n                           LinearSystemId::DCMotorSystem(kV, kA) is used, the distance unit must be\n                           radians.\n:param gearbox:            The type of and number of motors in the DC motor\n                           gearbox.\n:param measurementStdDevs: The standard deviation of the measurement noise."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getAngularAcceleration",
                    "returnType": "wpimath.units.radians_per_second_squared",
                    "tooltip": "Returns the DC motor acceleration.\n\n:returns: The DC motor acceleration"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getAngularPosition",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Returns the DC motor position.\n\n:returns: The DC motor position."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getAngularPositionRotations",
                    "returnType": "wpimath.units.turns",
                    "tooltip": "Returns the DC motor position in rotations"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getAngularVelocity",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Returns the DC motor velocity.\n\n:returns: The DC motor velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getAngularVelocityRPM",
                    "returnType": "wpimath.units.revolutions_per_minute",
                    "tooltip": "Returns the DC motor velocity in revolutions per minute"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getCurrentDraw",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the DC motor current draw.\n\n:returns: The DC motor current draw."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getGearbox",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns the gearbox."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getGearing",
                    "returnType": "float",
                    "tooltip": "Returns the gearing;"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getInputVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the input voltage for the DC motor.\n\n:returns: The DC motor input voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getJ",
                    "returnType": "wpimath.units.kilogram_square_meters",
                    "tooltip": "Returns the moment of inertia"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "getTorque",
                    "returnType": "wpimath.units.newton_meters",
                    "tooltip": "Returns the DC motor torque.\n\n:returns: The DC motor torque"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "angularPosition",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "setAngle",
                    "returnType": "None",
                    "tooltip": "Sets the DC motor's angular position.\n\n:param angularPosition: The new position in radians."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "angularVelocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "setAngularVelocity",
                    "returnType": "None",
                    "tooltip": "Sets the DC motor's angular velocity.\n\n:param angularVelocity: The new velocity in radians per second."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "setInputVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the input voltage for the DC motor.\n\n:param voltage: The input voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DCMotorSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "angularPosition",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "angularVelocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DCMotorSim",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the state of the DC motor.\n\n:param angularPosition: The new position\n:param angularVelocity: The new velocity"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DIOSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "input",
                            "type": "wpilib.DigitalInput"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DIOSim",
                    "tooltip": "Constructs from a DigitalInput object.\n\n:param input: DigitalInput to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpilib.DigitalOutput"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DIOSim",
                    "tooltip": "Constructs from a DigitalOutput object.\n\n:param output: DigitalOutput to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DIOSim",
                    "tooltip": "Constructs from an digital I/O channel number.\n\n:param channel: Channel number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "getFilterIndex",
                    "returnType": "int",
                    "tooltip": "Read the filter index.\n\n:returns: the filter index of this DIO port"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Check whether this DIO has been initialized.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "getIsInput",
                    "returnType": "bool",
                    "tooltip": "Check whether this DIO port is currently an Input.\n\n:returns: true if Input"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "getPulseLength",
                    "returnType": "float",
                    "tooltip": "Read the pulse length.\n\n:returns: the pulse length of this DIO port"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "getValue",
                    "returnType": "bool",
                    "tooltip": "Read the value of the DIO port.\n\n:returns: the DIO value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "registerFilterIndexCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the filter index changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when this DIO is initialized.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "registerIsInputCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever this DIO changes to be an input.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "registerPulseLengthCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the pulse length changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "registerValueCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the DIO value changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all simulation data of this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "filterIndex",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "setFilterIndex",
                    "returnType": "None",
                    "tooltip": "Change the filter index of this DIO port.\n\n:param filterIndex: the new filter index"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Define whether this DIO has been initialized.\n\n:param initialized: whether this object is initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "isInput",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "setIsInput",
                    "returnType": "None",
                    "tooltip": "Define whether this DIO port is an Input.\n\n:param isInput: whether this DIO should be an Input"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pulseLength",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "setPulseLength",
                    "returnType": "None",
                    "tooltip": "Change the pulse length of this DIO port.\n\n:param pulseLength: the new pulse length"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DIOSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DIOSim",
                    "functionName": "setValue",
                    "returnType": "None",
                    "tooltip": "Change the DIO value.\n\n:param value: the new value"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DifferentialDrivetrainSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "trackwidth",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "driveMotor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearingRatio",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelRadius",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(7)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DifferentialDrivetrainSim",
                    "tooltip": "Creates a simulated differential drivetrain.\n\n:param plant:              The LinearSystem representing the robot's drivetrain. This\n                           system can be created with\n                           LinearSystemId::DrivetrainVelocitySystem() or\n                           LinearSystemId::IdentifyDrivetrainSystem().\n:param trackwidth:         The robot's trackwidth.\n:param driveMotor:         A DCMotor representing the left side of the drivetrain.\n:param gearingRatio:       The gearingRatio ratio of the left side, as output over\n                           input. This must be the same ratio as the ratio used to\n                           identify or create the plant.\n:param wheelRadius:        The radius of the wheels on the drivetrain, in meters.\n:param measurementStdDevs: Standard deviations for measurements, in the form\n                           [x, y, heading, left velocity, right velocity,\n                           left distance, right distance]\u1d40. Can be omitted\n                           if no noise is desired. Gyro standard deviations\n                           of 0.0001 radians, velocity standard deviations\n                           of 0.05 m/s, and position measurement standard\n                           deviations of 0.005 meters are a reasonable\n                           starting point."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "driveMotor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "J",
                            "type": "wpimath.units.kilogram_square_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "mass",
                            "type": "wpimath.units.kilograms"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelRadius",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "trackwidth",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(7)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DifferentialDrivetrainSim",
                    "tooltip": "Creates a simulated differential drivetrain.\n\n:param driveMotor:         A DCMotor representing the left side of the drivetrain.\n:param gearing:            The gearing on the drive between motor and wheel, as\n                           output over input. This must be the same ratio as the\n                           ratio used to identify or create the plant.\n:param J:                  The moment of inertia of the drivetrain about its\n                           center.\n:param mass:               The mass of the drivebase.\n:param wheelRadius:        The radius of the wheels on the drivetrain.\n:param trackwidth:         The robot's trackwidth, or distance between left and\n                           right wheels.\n:param measurementStdDevs: Standard deviations for measurements, in the form\n                           [x, y, heading, left velocity, right velocity,\n                           left distance, right distance]\u1d40. Can be omitted\n                           if no noise is desired. Gyro standard deviations\n                           of 0.0001 radians, velocity standard deviations\n                           of 0.05 m/s, and position measurement standard\n                           deviations of 0.005 meters are a reasonable\n                           starting point."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "clampInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Clamp the input vector such that no element exceeds the battery voltage.\nIf any does, the relative magnitudes of the input will be maintained.\n\n:param u: The input vector.\n\n:returns: The normalized input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[7, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "dynamics",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[7, 1]\"]",
                    "tooltip": "The differential drive dynamics function.\n\n:param x: The state.\n:param u: The input.\n\n:returns: The state derivative with respect to time."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getCurrentDraw",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the currently drawn current."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getGearing",
                    "returnType": "float",
                    "tooltip": "Returns the current gearing reduction of the drivetrain, as output over\ninput."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getHeading",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Returns the direction the robot is pointing.\n\nNote that this angle is counterclockwise-positive, while most gyros are\nclockwise positive."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getLeftCurrentDraw",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the currently drawn current for the left side."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getLeftPosition",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Get the left encoder position in meters.\n\n:returns: The encoder position."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getLeftPositionFeet",
                    "returnType": "wpimath.units.feet",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getLeftPositionInches",
                    "returnType": "wpimath.units.inches",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getLeftVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Get the left encoder velocity in meters per second.\n\n:returns: The encoder velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getLeftVelocityFps",
                    "returnType": "wpimath.units.feet_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the current pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getRightCurrentDraw",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the currently drawn current for the right side."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getRightPosition",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Get the right encoder position in meters.\n\n:returns: The encoder position."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getRightPositionFeet",
                    "returnType": "wpimath.units.feet",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getRightPositionInches",
                    "returnType": "wpimath.units.inches",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getRightVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Get the right encoder velocity in meters per second.\n\n:returns: The encoder velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "getRightVelocityFps",
                    "returnType": "wpimath.units.feet_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "newGearing",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "setGearing",
                    "returnType": "None",
                    "tooltip": "Sets the gearing reduction on the drivetrain. This is commonly used for\nshifting drivetrains.\n\n:param newGearing: The new gear ratio, as output over input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "setInputs",
                    "returnType": "None",
                    "tooltip": "Sets the applied voltage to the drivetrain. Note that positive voltage must\nmake that side of the drivetrain travel forward (+X).\n\n:param leftVoltage:  The left voltage.\n:param rightVoltage: The right voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "setPose",
                    "returnType": "None",
                    "tooltip": "Sets the system pose.\n\n:param pose: The pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[7, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the system state.\n\n:param state: The state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DifferentialDrivetrainSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time that's passed since the last Update(units::second_t)\n           call."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "motor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSize",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(7)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "createKitbotSim",
                    "returnType": "wpilib.simulation.DifferentialDrivetrainSim",
                    "tooltip": "Create a sim for the standard FRC kitbot.\n\n:param motor:              The motors installed in the bot.\n:param gearing:            The gearing reduction used.\n:param wheelSize:          The wheel size.\n:param measurementStdDevs: Standard deviations for measurements, in the form\n                           [x, y, heading, left velocity, right velocity, left distance, right\n                           distance]\u1d40. Can be omitted if no noise is desired. Gyro standard\n                           deviations of 0.0001 radians, velocity standard deviations of 0.05 m/s, and\n                           position measurement standard deviations of 0.005 meters are a reasonable\n                           starting point."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "motor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSize",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "J",
                            "type": "wpimath.units.kilogram_square_meters"
                        },
                        {
                            "defaultValue": "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(7)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim",
                    "functionName": "createKitbotSim",
                    "returnType": "wpilib.simulation.DifferentialDrivetrainSim",
                    "tooltip": "Create a sim for the standard FRC kitbot.\n\n:param motor:              The motors installed in the bot.\n:param gearing:            The gearing reduction used.\n:param wheelSize:          The wheel size.\n:param J:                  The moment of inertia of the drivebase. This can be\n                           calculated using SysId.\n:param measurementStdDevs: Standard deviations for measurements, in the form\n                           [x, y, heading, left velocity, right velocity, left distance, right\n                           distance]\u1d40. Can be omitted if no noise is desired. Gyro standard\n                           deviations of 0.0001 radians, velocity standard deviations of 0.05 m/s, and\n                           position measurement standard deviations of 0.005 meters are a reasonable\n                           starting point."
                }
            ]
        },
        {
            "className": "wpilib.simulation.DifferentialDrivetrainSim.KitbotGearing",
            "classVariables": [
                {
                    "name": "k10p71",
                    "tooltip": "",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "k12p75",
                    "tooltip": "",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "k5p95",
                    "tooltip": "",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "k7p31",
                    "tooltip": "",
                    "type": "float",
                    "writable": true
                },
                {
                    "name": "k8p45",
                    "tooltip": "",
                    "type": "float",
                    "writable": true
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim.KitbotGearing",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DifferentialDrivetrainSim.KitbotGearing",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DifferentialDrivetrainSim.KitbotMotor",
            "classVariables": [
                {
                    "name": "DualCIMPerSide",
                    "tooltip": "",
                    "type": "wpimath.system.plant.DCMotor",
                    "writable": true
                },
                {
                    "name": "DualFalcon500PerSide",
                    "tooltip": "",
                    "type": "wpimath.system.plant.DCMotor",
                    "writable": true
                },
                {
                    "name": "DualMiniCIMPerSide",
                    "tooltip": "",
                    "type": "wpimath.system.plant.DCMotor",
                    "writable": true
                },
                {
                    "name": "DualNEOPerSide",
                    "tooltip": "",
                    "type": "wpimath.system.plant.DCMotor",
                    "writable": true
                },
                {
                    "name": "SingleCIMPerSide",
                    "tooltip": "",
                    "type": "wpimath.system.plant.DCMotor",
                    "writable": true
                },
                {
                    "name": "SingleFalcon500PerSide",
                    "tooltip": "",
                    "type": "wpimath.system.plant.DCMotor",
                    "writable": true
                },
                {
                    "name": "SingleMiniCIMPerSide",
                    "tooltip": "",
                    "type": "wpimath.system.plant.DCMotor",
                    "writable": true
                },
                {
                    "name": "SingleNEOPerSide",
                    "tooltip": "",
                    "type": "wpimath.system.plant.DCMotor",
                    "writable": true
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim.KitbotMotor",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DifferentialDrivetrainSim.KitbotMotor",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DifferentialDrivetrainSim.KitbotWheelSize",
            "classVariables": [
                {
                    "name": "kEightInch",
                    "tooltip": "",
                    "type": "float",
                    "writable": false
                },
                {
                    "name": "kSixInch",
                    "tooltip": "",
                    "type": "float",
                    "writable": false
                },
                {
                    "name": "kTenInch",
                    "tooltip": "",
                    "type": "float",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim.KitbotWheelSize",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DifferentialDrivetrainSim.KitbotWheelSize",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DifferentialDrivetrainSim.State",
            "classVariables": [
                {
                    "name": "kHeading",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftPosition",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kLeftVelocity",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightPosition",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kRightVelocity",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kX",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kY",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DifferentialDrivetrainSim.State",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DifferentialDrivetrainSim.State",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DigitalPWMSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "digitalOutput",
                            "type": "wpilib.DigitalOutput"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DigitalPWMSim",
                    "tooltip": "Constructs from a DigitalOutput object.\n\n:param digitalOutput: DigitalOutput to simulate"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "getDutyCycle",
                    "returnType": "float",
                    "tooltip": "Read the duty cycle value.\n\n:returns: the duty cycle value of this PWM output"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Check whether this PWM output has been initialized.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "getPin",
                    "returnType": "int",
                    "tooltip": "Check the pin number.\n\n:returns: the pin number"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "registerDutyCycleCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the duty cycle value changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when this PWM output is initialized.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "registerPinCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the pin changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all simulation data."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "dutyCycle",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "setDutyCycle",
                    "returnType": "None",
                    "tooltip": "Set the duty cycle value of this PWM output.\n\n:param dutyCycle: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Define whether this PWM output has been initialized.\n\n:param initialized: whether this object is initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DigitalPWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pin",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "setPin",
                    "returnType": "None",
                    "tooltip": "Change the pin number.\n\n:param pin: the new pin number"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "createForChannel",
                    "returnType": "wpilib.simulation.DigitalPWMSim",
                    "tooltip": "Creates an DigitalPWMSim for a digital I/O channel.\n\n:param channel: DIO channel\n\n:returns: Simulated object\n          @throws std::out_of_range if no Digital PWM is configured for that channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DigitalPWMSim",
                    "functionName": "createForIndex",
                    "returnType": "wpilib.simulation.DigitalPWMSim",
                    "tooltip": "Creates an DigitalPWMSim for a simulated index.\nThe index is incremented for each simulated DigitalPWM.\n\n:param index: simulator index\n\n:returns: Simulated object"
                }
            ]
        },
        {
            "className": "wpilib.simulation.DoubleSolenoidSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleSim",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "fwd",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "rev",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DoubleSolenoidSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DoubleSolenoidSim",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.PneumaticsModuleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "fwd",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "rev",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DoubleSolenoidSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DoubleSolenoidSim",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.PneumaticsModuleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "fwd",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "rev",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DoubleSolenoidSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DoubleSolenoidSim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DoubleSolenoidSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DoubleSolenoidSim",
                    "functionName": "get",
                    "returnType": "wpilib.DoubleSolenoid.Value",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DoubleSolenoidSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DoubleSolenoidSim",
                    "functionName": "getModuleSim",
                    "returnType": "wpilib.simulation.PneumaticsBaseSim",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DoubleSolenoidSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "wpilib.DoubleSolenoid.Value"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DoubleSolenoidSim",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DriverStationSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DriverStationSim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getAllianceStationId",
                    "returnType": "hal._wpiHal.AllianceStationID",
                    "tooltip": "Get the alliance station ID (color + number).\n\n:returns: the alliance station color and number"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getAutonomous",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is in autonomous.\n\n:returns: true if autonomous"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getDsAttached",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is attached.\n\n:returns: true if attached"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getEStop",
                    "returnType": "bool",
                    "tooltip": "Check if eStop has been activated.\n\n:returns: true if eStopped"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getEnabled",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is enabled.\n\n:returns: true if enabled"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getFmsAttached",
                    "returnType": "bool",
                    "tooltip": "Check if the FMS is connected.\n\n:returns: true if FMS is connected"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getJoystickOutputs",
                    "returnType": "int",
                    "tooltip": "Gets the joystick outputs.\n\n:param stick: The joystick number\n\n:returns: The joystick outputs"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "rumbleNum",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getJoystickRumble",
                    "returnType": "int",
                    "tooltip": "Gets the joystick rumble.\n\n:param stick:     The joystick number\n:param rumbleNum: Rumble to get (0=left, 1=right)\n\n:returns: The joystick rumble value"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getMatchTime",
                    "returnType": "float",
                    "tooltip": "Get the current value of the match timer.\n\n:returns: the current match time"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "getTest",
                    "returnType": "bool",
                    "tooltip": "Check if the DS is in test.\n\n:returns: true if test"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "notifyNewData",
                    "returnType": "None",
                    "tooltip": "Updates DriverStation data so that new values are visible to the user\nprogram."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "registerAllianceStationIdCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the alliance station ID.\n\n:param callback:      the callback that will be called whenever the alliance\n                      station changes\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "registerAutonomousCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on whether the DS is in autonomous mode.\n\n:param callback:      the callback that will be called on autonomous mode\n                      entrance/exit\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "registerDsAttachedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on whether the DS is connected.\n\n:param callback:      the callback that will be called whenever the DS\n                      connection changes\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "registerEStopCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the eStop state.\n\n:param callback:      the callback that will be called whenever the eStop state\n                      changes\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "registerEnabledCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on whether the DS is enabled.\n\n:param callback:      the callback that will be called whenever the enabled\n                      state is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "registerFmsAttachedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on whether the FMS is connected.\n\n:param callback:      the callback that will be called whenever the FMS\n                      connection changes\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "registerMatchTimeCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on match time.\n\n:param callback:      the callback that will be called whenever match time\n                      changes\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "registerTestCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on whether the DS is in test mode.\n\n:param callback:      the callback that will be called whenever the test mode\n                      is entered or left\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all simulation data for the Driver Station."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "allianceStationId",
                            "type": "hal._wpiHal.AllianceStationID"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setAllianceStationId",
                    "returnType": "None",
                    "tooltip": "Change the alliance station.\n\n:param allianceStationId: the new alliance station"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "autonomous",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setAutonomous",
                    "returnType": "None",
                    "tooltip": "Change whether the DS is in autonomous.\n\n:param autonomous: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "dsAttached",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setDsAttached",
                    "returnType": "None",
                    "tooltip": "Change whether the DS is attached.\n\n:param dsAttached: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "eStop",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setEStop",
                    "returnType": "None",
                    "tooltip": "Set whether eStop is active.\n\n:param eStop: true to activate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setEnabled",
                    "returnType": "None",
                    "tooltip": "Change whether the DS is enabled.\n\n:param enabled: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setEventName",
                    "returnType": "None",
                    "tooltip": "Sets the event name.\n\n:param name: the event name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "fmsAttached",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setFmsAttached",
                    "returnType": "None",
                    "tooltip": "Change whether the FMS is connected.\n\n:param fmsAttached: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "message",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setGameSpecificMessage",
                    "returnType": "None",
                    "tooltip": "Sets the game specific message.\n\n:param message: the game specific message"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickAxis",
                    "returnType": "None",
                    "tooltip": "Gets the value of the axis on a joystick.\n\n:param stick: The joystick number\n:param axis:  The analog axis number\n:param value: The value of the axis on the joystick"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickAxisCount",
                    "returnType": "None",
                    "tooltip": "Sets the number of axes for a joystick.\n\n:param stick: The joystick number\n:param count: The number of axes on the indicated joystick"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickAxisType",
                    "returnType": "None",
                    "tooltip": "Sets the types of Axes for a joystick.\n\n:param stick: The joystick number\n:param axis:  The target axis\n:param type:  The type of axis"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickButton",
                    "returnType": "None",
                    "tooltip": "Sets the state of one joystick button. %Button indexes begin at 1.\n\n:param stick:  The joystick number\n:param button: The button index, beginning at 1\n:param state:  The state of the joystick button"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickButtonCount",
                    "returnType": "None",
                    "tooltip": "Sets the number of buttons for a joystick.\n\n:param stick: The joystick number\n:param count: The number of buttons on the indicated joystick"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "buttons",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickButtons",
                    "returnType": "None",
                    "tooltip": "Sets the state of all the buttons on a joystick.\n\n:param stick:   The joystick number\n:param buttons: The bitmap state of the buttons on the joystick"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "isGamepad",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickIsGamepad",
                    "returnType": "None",
                    "tooltip": "Sets the value of isGamepad for a joystick.\n\n:param stick:     The joystick number\n:param isGamepad: The value of isGamepad"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickName",
                    "returnType": "None",
                    "tooltip": "Sets the name of a joystick.\n\n:param stick: The joystick number\n:param name:  The value of name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickPOV",
                    "returnType": "None",
                    "tooltip": "Gets the state of a POV on a joystick.\n\n:param stick: The joystick number\n:param pov:   The POV number\n:param value: the angle of the POV"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickPOVCount",
                    "returnType": "None",
                    "tooltip": "Sets the number of POVs for a joystick.\n\n:param stick: The joystick number\n:param count: The number of POVs on the indicated joystick"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "stick",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setJoystickType",
                    "returnType": "None",
                    "tooltip": "Sets the value of type for a joystick.\n\n:param stick: The joystick number\n:param type:  The value of type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "matchNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setMatchNumber",
                    "returnType": "None",
                    "tooltip": "Sets the match number.\n\n:param matchNumber: the match number"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "matchTime",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setMatchTime",
                    "returnType": "None",
                    "tooltip": "Sets the match timer.\n\n:param matchTime: the new match time"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.DriverStation.MatchType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setMatchType",
                    "returnType": "None",
                    "tooltip": "Sets the match type.\n\n:param type: the match type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "replayNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setReplayNumber",
                    "returnType": "None",
                    "tooltip": "Sets the replay number.\n\n:param replayNumber: the replay number"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "shouldSend",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setSendConsoleLine",
                    "returnType": "None",
                    "tooltip": "Sets suppression of DriverStation::SendConsoleLine messages.\n\n:param shouldSend: If false then messages will be suppressed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "shouldSend",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setSendError",
                    "returnType": "None",
                    "tooltip": "Sets suppression of DriverStation::ReportError and ReportWarning messages.\n\n:param shouldSend: If false then messages will be suppressed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "test",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DriverStationSim",
                    "functionName": "setTest",
                    "returnType": "None",
                    "tooltip": "Change whether the DS is in test.\n\n:param test: the new value"
                }
            ]
        },
        {
            "className": "wpilib.simulation.DutyCycleEncoderSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "encoder",
                            "type": "wpilib.DutyCycleEncoder"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleEncoderSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DutyCycleEncoderSim",
                    "tooltip": "Constructs from a DutyCycleEncoder object.\n\n:param encoder: DutyCycleEncoder to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleEncoderSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DutyCycleEncoderSim",
                    "tooltip": "Constructs from a digital input channel.\n\n:param channel: digital input channel"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleEncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleEncoderSim",
                    "functionName": "get",
                    "returnType": "float",
                    "tooltip": "Get the position.\n\n:returns: The position."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleEncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleEncoderSim",
                    "functionName": "isConnected",
                    "returnType": "bool",
                    "tooltip": "Get if the encoder is connected.\n\n:returns: true if the encoder is connected."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleEncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleEncoderSim",
                    "functionName": "set",
                    "returnType": "None",
                    "tooltip": "Set the position.\n\n:param value: The position."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleEncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "isConnected",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleEncoderSim",
                    "functionName": "setConnected",
                    "returnType": "None",
                    "tooltip": "Set if the encoder is connected.\n\n:param isConnected: Whether or not the sensor is connected."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.DutyCycleSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "dutyCycle",
                            "type": "wpilib.DutyCycle"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.DutyCycleSim",
                    "tooltip": "Constructs from a DutyCycle object.\n\n:param dutyCycle: DutyCycle to simulate"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "getFrequency",
                    "returnType": "wpimath.units.hertz",
                    "tooltip": "Measure the frequency.\n\n:returns: the duty cycle frequency"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Check whether this duty cycle input has been initialized.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Measure the output from this duty cycle port.\n\n:returns: the output value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "registerFrequencyCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the frequency changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when this duty cycle input is initialized.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "registerOutputCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the output changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all simulation data for the duty cycle output."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "frequency",
                            "type": "wpimath.units.hertz"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "setFrequency",
                    "returnType": "None",
                    "tooltip": "Change the duty cycle frequency.\n\n:param frequency: the new frequency"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Define whether this duty cycle input has been initialized.\n\n:param initialized: whether this object is initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.DutyCycleSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "setOutput",
                    "returnType": "None",
                    "tooltip": "Change the duty cycle output.\n\n:param output: the new output value"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.DutyCycleSim",
                    "functionName": "createForChannel",
                    "returnType": "wpilib.simulation.DutyCycleSim",
                    "tooltip": "Creates a DutyCycleSim for a SmartIO channel.\n\n:param channel: SmartIO channel\n\n:returns: Simulated object"
                }
            ]
        },
        {
            "className": "wpilib.simulation.ElevatorSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearbox",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "minHeight",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxHeight",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "simulateGravity",
                            "type": "bool"
                        },
                        {
                            "defaultValue": "",
                            "name": "startingHeight",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "[0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(2)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.ElevatorSim",
                    "tooltip": "Constructs a simulated elevator mechanism.\n\n:param plant:              The linear system that represents the elevator.\n                           This system can be created with\n                           LinearSystemId::ElevatorSystem().\n:param gearbox:            The type of and number of motors in your\n                           elevator gearbox.\n:param minHeight:          The minimum allowed height of the elevator.\n:param maxHeight:          The maximum allowed height of the elevator.\n:param simulateGravity:    Whether gravity should be simulated or not.\n:param startingHeight:     The starting height of the elevator.\n:param measurementStdDevs: The standard deviation of the measurements."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "gearbox",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "carriageMass",
                            "type": "wpimath.units.kilograms"
                        },
                        {
                            "defaultValue": "",
                            "name": "drumRadius",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "minHeight",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxHeight",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "simulateGravity",
                            "type": "bool"
                        },
                        {
                            "defaultValue": "",
                            "name": "startingHeight",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "[0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(2)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.ElevatorSim",
                    "tooltip": "Constructs a simulated elevator mechanism.\n\n:param gearbox:            The type of and number of motors in your\n                           elevator gearbox.\n:param gearing:            The gearing of the elevator (numbers greater\n                           than 1 represent reductions).\n:param carriageMass:       The mass of the elevator carriage.\n:param drumRadius:         The radius of the drum that your cable is\n                           wrapped around.\n:param minHeight:          The minimum allowed height of the elevator.\n:param maxHeight:          The maximum allowed height of the elevator.\n:param simulateGravity:    Whether gravity should be simulated or not.\n:param startingHeight:     The starting height of the elevator.\n:param measurementStdDevs: The standard deviation of the measurements."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "getCurrentDraw",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the elevator current draw.\n\n:returns: The elevator current draw."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "getPosition",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the position of the elevator.\n\n:returns: The position of the elevator."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "getPositionFeet",
                    "returnType": "wpimath.units.feet",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "getPositionInches",
                    "returnType": "wpimath.units.inches",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "getVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Returns the velocity of the elevator.\n\n:returns: The velocity of the elevator."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "getVelocityFps",
                    "returnType": "wpimath.units.feet_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "hasHitLowerLimit",
                    "returnType": "bool",
                    "tooltip": "Returns whether the elevator has hit the lower limit.\n\n:returns: Whether the elevator has hit the lower limit."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "hasHitUpperLimit",
                    "returnType": "bool",
                    "tooltip": "Returns whether the elevator has hit the upper limit.\n\n:returns: Whether the elevator has hit the upper limit."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "setInputVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the input voltage for the elevator.\n\n:param voltage: The input voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "position",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the elevator's state. The new position will be limited between the\nminimum and maximum allowed heights.\n\n:param position: The new position\n:param velocity: The new velocity"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "elevatorHeight",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "wouldHitLowerLimit",
                    "returnType": "bool",
                    "tooltip": "Returns whether the elevator would hit the lower limit.\n\n:param elevatorHeight: The elevator height.\n\n:returns: Whether the elevator would hit the lower limit."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ElevatorSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "elevatorHeight",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ElevatorSim",
                    "functionName": "wouldHitUpperLimit",
                    "returnType": "bool",
                    "tooltip": "Returns whether the elevator would hit the upper limit.\n\n:param elevatorHeight: The elevator height.\n\n:returns: Whether the elevator would hit the upper limit."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.EncoderSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "encoder",
                            "type": "wpilib.Encoder"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.EncoderSim",
                    "tooltip": "Constructs from an Encoder object.\n\n:param encoder: Encoder to simulate"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getCount",
                    "returnType": "int",
                    "tooltip": "Read the count of the encoder.\n\n:returns: the count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getDirection",
                    "returnType": "bool",
                    "tooltip": "Get the direction of the encoder.\n\n:returns: the direction of the encoder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getDistance",
                    "returnType": "float",
                    "tooltip": "Read the distance of the encoder.\n\n:returns: the encoder distance"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getDistancePerPulse",
                    "returnType": "float",
                    "tooltip": "Read the distance per pulse of the encoder.\n\n:returns: the encoder distance per pulse"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Read the Initialized value of the encoder.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getMaxPeriod",
                    "returnType": "float",
                    "tooltip": "Get the max period of the encoder.\n\n:returns: the max period of the encoder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getPeriod",
                    "returnType": "float",
                    "tooltip": "Read the period of the encoder.\n\n:returns: the encoder period"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getRate",
                    "returnType": "float",
                    "tooltip": "Get the rate of the encoder.\n\n:returns: the rate of change"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getReset",
                    "returnType": "bool",
                    "tooltip": "Check if the encoder has been reset.\n\n:returns: true if reset"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getReverseDirection",
                    "returnType": "bool",
                    "tooltip": "Get the reverse direction of the encoder.\n\n:returns: the reverse direction of the encoder"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "getSamplesToAverage",
                    "returnType": "int",
                    "tooltip": "Get the samples-to-average value.\n\n:returns: the samples-to-average value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerCountCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the count property of the encoder.\n\n:param callback:      the callback that will be called whenever the count\n                      property is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerDirectionCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the direction of the encoder.\n\n:param callback:      the callback that will be called whenever the direction\n                      is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerDistancePerPulseCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the distance per pulse value of this encoder.\n\n:param callback:      the callback that will be called whenever the\n                      distance per pulse is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the Initialized property of the encoder.\n\n:param callback:      the callback that will be called whenever the Initialized\n                      property is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerMaxPeriodCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the max period of the encoder is\nchanged.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerPeriodCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the period of the encoder.\n\n:param callback:      the callback that will be called whenever the period is\n                      changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerResetCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be called whenever the encoder is reset.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerReverseDirectionCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the reverse direction.\n\n:param callback:      the callback that will be called whenever the reverse\n                      direction is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "registerSamplesToAverageCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback on the samples-to-average value of this encoder.\n\n:param callback:      the callback that will be called whenever the\n                      samples-to-average is changed\n:param initialNotify: if true, the callback will be run on the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Resets all simulation data for this encoder."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setCount",
                    "returnType": "None",
                    "tooltip": "Change the count of the encoder.\n\n:param count: the new count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "direction",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setDirection",
                    "returnType": "None",
                    "tooltip": "Set the direction of the encoder.\n\n:param direction: the new direction"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "distance",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setDistance",
                    "returnType": "None",
                    "tooltip": "Change the encoder distance.\n\n:param distance: the new distance"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "distancePerPulse",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setDistancePerPulse",
                    "returnType": "None",
                    "tooltip": "Change the encoder distance per pulse.\n\n:param distancePerPulse: the new distance per pulse"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Change the Initialized value of the encoder.\n\n:param initialized: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxPeriod",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setMaxPeriod",
                    "returnType": "None",
                    "tooltip": "Change the max period of the encoder.\n\n:param maxPeriod: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setPeriod",
                    "returnType": "None",
                    "tooltip": "Change the encoder period.\n\n:param period: the new period"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "rate",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setRate",
                    "returnType": "None",
                    "tooltip": "Change the rate of the encoder.\n\n:param rate: the new rate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "reset",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setReset",
                    "returnType": "None",
                    "tooltip": "Change the reset property of the encoder.\n\n:param reset: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "reverseDirection",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setReverseDirection",
                    "returnType": "None",
                    "tooltip": "Set the reverse direction.\n\n:param reverseDirection: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.EncoderSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "samplesToAverage",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "setSamplesToAverage",
                    "returnType": "None",
                    "tooltip": "Set the samples-to-average value.\n\n:param samplesToAverage: the new value"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "createForChannel",
                    "returnType": "wpilib.simulation.EncoderSim",
                    "tooltip": "Creates an EncoderSim for a digital input channel.  Encoders take two\nchannels, so either one may be specified.\n\n:param channel: digital input channel\n\n:returns: Simulated object\n          @throws NoSuchElementException if no Encoder is configured for that channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.EncoderSim",
                    "functionName": "createForIndex",
                    "returnType": "wpilib.simulation.EncoderSim",
                    "tooltip": "Creates an EncoderSim for a simulated index.\nThe index is incremented for each simulated Encoder.\n\n:param index: simulator index\n\n:returns: Simulated object"
                }
            ]
        },
        {
            "className": "wpilib.simulation.FlywheelSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearbox",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "[0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(1)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.FlywheelSim",
                    "tooltip": "Creates a simulated flywheel mechanism.\n\n:param plant:              The linear system representing the flywheel. This\n                           system can be created with\n                           LinearSystemId::FlywheelSystem() or\n                           LinearSystemId::IdentifyVelocitySystem().\n:param gearbox:            The type of and number of motors in the flywheel\n                           gearbox.\n:param measurementStdDevs: The standard deviation of the measurement noise."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "J",
                    "returnType": "wpimath.units.kilogram_square_meters",
                    "tooltip": "Returns the moment of inertia"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "gearbox",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns the gearbox."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "gearing",
                    "returnType": "float",
                    "tooltip": "Returns the gearing;"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "getAngularAcceleration",
                    "returnType": "wpimath.units.radians_per_second_squared",
                    "tooltip": "Returns the flywheel's acceleration.\n\n:returns: The flywheel's acceleration"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "getAngularVelocity",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Returns the flywheel's velocity.\n\n:returns: The flywheel's velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "getCurrentDraw",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the flywheel's current draw.\n\n:returns: The flywheel's current draw."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "getInputVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Gets the input voltage for the flywheel.\n\n:returns: The flywheel input voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "getTorque",
                    "returnType": "wpimath.units.newton_meters",
                    "tooltip": "Returns the flywheel's torque.\n\n:returns: The flywheel's torque"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "setInputVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the input voltage for the flywheel.\n\n:param voltage: The input voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the system state.\n\n:param state: The new state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.FlywheelSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.FlywheelSim",
                    "functionName": "setVelocity",
                    "returnType": "None",
                    "tooltip": "Sets the flywheel's angular velocity.\n\n:param velocity: The new velocity"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.GenericHIDSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "joystick",
                            "type": "wpilib.interfaces.GenericHID"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.GenericHIDSim",
                    "tooltip": "Constructs from a GenericHID object.\n\n:param joystick: joystick to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.GenericHIDSim",
                    "tooltip": "Constructs from a joystick port number.\n\n:param port: port number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutput",
                    "returnType": "bool",
                    "tooltip": "Read the output of a button.\n\n:param outputNumber: the button number\n\n:returns: the value of the button (true = pressed)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutputs",
                    "returnType": "int",
                    "tooltip": "Get the encoded 16-bit integer that passes button values.\n\n:returns: the button values"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getRumble",
                    "returnType": "float",
                    "tooltip": "Get the joystick rumble.\n\n:param type: the rumble to read\n\n:returns: the rumble value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "notifyNewData",
                    "returnType": "None",
                    "tooltip": "Updates joystick data so that new values are visible to the user program."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisCount",
                    "returnType": "None",
                    "tooltip": "Set the axis count of this device.\n\n:param count: the new axis count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisType",
                    "returnType": "None",
                    "tooltip": "Set the type of an axis.\n\n:param axis: the axis\n:param type: the type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setButtonCount",
                    "returnType": "None",
                    "tooltip": "Set the button count of this device.\n\n:param count: the new button count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setName",
                    "returnType": "None",
                    "tooltip": "Set the name of this device.\n\n:param name: the new device name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of a given POV.\n\n:param pov:   the POV to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of the default POV (port 0).\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOVCount",
                    "returnType": "None",
                    "tooltip": "Set the POV count of this device.\n\n:param count: the new POV count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawAxis",
                    "returnType": "None",
                    "tooltip": "Set the value of a given axis.\n\n:param axis:  the axis to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawButton",
                    "returnType": "None",
                    "tooltip": "Set the value of a given button.\n\n:param button: the button to set\n:param value:  the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.HIDType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setType",
                    "returnType": "None",
                    "tooltip": "Set the type of this device.\n\n:param type: the new device type"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.JoystickSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "joystick",
                            "type": "wpilib.Joystick"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.JoystickSim",
                    "tooltip": "Constructs from a Joystick object.\n\n:param joystick: joystick to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.JoystickSim",
                    "tooltip": "Constructs from a joystick port number.\n\n:param port: port number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutput",
                    "returnType": "bool",
                    "tooltip": "Read the output of a button.\n\n:param outputNumber: the button number\n\n:returns: the value of the button (true = pressed)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutputs",
                    "returnType": "int",
                    "tooltip": "Get the encoded 16-bit integer that passes button values.\n\n:returns: the button values"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getRumble",
                    "returnType": "float",
                    "tooltip": "Get the joystick rumble.\n\n:param type: the rumble to read\n\n:returns: the rumble value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "notifyNewData",
                    "returnType": "None",
                    "tooltip": "Updates joystick data so that new values are visible to the user program."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisCount",
                    "returnType": "None",
                    "tooltip": "Set the axis count of this device.\n\n:param count: the new axis count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisType",
                    "returnType": "None",
                    "tooltip": "Set the type of an axis.\n\n:param axis: the axis\n:param type: the type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setButtonCount",
                    "returnType": "None",
                    "tooltip": "Set the button count of this device.\n\n:param count: the new button count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setName",
                    "returnType": "None",
                    "tooltip": "Set the name of this device.\n\n:param name: the new device name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of a given POV.\n\n:param pov:   the POV to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of the default POV (port 0).\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOVCount",
                    "returnType": "None",
                    "tooltip": "Set the POV count of this device.\n\n:param count: the new POV count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawAxis",
                    "returnType": "None",
                    "tooltip": "Set the value of a given axis.\n\n:param axis:  the axis to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawButton",
                    "returnType": "None",
                    "tooltip": "Set the value of a given button.\n\n:param button: the button to set\n:param value:  the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.JoystickSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "setThrottle",
                    "returnType": "None",
                    "tooltip": "Set the throttle value of the joystick.\n\n:param value: the new throttle value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.JoystickSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "setTop",
                    "returnType": "None",
                    "tooltip": "Set the top state of the joystick.\n\n:param state: the new state"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.JoystickSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "setTrigger",
                    "returnType": "None",
                    "tooltip": "Set the trigger value of the joystick.\n\n:param state: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.JoystickSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "setTwist",
                    "returnType": "None",
                    "tooltip": "Set the twist value of the joystick.\n\n:param value: the new twist value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.HIDType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setType",
                    "returnType": "None",
                    "tooltip": "Set the type of this device.\n\n:param type: the new device type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.JoystickSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "setX",
                    "returnType": "None",
                    "tooltip": "Set the X value of the joystick.\n\n:param value: the new X value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.JoystickSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "setY",
                    "returnType": "None",
                    "tooltip": "Set the Y value of the joystick.\n\n:param value: the new Y value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.JoystickSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.JoystickSim",
                    "functionName": "setZ",
                    "returnType": "None",
                    "tooltip": "Set the Z value of the joystick.\n\n:param value: the new Z value"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.LinearSystemSim_1_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "[0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(1)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "tooltip": "Creates a simulated generic linear system.\n\n:param system:             The system to simulate.\n:param measurementStdDevs: The standard deviations of the measurements."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the system state.\n\n:param state: The new state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_1",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.LinearSystemSim_1_1_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "[0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(2)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "tooltip": "Creates a simulated generic linear system.\n\n:param system:             The system to simulate.\n:param measurementStdDevs: The standard deviations of the measurements."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the system state.\n\n:param state: The new state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_1_1_2",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.LinearSystemSim_2_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "[0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(1)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "tooltip": "Creates a simulated generic linear system.\n\n:param system:             The system to simulate.\n:param measurementStdDevs: The standard deviations of the measurements."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the system state.\n\n:param state: The new state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_1",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.LinearSystemSim_2_1_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "[0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(2)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "tooltip": "Creates a simulated generic linear system.\n\n:param system:             The system to simulate.\n:param measurementStdDevs: The standard deviations of the measurements."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the system state.\n\n:param state: The new state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.LinearSystemSim_2_2_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "[0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(1)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "tooltip": "Creates a simulated generic linear system.\n\n:param system:             The system to simulate.\n:param measurementStdDevs: The standard deviations of the measurements."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_1"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_1"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the system state.\n\n:param state: The new state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_1",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.LinearSystemSim_2_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "[0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(2)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "tooltip": "Creates a simulated generic linear system.\n\n:param system:             The system to simulate.\n:param measurementStdDevs: The standard deviations of the measurements."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the system state.\n\n:param state: The new state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_2_2",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.PS4ControllerSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "joystick",
                            "type": "wpilib.PS4Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PS4ControllerSim",
                    "tooltip": "Constructs from a PS4Controller object.\n\n:param joystick: controller to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PS4ControllerSim",
                    "tooltip": "Constructs from a joystick port number.\n\n:param port: port number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutput",
                    "returnType": "bool",
                    "tooltip": "Read the output of a button.\n\n:param outputNumber: the button number\n\n:returns: the value of the button (true = pressed)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutputs",
                    "returnType": "int",
                    "tooltip": "Get the encoded 16-bit integer that passes button values.\n\n:returns: the button values"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getRumble",
                    "returnType": "float",
                    "tooltip": "Get the joystick rumble.\n\n:param type: the rumble to read\n\n:returns: the rumble value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "notifyNewData",
                    "returnType": "None",
                    "tooltip": "Updates joystick data so that new values are visible to the user program."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisCount",
                    "returnType": "None",
                    "tooltip": "Set the axis count of this device.\n\n:param count: the new axis count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisType",
                    "returnType": "None",
                    "tooltip": "Set the type of an axis.\n\n:param axis: the axis\n:param type: the type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setButtonCount",
                    "returnType": "None",
                    "tooltip": "Set the button count of this device.\n\n:param count: the new button count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setCircleButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the circle button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setCrossButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the cross button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setL1Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the left trigger 1 button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setL2Axis",
                    "returnType": "None",
                    "tooltip": "Change the value of the left trigger 2 axis on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setL2Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the left trigger 2 button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setL3Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the L3 (left stick) button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setLeftX",
                    "returnType": "None",
                    "tooltip": "Change the left X value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setLeftY",
                    "returnType": "None",
                    "tooltip": "Change the left Y value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setName",
                    "returnType": "None",
                    "tooltip": "Set the name of this device.\n\n:param name: the new device name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setOptionsButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the options button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of a given POV.\n\n:param pov:   the POV to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of the default POV (port 0).\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOVCount",
                    "returnType": "None",
                    "tooltip": "Set the POV count of this device.\n\n:param count: the new POV count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setPSButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the PlayStation button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setR1Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the right trigger 1 button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setR2Axis",
                    "returnType": "None",
                    "tooltip": "Change the value of the right trigger 2 axis on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setR2Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the right trigger 2 button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setR3Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the R3 (right stick) button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawAxis",
                    "returnType": "None",
                    "tooltip": "Set the value of a given axis.\n\n:param axis:  the axis to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawButton",
                    "returnType": "None",
                    "tooltip": "Set the value of a given button.\n\n:param button: the button to set\n:param value:  the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setRightX",
                    "returnType": "None",
                    "tooltip": "Change the right X value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setRightY",
                    "returnType": "None",
                    "tooltip": "Change the right Y value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setShareButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the share button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setSquareButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the square button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setTouchpadButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the touchpad button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS4ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS4ControllerSim",
                    "functionName": "setTriangleButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the triangle button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.HIDType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setType",
                    "returnType": "None",
                    "tooltip": "Set the type of this device.\n\n:param type: the new device type"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.PS5ControllerSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "joystick",
                            "type": "wpilib.PS5Controller"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PS5ControllerSim",
                    "tooltip": "Constructs from a PS5Controller object.\n\n:param joystick: controller to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PS5ControllerSim",
                    "tooltip": "Constructs from a joystick port number.\n\n:param port: port number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutput",
                    "returnType": "bool",
                    "tooltip": "Read the output of a button.\n\n:param outputNumber: the button number\n\n:returns: the value of the button (true = pressed)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutputs",
                    "returnType": "int",
                    "tooltip": "Get the encoded 16-bit integer that passes button values.\n\n:returns: the button values"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getRumble",
                    "returnType": "float",
                    "tooltip": "Get the joystick rumble.\n\n:param type: the rumble to read\n\n:returns: the rumble value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "notifyNewData",
                    "returnType": "None",
                    "tooltip": "Updates joystick data so that new values are visible to the user program."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisCount",
                    "returnType": "None",
                    "tooltip": "Set the axis count of this device.\n\n:param count: the new axis count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisType",
                    "returnType": "None",
                    "tooltip": "Set the type of an axis.\n\n:param axis: the axis\n:param type: the type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setButtonCount",
                    "returnType": "None",
                    "tooltip": "Set the button count of this device.\n\n:param count: the new button count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setCircleButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the circle button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setCreateButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the create button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setCrossButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the cross button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setL1Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the left trigger 1 button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setL2Axis",
                    "returnType": "None",
                    "tooltip": "Change the value of the left trigger 2 axis on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setL2Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the left trigger 2 button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setL3Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the L3 (left stick) button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setLeftX",
                    "returnType": "None",
                    "tooltip": "Change the left X value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setLeftY",
                    "returnType": "None",
                    "tooltip": "Change the left Y value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setName",
                    "returnType": "None",
                    "tooltip": "Set the name of this device.\n\n:param name: the new device name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setOptionsButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the options button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of a given POV.\n\n:param pov:   the POV to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of the default POV (port 0).\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOVCount",
                    "returnType": "None",
                    "tooltip": "Set the POV count of this device.\n\n:param count: the new POV count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setPSButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the PlayStation button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setR1Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the right trigger 1 button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setR2Axis",
                    "returnType": "None",
                    "tooltip": "Change the value of the right trigger 2 axis on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setR2Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the right trigger 2 button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setR3Button",
                    "returnType": "None",
                    "tooltip": "Change the value of the R3 (right stick) button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawAxis",
                    "returnType": "None",
                    "tooltip": "Set the value of a given axis.\n\n:param axis:  the axis to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawButton",
                    "returnType": "None",
                    "tooltip": "Set the value of a given button.\n\n:param button: the button to set\n:param value:  the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setRightX",
                    "returnType": "None",
                    "tooltip": "Change the right X value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setRightY",
                    "returnType": "None",
                    "tooltip": "Change the right Y value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setSquareButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the square button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setTouchpadButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the touchpad button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PS5ControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PS5ControllerSim",
                    "functionName": "setTriangleButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the triangle button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.HIDType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setType",
                    "returnType": "None",
                    "tooltip": "Set the type of this device.\n\n:param type: the new device type"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.PWMMotorControllerSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "motorctrl",
                            "type": "wpilib.PWMMotorController"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMMotorControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PWMMotorControllerSim",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMMotorControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PWMMotorControllerSim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMMotorControllerSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMMotorControllerSim",
                    "functionName": "getSpeed",
                    "returnType": "float",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.PWMSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "pwm",
                            "type": "wpilib.PWM"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PWMSim",
                    "tooltip": "Constructs from a PWM object.\n\n:param pwm: PWM to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PWMSim",
                    "tooltip": "Constructs from a PWM channel number.\n\n:param channel: Channel number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Check whether the PWM has been initialized.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "getOutputPeriod",
                    "returnType": "int",
                    "tooltip": "Get the PWM period scale.\n\n:returns: the PWM period scale"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "getPulseMicrosecond",
                    "returnType": "int",
                    "tooltip": "Get the PWM pulse microsecond value.\n\n:returns: the PWM pulse microsecond value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when the PWM is initialized.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "registerOutputPeriodCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when the PWM period scale changes.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "registerPulseMicrosecondCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when the PWM pulse microsecond value changes.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all simulation data."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Define whether the PWM has been initialized.\n\n:param initialized: whether this object is initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "setOutputPeriod",
                    "returnType": "None",
                    "tooltip": "Set the PWM period scale.\n\n:param period: the PWM period scale"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PWMSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "microsecondPulseTime",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PWMSim",
                    "functionName": "setPulseMicrosecond",
                    "returnType": "None",
                    "tooltip": "Set the PWM pulse microsecond value.\n\n:param microsecondPulseTime: the PWM pulse microsecond value"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.PneumaticsBaseSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PneumaticsBaseSim",
                    "tooltip": "Constructs a PneumaticsBaseSim with the given index.\n\n:param index: The index."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PneumaticsBaseSim",
                    "tooltip": "Constructs a PneumaticsBaseSim for the given module.\n\n:param module: The module."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "getAllSolenoidOutputs",
                    "returnType": "int",
                    "tooltip": "Get the current value of all solenoid outputs.\n\n:returns: the solenoid outputs (1 bit per output)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "getCompressorCurrent",
                    "returnType": "float",
                    "tooltip": "Read the compressor current.\n\n:returns: the current of the compressor connected to this module"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "getCompressorOn",
                    "returnType": "bool",
                    "tooltip": "Check if the compressor is on.\n\n:returns: true if the compressor is active"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Check whether the PCM/PH has been initialized.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "getPressureSwitch",
                    "returnType": "bool",
                    "tooltip": "Check the value of the pressure switch.\n\n:returns: the pressure switch value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "getSolenoidOutput",
                    "returnType": "bool",
                    "tooltip": "Check the solenoid output on a specific channel.\n\n:param channel: the channel to check\n\n:returns: the solenoid output"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "registerCompressorCurrentCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the compressor current changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the :class:`.CallbackStore` object associated with this callback.\n          Save a reference to this object; it being deconstructed cancels the\n          callback."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "registerCompressorOnCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when the compressor activates.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial state\n\n:returns: the :class:`.CallbackStore` object associated with this callback.\n          Save a reference to this object; it being deconstructed cancels the\n          callback."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when the PCM/PH is initialized.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial state\n\n:returns: the :class:`.CallbackStore` object associated with this callback.\n          Save a reference to this object; it being deconstructed cancels the\n          callback."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "registerPressureSwitchCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the pressure switch value changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the initial\n                      value\n\n:returns: the :class:`.CallbackStore` object associated with this callback.\n          Save a reference to this object; it being deconstructed cancels the\n          callback."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "registerSolenoidOutputCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when the solenoid output on a channel\nchanges.\n\n:param channel:       the channel to monitor\n:param callback:      the callback\n:param initialNotify: should the callback be run with the initial value\n\n:returns: the :class:`.CallbackStore` object associated with this callback.\n          Save a reference to this object; it being deconstructed cancels the\n          callback."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all simulation data for this object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputs",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "setAllSolenoidOutputs",
                    "returnType": "None",
                    "tooltip": "Change all of the solenoid outputs.\n\n:param outputs: the new solenoid outputs (1 bit per output)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "compressorCurrent",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "setCompressorCurrent",
                    "returnType": "None",
                    "tooltip": "Set the compressor current.\n\n:param compressorCurrent: the new compressor current"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "compressorOn",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "setCompressorOn",
                    "returnType": "None",
                    "tooltip": "Set whether the compressor is active.\n\n:param compressorOn: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Define whether the PCM/PH has been initialized.\n\n:param initialized: true for initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pressureSwitch",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "setPressureSwitch",
                    "returnType": "None",
                    "tooltip": "Set the value of the pressure switch.\n\n:param pressureSwitch: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "solenoidOutput",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "setSolenoidOutput",
                    "returnType": "None",
                    "tooltip": "Change the solenoid output on a specific channel.\n\n:param channel:        the channel to check\n:param solenoidOutput: the new solenoid output"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PneumaticsBaseSim",
                    "functionName": "getForType",
                    "returnType": "wpilib.simulation.PneumaticsBaseSim",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpilib.simulation.PowerDistributionSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PowerDistributionSim",
                    "tooltip": "Constructs from a PowerDistribution module number (CAN ID).\n\n:param module: module number"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "pdp",
                            "type": "wpilib.PowerDistribution"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.PowerDistributionSim",
                    "tooltip": "Constructs from a PowerDistribution object.\n\n:param pdp: PowerDistribution to simulate"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "getAllCurrents",
                    "returnType": "float",
                    "tooltip": "Read the current of all of the PowerDistribution channels.\n\n:param currents: output array; set to the current in each channel. The\n                 array must be big enough to hold all the PowerDistribution\n                 channels\n:param length:   length of output array"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "getCurrent",
                    "returnType": "float",
                    "tooltip": "Read the current in one of the PowerDistribution channels.\n\n:param channel: the channel to check\n\n:returns: the current in the given channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": "Check whether the PowerDistribution has been initialized.\n\n:returns: true if initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "getTemperature",
                    "returnType": "float",
                    "tooltip": "Check the temperature of the PowerDistribution.\n\n:returns: the PowerDistribution temperature"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "getVoltage",
                    "returnType": "float",
                    "tooltip": "Check the PowerDistribution voltage.\n\n:returns: the PowerDistribution voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "registerCurrentCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the current of a specific channel\nchanges.\n\n:param channel:       the channel\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when the PowerDistribution is initialized.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "registerTemperatureCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the PowerDistribution temperature\nchanges.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "registerVoltageCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the PowerDistribution voltage\nchanges.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all PowerDistribution simulation data."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "currents",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "setAllCurrents",
                    "returnType": "None",
                    "tooltip": "Change the current in all of the PowerDistribution channels.\n\n:param currents: array containing the current values for each channel. The\n                 array must be big enough to hold all the PowerDistribution\n                 channels\n:param length:   length of array"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "setCurrent",
                    "returnType": "None",
                    "tooltip": "Change the current in the given channel.\n\n:param channel: the channel to edit\n:param current: the new current for the channel"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": "Define whether the PowerDistribution has been initialized.\n\n:param initialized: whether this object is initialized"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "temperature",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "setTemperature",
                    "returnType": "None",
                    "tooltip": "Define the PowerDistribution temperature.\n\n:param temperature: the new PowerDistribution temperature"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.PowerDistributionSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltage",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.PowerDistributionSim",
                    "functionName": "setVoltage",
                    "returnType": "None",
                    "tooltip": "Set the PowerDistribution voltage.\n\n:param voltage: the new PowerDistribution voltage"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.REVPHSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.REVPHSim",
                    "tooltip": "Constructs with the default PCM module number (CAN ID)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.REVPHSim",
                    "tooltip": "Constructs from a PCM module number (CAN ID).\n\n:param module: module number"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "pneumatics",
                            "type": "wpilib.PneumaticsBase"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.REVPHSim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "getAllSolenoidOutputs",
                    "returnType": "int",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "getCompressorConfigType",
                    "returnType": "int",
                    "tooltip": "Check whether the closed loop compressor control is active.\n\n:returns: compressor config type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "getCompressorCurrent",
                    "returnType": "float",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "getCompressorOn",
                    "returnType": "bool",
                    "tooltip": "Check if the compressor is on.\n\n:returns: true if the compressor is active"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "getInitialized",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "getPressureSwitch",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "getSolenoidOutput",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "registerCompressorConfigTypeCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the closed loop state changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "registerCompressorCurrentCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "registerCompressorOnCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "registerInitializedCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "registerPressureSwitchCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "registerSolenoidOutputCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputs",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "setAllSolenoidOutputs",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "compressorConfigType",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "setCompressorConfigType",
                    "returnType": "None",
                    "tooltip": "Turn on/off the closed loop control of the compressor.\n\n:param compressorConfigType: compressor config type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "compressorCurrent",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "setCompressorCurrent",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "compressorOn",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "setCompressorOn",
                    "returnType": "None",
                    "tooltip": "Set whether the compressor is active.\n\n:param compressorOn: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "solenoidInitialized",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "setInitialized",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pressureSwitch",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "setPressureSwitch",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.REVPHSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "solenoidOutput",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "setSolenoidOutput",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.PneumaticsModuleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.REVPHSim",
                    "functionName": "getForType",
                    "returnType": "wpilib.simulation.PneumaticsBaseSim",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpilib.simulation.RoboRioSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.RoboRioSim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getBrownoutVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Measure the brownout voltage.\n\n:returns: the brownout voltage"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getCPUTemp",
                    "returnType": "wpimath.units.celsius",
                    "tooltip": "Get the cpu temp.\n\n:returns: the cpu temp."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getComments",
                    "returnType": "str",
                    "tooltip": "Get the comments.\n\n:returns: The comments."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getSerialNumber",
                    "returnType": "str",
                    "tooltip": "Get the serial number.\n\n:returns: The serial number."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getTeamNumber",
                    "returnType": "int",
                    "tooltip": "Get the team number.\n\n:returns: the team number."
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getUserActive3V3",
                    "returnType": "bool",
                    "tooltip": "Get the 3.3V rail active state.\n\n:returns: true if the 3.3V rail is active"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getUserCurrent3V3",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Measure the 3.3V rail current.\n\n:returns: the 3.3V rail current"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getUserFaults3V3",
                    "returnType": "int",
                    "tooltip": "Get the 3.3V rail number of faults.\n\n:returns: number of faults"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getUserVoltage3V3",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Measure the 3.3V rail voltage.\n\n:returns: the 3.3V rail voltage"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "getVInVoltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Measure the Vin voltage.\n\n:returns: the Vin voltage"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "registerBrownoutVoltageCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the brownout voltage changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "registerCPUTempCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the cpu temp changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "registerTeamNumberCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the team number changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "registerUserActive3V3Callback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the 3.3V rail active state changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "registerUserCurrent3V3Callback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the 3.3V rail current changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "registerUserFaults3V3Callback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the 3.3V rail number of faults\nchanges.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "registerUserVoltage3V3Callback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the 3.3V rail voltage changes.\n\n:param callback:      the callback\n:param initialNotify: whether the callback should be called with the\n                      initial value\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "registerVInVoltageCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run whenever the Vin voltage changes.\n\n:param callback:      the callback\n:param initialNotify: whether to call the callback with the initial state\n\n:returns: the CallbackStore object associated with this callback"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all simulation data."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "brownoutVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setBrownoutVoltage",
                    "returnType": "None",
                    "tooltip": "Define the brownout voltage.\n\n:param brownoutVoltage: the new voltage"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "cpuTemp",
                            "type": "wpimath.units.celsius"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setCPUTemp",
                    "returnType": "None",
                    "tooltip": "Define the cpu temp.\n\n:param cpuTemp: the new cpu temp."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "comments",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setComments",
                    "returnType": "None",
                    "tooltip": "Set the comments.\n\n:param comments: The comments."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "serialNumber",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setSerialNumber",
                    "returnType": "None",
                    "tooltip": "Set the serial number.\n\n:param serialNumber: The serial number."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "teamNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setTeamNumber",
                    "returnType": "None",
                    "tooltip": "Set the team number.\n\n:param teamNumber: the new team number."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "userActive3V3",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setUserActive3V3",
                    "returnType": "None",
                    "tooltip": "Set the 3.3V rail active state.\n\n:param userActive3V3: true to make rail active"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "userCurrent3V3",
                            "type": "wpimath.units.amperes"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setUserCurrent3V3",
                    "returnType": "None",
                    "tooltip": "Define the 3.3V rail current.\n\n:param userCurrent3V3: the new current"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "userFaults3V3",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setUserFaults3V3",
                    "returnType": "None",
                    "tooltip": "Set the 3.3V rail number of faults.\n\n:param userFaults3V3: number of faults"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "userVoltage3V3",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setUserVoltage3V3",
                    "returnType": "None",
                    "tooltip": "Define the 3.3V rail voltage.\n\n:param userVoltage3V3: the new voltage"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "vInVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.RoboRioSim",
                    "functionName": "setVInVoltage",
                    "returnType": "None",
                    "tooltip": "Define the Vin voltage.\n\n:param vInVoltage: the new voltage"
                }
            ]
        },
        {
            "className": "wpilib.simulation.SendableChooserSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "path",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SendableChooserSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SendableChooserSim",
                    "tooltip": "Constructs a SendableChooserSim.\n\n:param path: The path where the SendableChooser is published."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "inst",
                            "type": "ntcore.NetworkTableInstance"
                        },
                        {
                            "defaultValue": "",
                            "name": "path",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SendableChooserSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SendableChooserSim",
                    "tooltip": "Constructs a SendableChooserSim.\n\n:param inst: The NetworkTables instance.\n:param path: The path where the SendableChooser is published."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SendableChooserSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "option",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SendableChooserSim",
                    "functionName": "setSelected",
                    "returnType": "None",
                    "tooltip": "Set the selected option.\n\n:param option: The option."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.ServoSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "servo",
                            "type": "wpilib.Servo"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ServoSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.ServoSim",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ServoSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.ServoSim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ServoSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ServoSim",
                    "functionName": "getAngle",
                    "returnType": "float",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.ServoSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.ServoSim",
                    "functionName": "getPosition",
                    "returnType": "float",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.SharpIRSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "sharpIR",
                            "type": "wpilib.SharpIR"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SharpIRSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SharpIRSim",
                    "tooltip": "Constructor.\n\n:param sharpIR: The real sensor to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SharpIRSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SharpIRSim",
                    "tooltip": "Constructor.\n\n:param channel: Analog channel for this sensor"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SharpIRSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "range",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SharpIRSim",
                    "functionName": "setRange",
                    "returnType": "None",
                    "tooltip": "Set the range returned by the distance sensor.\n\n:param range: range of the target returned by the sensor"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.SimDeviceSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SimDeviceSim",
                    "tooltip": "Constructs a SimDeviceSim.\n\n:param name: name of the SimDevice"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SimDeviceSim",
                    "tooltip": "Constructs a SimDeviceSim.\n\n:param name:  name of the SimDevice\n:param index: device index number to append to name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "index",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SimDeviceSim",
                    "tooltip": "Constructs a SimDeviceSim.\n\n:param name:    name of the SimDevice\n:param index:   device index number to append to name\n:param channel: device channel number to append to name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "handle",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SimDeviceSim",
                    "tooltip": "Constructs a SimDeviceSim.\n\n:param handle: the low level handle for the corresponding SimDevice."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SimDeviceSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "enumerateValues",
                    "returnType": "list[tuple[str, bool]]",
                    "tooltip": "Returns a list of (name, readonly) tuples of available values for this device"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SimDeviceSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "getBoolean",
                    "returnType": "hal._wpiHal.SimBoolean",
                    "tooltip": "Retrieves an object that allows you to interact with simulated values\nrepresented as a boolean."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SimDeviceSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "getDouble",
                    "returnType": "hal._wpiHal.SimDouble",
                    "tooltip": "Retrieves an object that allows you to interact with simulated values\nrepresented as a double."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SimDeviceSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "getEnum",
                    "returnType": "hal._wpiHal.SimEnum",
                    "tooltip": "Get the property object with the given name.\n\n:param name: the property name\n\n:returns: the property object"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SimDeviceSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "getInt",
                    "returnType": "hal._wpiHal.SimInt",
                    "tooltip": "Retrieves an object that allows you to interact with simulated values\nrepresented as an integer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SimDeviceSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "getLong",
                    "returnType": "hal._wpiHal.SimLong",
                    "tooltip": "Retrieves an object that allows you to interact with simulated values\nrepresented as a long."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SimDeviceSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "getName",
                    "returnType": "str",
                    "tooltip": "Get the name of this object.\n\n:returns: name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SimDeviceSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "getValue",
                    "returnType": "hal._wpiHal.SimValue",
                    "tooltip": "Provides a readonly mechanism to retrieve all types of device values"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "''",
                            "name": "prefix",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "enumerateDevices",
                    "returnType": "list[str]",
                    "tooltip": "Returns a list of available device names"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "val",
                            "type": "hal._wpiHal.SimEnum"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "getEnumOptions",
                    "returnType": "list[str]",
                    "tooltip": "Get all options for the given enum.\n\n:param val: the enum\n\n:returns: names of the different values for that enum"
                },
                {
                    "args": [],
                    "declaringClassName": "wpilib.simulation.SimDeviceSim",
                    "functionName": "resetData",
                    "returnType": "None",
                    "tooltip": "Reset all SimDevice data."
                }
            ]
        },
        {
            "className": "wpilib.simulation.SingleJointedArmSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearbox",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "armLength",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "minAngle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxAngle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "simulateGravity",
                            "type": "bool"
                        },
                        {
                            "defaultValue": "",
                            "name": "startingAngle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "[0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(2)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SingleJointedArmSim",
                    "tooltip": "Creates a simulated arm mechanism.\n\n:param system:             The system representing this arm. This system can\n                           be created with\n                           LinearSystemId::SingleJointedArmSystem().\n:param gearbox:            The type and number of motors on the arm gearbox.\n:param gearing:            The gear ratio of the arm (numbers greater than 1\n                           represent reductions).\n:param armLength:          The length of the arm.\n:param minAngle:           The minimum angle that the arm is capable of.\n:param maxAngle:           The maximum angle that the arm is capable of.\n:param simulateGravity:    Whether gravity should be simulated or not.\n:param startingAngle:      The initial position of the arm.\n:param measurementStdDevs: The standard deviations of the measurements."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "gearbox",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "moi",
                            "type": "wpimath.units.kilogram_square_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "armLength",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "minAngle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxAngle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "simulateGravity",
                            "type": "bool"
                        },
                        {
                            "defaultValue": "",
                            "name": "startingAngle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "[0.0, 0.0]",
                            "name": "measurementStdDevs",
                            "type": "Annotated[list[typing.SupportsFloat], FixedSize(2)]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SingleJointedArmSim",
                    "tooltip": "Creates a simulated arm mechanism.\n\n:param gearbox:            The type and number of motors on the arm gearbox.\n:param gearing:            The gear ratio of the arm (numbers greater than 1\n                           represent reductions).\n:param moi:                The moment of inertia of the arm. This can be\n                           calculated from CAD software.\n:param armLength:          The length of the arm.\n:param minAngle:           The minimum angle that the arm is capable of.\n:param maxAngle:           The maximum angle that the arm is capable of.\n:param simulateGravity:    Whether gravity should be simulated or not.\n:param startingAngle:      The initial position of the arm.\n:param measurementStdDevs: The standard deviation of the measurement noise."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "getAngle",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Returns the current arm angle.\n\n:returns: The current arm angle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "getAngleDegrees",
                    "returnType": "wpimath.units.degrees",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "getCurrentDraw",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns the arm current draw.\n\n:returns: The arm current draw."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current input of the plant.\n\n:returns: The current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getInput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current input of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current input of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getOutput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current output of the plant.\n\n:returns: The current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "getOutput",
                    "returnType": "float",
                    "tooltip": "Returns an element of the current output of the plant.\n\n:param row: The row to return.\n\n:returns: An element of the current output of the plant."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "getVelocity",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Returns the current arm velocity.\n\n:returns: The current arm velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "getVelocityDps",
                    "returnType": "wpimath.units.degrees_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "hasHitLowerLimit",
                    "returnType": "bool",
                    "tooltip": "Returns whether the arm has hit the lower limit.\n\n:returns: Whether the arm has hit the lower limit."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "hasHitUpperLimit",
                    "returnType": "bool",
                    "tooltip": "Returns whether the arm has hit the upper limit.\n\n:returns: Whether the arm has hit the upper limit."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs (usually voltages).\n\n:param u: The system inputs."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "row",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "setInput",
                    "returnType": "None",
                    "tooltip": "Sets the system inputs.\n\n:param row:   The row in the input matrix to set.\n:param value: The value to set the row to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "setInputVoltage",
                    "returnType": "None",
                    "tooltip": "Sets the input voltage for the arm.\n\n:param voltage: The input voltage."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "setState",
                    "returnType": "None",
                    "tooltip": "Sets the arm's state. The new angle will be limited between the minimum and\nmaximum allowed limits.\n\n:param angle:    The new angle.\n:param velocity: The new angular velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.LinearSystemSim_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.LinearSystemSim_2_1_2",
                    "functionName": "update",
                    "returnType": "None",
                    "tooltip": "Updates the simulation.\n\n:param dt: The time between updates."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "armAngle",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "wouldHitLowerLimit",
                    "returnType": "bool",
                    "tooltip": "Returns whether the arm would hit the lower limit.\n\n:param armAngle: The arm height.\n\n:returns: Whether the arm would hit the lower limit."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SingleJointedArmSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "armAngle",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "wouldHitUpperLimit",
                    "returnType": "bool",
                    "tooltip": "Returns whether the arm would hit the upper limit.\n\n:param armAngle: The arm height.\n\n:returns: Whether the arm would hit the upper limit."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "length",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "mass",
                            "type": "wpimath.units.kilograms"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SingleJointedArmSim",
                    "functionName": "estimateMOI",
                    "returnType": "wpimath.units.kilogram_square_meters",
                    "tooltip": "Calculates a rough estimate of the moment of inertia of an arm given its\nlength and mass.\n\n:param length: The length of the arm.\n:param mass:   The mass of the arm.\n\n:returns: The calculated moment of inertia."
                }
            ]
        },
        {
            "className": "wpilib.simulation.SolenoidSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleSim",
                            "type": "wpilib.simulation.PneumaticsBaseSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SolenoidSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SolenoidSim",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "module",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.PneumaticsModuleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SolenoidSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SolenoidSim",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.PneumaticsModuleType"
                        },
                        {
                            "defaultValue": "",
                            "name": "channel",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SolenoidSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.SolenoidSim",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SolenoidSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SolenoidSim",
                    "functionName": "getModuleSim",
                    "returnType": "wpilib.simulation.PneumaticsBaseSim",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SolenoidSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SolenoidSim",
                    "functionName": "getOutput",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SolenoidSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "callback",
                            "type": "Callable[[str, hal._wpiHal.Value], None]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialNotify",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SolenoidSim",
                    "functionName": "registerOutputCallback",
                    "returnType": "wpilib.simulation.CallbackStore",
                    "tooltip": "Register a callback to be run when the output of this solenoid has changed.\n\n:param callback:      the callback\n:param initialNotify: whether to run the callback with the initial state\n\n:returns: the :class:`.CallbackStore` object associated with this callback.\n          Save a reference to this object; it being deconstructed cancels the\n          callback."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.SolenoidSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "output",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.SolenoidSim",
                    "functionName": "setOutput",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.StadiaControllerSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "joystick",
                            "type": "wpilib.StadiaController"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.StadiaControllerSim",
                    "tooltip": "Constructs from a StadiaController object.\n\n:param joystick: controller to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.StadiaControllerSim",
                    "tooltip": "Constructs from a joystick port number.\n\n:param port: port number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutput",
                    "returnType": "bool",
                    "tooltip": "Read the output of a button.\n\n:param outputNumber: the button number\n\n:returns: the value of the button (true = pressed)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutputs",
                    "returnType": "int",
                    "tooltip": "Get the encoded 16-bit integer that passes button values.\n\n:returns: the button values"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getRumble",
                    "returnType": "float",
                    "tooltip": "Get the joystick rumble.\n\n:param type: the rumble to read\n\n:returns: the rumble value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "notifyNewData",
                    "returnType": "None",
                    "tooltip": "Updates joystick data so that new values are visible to the user program."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setAButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the A button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisCount",
                    "returnType": "None",
                    "tooltip": "Set the axis count of this device.\n\n:param count: the new axis count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisType",
                    "returnType": "None",
                    "tooltip": "Set the type of an axis.\n\n:param axis: the axis\n:param type: the type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setBButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the B button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setButtonCount",
                    "returnType": "None",
                    "tooltip": "Set the button count of this device.\n\n:param count: the new button count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setEllipsesButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the ellipses button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setFrameButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the frame button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setGoogleButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the google button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setHamburgerButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the hamburger button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setLeftBumperButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the left bumper button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setLeftStickButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the left stick button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setLeftTriggerButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the left trigger button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setLeftX",
                    "returnType": "None",
                    "tooltip": "Change the left X value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setLeftY",
                    "returnType": "None",
                    "tooltip": "Change the left Y value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setName",
                    "returnType": "None",
                    "tooltip": "Set the name of this device.\n\n:param name: the new device name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of a given POV.\n\n:param pov:   the POV to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of the default POV (port 0).\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOVCount",
                    "returnType": "None",
                    "tooltip": "Set the POV count of this device.\n\n:param count: the new POV count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawAxis",
                    "returnType": "None",
                    "tooltip": "Set the value of a given axis.\n\n:param axis:  the axis to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawButton",
                    "returnType": "None",
                    "tooltip": "Set the value of a given button.\n\n:param button: the button to set\n:param value:  the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setRightBumperButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the right bumper button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setRightStickButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the right stick button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setRightTriggerButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the right trigger button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setRightX",
                    "returnType": "None",
                    "tooltip": "Change the right X value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setRightY",
                    "returnType": "None",
                    "tooltip": "Change the right Y value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setStadiaButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the stadia button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.HIDType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setType",
                    "returnType": "None",
                    "tooltip": "Set the type of this device.\n\n:param type: the new device type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setXButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the X button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.StadiaControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.StadiaControllerSim",
                    "functionName": "setYButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the Y button on the controller.\n\n:param value: the new value"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.simulation.XboxControllerSim",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "joystick",
                            "type": "wpilib.XboxController"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.XboxControllerSim",
                    "tooltip": "Constructs from a XboxController object.\n\n:param joystick: controller to simulate"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "port",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "__init__",
                    "returnType": "wpilib.simulation.XboxControllerSim",
                    "tooltip": "Constructs from a joystick port number.\n\n:param port: port number"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputNumber",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutput",
                    "returnType": "bool",
                    "tooltip": "Read the output of a button.\n\n:param outputNumber: the button number\n\n:returns: the value of the button (true = pressed)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getOutputs",
                    "returnType": "int",
                    "tooltip": "Get the encoded 16-bit integer that passes button values.\n\n:returns: the button values"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.RumbleType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "getRumble",
                    "returnType": "float",
                    "tooltip": "Get the joystick rumble.\n\n:param type: the rumble to read\n\n:returns: the rumble value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "notifyNewData",
                    "returnType": "None",
                    "tooltip": "Updates joystick data so that new values are visible to the user program."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setAButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the A button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisCount",
                    "returnType": "None",
                    "tooltip": "Set the axis count of this device.\n\n:param count: the new axis count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setAxisType",
                    "returnType": "None",
                    "tooltip": "Set the type of an axis.\n\n:param axis: the axis\n:param type: the type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setBButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the B button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setBackButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the back button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setButtonCount",
                    "returnType": "None",
                    "tooltip": "Set the button count of this device.\n\n:param count: the new button count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setLeftBumperButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the left bumper button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setLeftStickButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the left stick button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setLeftTriggerAxis",
                    "returnType": "None",
                    "tooltip": "Change the value of the left trigger axis on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setLeftX",
                    "returnType": "None",
                    "tooltip": "Change the left X value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setLeftY",
                    "returnType": "None",
                    "tooltip": "Change the left Y value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setName",
                    "returnType": "None",
                    "tooltip": "Set the name of this device.\n\n:param name: the new device name"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "pov",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of a given POV.\n\n:param pov:   the POV to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpilib.DriverStation.POVDirection"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOV",
                    "returnType": "None",
                    "tooltip": "Set the value of the default POV (port 0).\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "count",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setPOVCount",
                    "returnType": "None",
                    "tooltip": "Set the POV count of this device.\n\n:param count: the new POV count"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawAxis",
                    "returnType": "None",
                    "tooltip": "Set the value of a given axis.\n\n:param axis:  the axis to set\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "button",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setRawButton",
                    "returnType": "None",
                    "tooltip": "Set the value of a given button.\n\n:param button: the button to set\n:param value:  the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setRightBumperButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the right bumper button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setRightStickButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the right stick button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setRightTriggerAxis",
                    "returnType": "None",
                    "tooltip": "Change the value of the right trigger axis on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setRightX",
                    "returnType": "None",
                    "tooltip": "Change the right X value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setRightY",
                    "returnType": "None",
                    "tooltip": "Change the right Y value of the controller's joystick.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setStartButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the start button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.GenericHIDSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpilib.interfaces.GenericHID.HIDType"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.GenericHIDSim",
                    "functionName": "setType",
                    "returnType": "None",
                    "tooltip": "Set the type of this device.\n\n:param type: the new device type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setXButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the X button on the controller.\n\n:param value: the new value"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.simulation.XboxControllerSim"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpilib.simulation.XboxControllerSim",
                    "functionName": "setYButton",
                    "returnType": "None",
                    "tooltip": "Change the value of the Y button on the controller.\n\n:param value: the new value"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.simulation",
            "staticMethods": []
        },
        {
            "className": "wpilib.sysid.State",
            "classVariables": [
                {
                    "name": "kDynamicForward",
                    "tooltip": "",
                    "type": "wpilib.sysid.State",
                    "writable": false
                },
                {
                    "name": "kDynamicReverse",
                    "tooltip": "",
                    "type": "wpilib.sysid.State",
                    "writable": false
                },
                {
                    "name": "kNone",
                    "tooltip": "",
                    "type": "wpilib.sysid.State",
                    "writable": false
                },
                {
                    "name": "kQuasistaticForward",
                    "tooltip": "",
                    "type": "wpilib.sysid.State",
                    "writable": false
                },
                {
                    "name": "kQuasistaticReverse",
                    "tooltip": "",
                    "type": "wpilib.sysid.State",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.State",
                    "functionName": "__init__",
                    "returnType": "wpilib.sysid.State",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpilib.sysid",
            "staticMethods": []
        },
        {
            "className": "wpilib.sysid.SysIdRoutineLog",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "logName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog",
                    "functionName": "__init__",
                    "returnType": "wpilib.sysid.SysIdRoutineLog",
                    "tooltip": "Create a new logging utility for a SysId test routine.\n\n:param logName: The name for the test routine in the log. Should be unique\n                between complete test routines (quasistatic and dynamic, forward and\n                reverse). The current state of this test (e.g. \"quasistatic-forward\")\n                will appear in WPILog under the \"sysid-test-state-logName\" entry."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "motorName",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog",
                    "functionName": "motor",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log data from a motor during a SysId routine.\n\n:param motorName: The name of the motor.\n\n:returns: Handle with chainable callbacks to log individual data fields."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "wpilib.sysid.State"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog",
                    "functionName": "recordState",
                    "returnType": "None",
                    "tooltip": "Records the current state of the SysId test routine. Should be called once\nper iteration during tests with the type of the current test, and once upon\ntest end with state `none`.\n\n:param state: The current state of the SysId test routine."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.sysid",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "state",
                            "type": "wpilib.sysid.State"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog",
                    "functionName": "stateEnumToString",
                    "returnType": "str",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpilib.sysid.SysIdRoutineLog.MotorLog",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "__init__",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "acceleration",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log the linear acceleration of the motor.\n\nThis is optional; SysId can perform an accurate fit without it.\n\n:param acceleration: The linear acceleration to record.\n\n:returns: The motor log (for call chaining)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.turns_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "angularAcceleration",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log the angular acceleration of the motor.\n\nThis is optional; SysId can perform an accurate fit without it.\n\n:param acceleration: The angular acceleration to record.\n\n:returns: The motor log (for call chaining)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "position",
                            "type": "wpimath.units.turns"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "angularPosition",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log the angular position of the motor.\n\n:param position: The angular position to record.\n\n:returns: The motor log (for call chaining)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.turns_per_second"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "angularVelocity",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log the angular velocity of the motor.\n\n:param velocity: The angular velocity to record.\n\n:returns: The motor log (for call chaining)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.units.amperes"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "current",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log the current applied to the motor.\n\nThis is optional; SysId can perform an accurate fit without it.\n\n:param current: The current to record.\n\n:returns: The motor log (for call chaining)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "position",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "position",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log the linear position of the motor.\n\n:param position: The linear position to record.\n\n:returns: The motor log (for call chaining)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "name",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "unit",
                            "type": "str"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "value",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log a generic data value from the motor.\n\n:param name:  The name of the data field being recorded.\n:param value: The numeric value of the data field.\n:param unit:  The unit string of the data field.\n\n:returns: The motor log (for call chaining)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "velocity",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log the linear velocity of the motor.\n\n:param velocity: The linear velocity to record.\n\n:returns: The motor log (for call chaining)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpilib.sysid.SysIdRoutineLog.MotorLog"
                        },
                        {
                            "defaultValue": "",
                            "name": "voltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "functionName": "voltage",
                    "returnType": "wpilib.sysid.SysIdRoutineLog.MotorLog",
                    "tooltip": "Log the voltage applied to the motor.\n\n:param voltage: The voltage to record.\n\n:returns: The motor log (for call chaining)."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpilib.sysid",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ArmFeedforward",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kS",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "kG",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_radian"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_radian"
                        },
                        {
                            "defaultValue": "0.02",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ArmFeedforward",
                    "tooltip": "Creates a new ArmFeedforward with the specified gains.\n\n:param kS: The static gain, in volts.\n:param kG: The gravity gain, in volts.\n:param kV: The velocity gain, in volt seconds per radian.\n:param kA: The acceleration gain, in volt seconds\u00b2 per radian.\n:param dt: The period in seconds.\n           @throws IllegalArgumentException for kv &lt; zero.\n           @throws IllegalArgumentException for ka &lt; zero.\n           @throws IllegalArgumentException for period &le; zero."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentAngle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentVelocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculates the feedforward from the gains and setpoint assuming discrete\ncontrol. Use this method when the velocity does not change.\n\n:param currentAngle:    The current angle. This angle should be measured from\n                        the horizontal (i.e. if the provided angle is 0, the arm should be parallel\n                        to the floor). If your encoder does not follow this convention, an offset\n                        should be added.\n:param currentVelocity: The current velocity.\n\n:returns: The computed feedforward in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentAngle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentVelocity",
                            "type": "wpimath.units.radians_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextVelocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculates the feedforward from the gains and setpoints assuming discrete\ncontrol.\n\n:param currentAngle:    The current angle. This angle should be measured from\n                        the horizontal (i.e. if the provided angle is 0, the arm should be parallel\n                        to the floor). If your encoder does not follow this convention, an offset\n                        should be added.\n:param currentVelocity: The current velocity.\n:param nextVelocity:    The next velocity.\n\n:returns: The computed feedforward in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "getKa",
                    "returnType": "wpimath.units.volt_seconds_squared_per_radian",
                    "tooltip": "Returns the acceleration gain.\n\n:returns: The acceleration gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "getKg",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the gravity gain.\n\n:returns: The gravity gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "getKs",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the static gain.\n\n:returns: The static gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "getKv",
                    "returnType": "wpimath.units.volt_seconds_per_radian",
                    "tooltip": "Returns the velocity gain.\n\n:returns: The velocity gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "maxAchievableAcceleration",
                    "returnType": "wpimath.units.radians_per_second_squared",
                    "tooltip": "Calculates the maximum achievable acceleration given a maximum voltage\nsupply, a position, and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the arm.\n:param angle:      The angle of the arm. This angle should be measured\n                   from the horizontal (i.e. if the provided angle is 0,\n                   the arm should be parallel to the floor). If your\n                   encoder does not follow this convention, an offset\n                   should be added.\n:param velocity:   The velocity of the arm.\n\n:returns: The maximum possible acceleration at the given velocity and angle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.radians_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "maxAchievableVelocity",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Calculates the maximum achievable velocity given a maximum voltage supply,\na position, and an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the arm.\n:param angle:        The angle of the arm. This angle should be measured\n                     from the horizontal (i.e. if the provided angle is 0,\n                     the arm should be parallel to the floor). If your\n                     encoder does not follow this convention, an offset\n                     should be added.\n:param acceleration: The acceleration of the arm.\n\n:returns: The maximum possible velocity at the given acceleration and angle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "minAchievableAcceleration",
                    "returnType": "wpimath.units.radians_per_second_squared",
                    "tooltip": "Calculates the minimum achievable acceleration given a maximum voltage\nsupply, a position, and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the arm.\n:param angle:      The angle of the arm. This angle should be measured\n                   from the horizontal (i.e. if the provided angle is 0,\n                   the arm should be parallel to the floor). If your\n                   encoder does not follow this convention, an offset\n                   should be added.\n:param velocity:   The velocity of the arm.\n\n:returns: The minimum possible acceleration at the given velocity and angle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.radians_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "minAchievableVelocity",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Calculates the minimum achievable velocity given a maximum voltage supply,\na position, and an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the arm.\n:param angle:        The angle of the arm. This angle should be measured\n                     from the horizontal (i.e. if the provided angle is 0,\n                     the arm should be parallel to the floor). If your\n                     encoder does not follow this convention, an offset\n                     should be added.\n:param acceleration: The acceleration of the arm.\n\n:returns: The minimum possible velocity at the given acceleration and angle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_radian"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "setKa",
                    "returnType": "None",
                    "tooltip": "Sets the acceleration gain.\n\n:param kA: The acceleration gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "kG",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "setKg",
                    "returnType": "None",
                    "tooltip": "Sets the gravity gain.\n\n:param kG: The gravity gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "kS",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "setKs",
                    "returnType": "None",
                    "tooltip": "Sets the static gain.\n\n:param kS: The static gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ArmFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_radian"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ArmFeedforward",
                    "functionName": "setKv",
                    "returnType": "None",
                    "tooltip": "Sets the velocity gain.\n\n:param kV: The velocity gain."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.BangBangController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "inf",
                            "name": "tolerance",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.BangBangController",
                    "tooltip": "Creates a new bang-bang controller.\n\nAlways ensure that your motor controllers are set to \"coast\" before\nattempting to control them with a bang-bang controller.\n\n:param tolerance: Tolerance for atSetpoint."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "atSetpoint",
                    "returnType": "bool",
                    "tooltip": "Returns true if the error is within the tolerance of the setpoint.\n\n:returns: Whether the error is within the acceptable bounds."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "setpoint",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the calculated control output.\n\nAlways ensure that your motor controllers are set to \"coast\" before\nattempting to control them with a bang-bang controller.\n\n:param measurement: The most recent measurement of the process variable.\n:param setpoint:    The setpoint for the process variable.\n\n:returns: The calculated motor output (0 or 1)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the calculated control output.\n\n:param measurement: The most recent measurement of the process variable.\n\n:returns: The calculated motor output (0 or 1)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "getError",
                    "returnType": "float",
                    "tooltip": "Returns the current error.\n\n:returns: The current error."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "getMeasurement",
                    "returnType": "float",
                    "tooltip": "Returns the current measurement of the process variable.\n\n:returns: The current measurement of the process variable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "getSetpoint",
                    "returnType": "float",
                    "tooltip": "Returns the current setpoint of the bang-bang controller.\n\n:returns: The current setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "getTolerance",
                    "returnType": "float",
                    "tooltip": "Returns the current tolerance of the controller.\n\n:returns: The current tolerance."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        },
                        {
                            "defaultValue": "",
                            "name": "setpoint",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "setSetpoint",
                    "returnType": "None",
                    "tooltip": "Sets the setpoint for the bang-bang controller.\n\n:param setpoint: The desired setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.BangBangController"
                        },
                        {
                            "defaultValue": "",
                            "name": "tolerance",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.BangBangController",
                    "functionName": "setTolerance",
                    "returnType": "None",
                    "tooltip": "Sets the error within which AtSetpoint will return true.\n\n:param tolerance: Position error which is tolerable."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "tooltip": "Constructs a feedforward with given model dynamics as a function\nof state and input.\n\n:param f:  A vector-valued function of x, the state, and\n           u, the input, that returns the derivative of\n           the state vector. HAS to be control-affine\n           (of the form f(x) + Bu).\n:param dt: The timestep between calls of calculate()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "tooltip": "Constructs a feedforward with given model dynamics as a function of state,\nand the plant's B matrix(continuous input matrix).\n\n:param f:  A vector-valued function of x, the state,\n           that returns the derivative of the state vector.\n:param B:  Continuous input matrix of the plant being controlled.\n:param dt: The timestep between calls of calculate()."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current reference vector r.\n\n:returns: The current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Calculate the feedforward with only the desired\nfuture reference. This uses the internally stored \"current\"\nreference.\n\nIf this method is used the initial state of the system is the one set using\nReset(const StateVector&). If the initial state is not\nset it defaults to a zero vector.\n\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Calculate the feedforward with current and future reference vectors.\n\n:param r:     The reference state of the current timestep (k).\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a specified initial state vector.\n\n:param initialState: The initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a zero initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "uff",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the previously calculated feedforward as an input vector.\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_1_1",
                    "functionName": "uff",
                    "returnType": "float",
                    "tooltip": "Returns an element of the previously calculated feedforward.\n\n:param i: Row of uff.\n\n:returns: The row of the calculated feedforward."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "tooltip": "Constructs a feedforward with given model dynamics as a function\nof state and input.\n\n:param f:  A vector-valued function of x, the state, and\n           u, the input, that returns the derivative of\n           the state vector. HAS to be control-affine\n           (of the form f(x) + Bu).\n:param dt: The timestep between calls of calculate()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "tooltip": "Constructs a feedforward with given model dynamics as a function of state,\nand the plant's B matrix(continuous input matrix).\n\n:param f:  A vector-valued function of x, the state,\n           that returns the derivative of the state vector.\n:param B:  Continuous input matrix of the plant being controlled.\n:param dt: The timestep between calls of calculate()."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current reference vector r.\n\n:returns: The current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Calculate the feedforward with only the desired\nfuture reference. This uses the internally stored \"current\"\nreference.\n\nIf this method is used the initial state of the system is the one set using\nReset(const StateVector&). If the initial state is not\nset it defaults to a zero vector.\n\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Calculate the feedforward with current and future reference vectors.\n\n:param r:     The reference state of the current timestep (k).\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a specified initial state vector.\n\n:param initialState: The initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a zero initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "uff",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the previously calculated feedforward as an input vector.\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_1",
                    "functionName": "uff",
                    "returnType": "float",
                    "tooltip": "Returns an element of the previously calculated feedforward.\n\n:param i: Row of uff.\n\n:returns: The row of the calculated feedforward."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "tooltip": "Constructs a feedforward with given model dynamics as a function\nof state and input.\n\n:param f:  A vector-valued function of x, the state, and\n           u, the input, that returns the derivative of\n           the state vector. HAS to be control-affine\n           (of the form f(x) + Bu).\n:param dt: The timestep between calls of calculate()."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "tooltip": "Constructs a feedforward with given model dynamics as a function of state,\nand the plant's B matrix(continuous input matrix).\n\n:param f:  A vector-valued function of x, the state,\n           that returns the derivative of the state vector.\n:param B:  Continuous input matrix of the plant being controlled.\n:param dt: The timestep between calls of calculate()."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current reference vector r.\n\n:returns: The current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Calculate the feedforward with only the desired\nfuture reference. This uses the internally stored \"current\"\nreference.\n\nIf this method is used the initial state of the system is the one set using\nReset(const StateVector&). If the initial state is not\nset it defaults to a zero vector.\n\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Calculate the feedforward with current and future reference vectors.\n\n:param r:     The reference state of the current timestep (k).\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a specified initial state vector.\n\n:param initialState: The initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a zero initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "uff",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the previously calculated feedforward as an input vector.\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ControlAffinePlantInversionFeedforward_2_2",
                    "functionName": "uff",
                    "returnType": "float",
                    "tooltip": "Returns an element of the previously calculated feedforward.\n\n:param i: Row of uff.\n\n:returns: The row of the calculated feedforward."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.DifferentialDriveAccelerationLimiter",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "trackwidth",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxLinearAccel",
                            "type": "wpimath.units.meters_per_second_squared"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxAngularAccel",
                            "type": "wpimath.units.radians_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.DifferentialDriveAccelerationLimiter",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.DifferentialDriveAccelerationLimiter",
                    "tooltip": "Constructs a DifferentialDriveAccelerationLimiter.\n\n:param system:          The differential drive dynamics.\n:param trackwidth:      The distance between the differential drive's left and\n                        right wheels.\n:param maxLinearAccel:  The maximum linear acceleration.\n:param maxAngularAccel: The maximum angular acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "system",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "trackwidth",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "minLinearAccel",
                            "type": "wpimath.units.meters_per_second_squared"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxLinearAccel",
                            "type": "wpimath.units.meters_per_second_squared"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxAngularAccel",
                            "type": "wpimath.units.radians_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.DifferentialDriveAccelerationLimiter",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.DifferentialDriveAccelerationLimiter",
                    "tooltip": "Constructs a DifferentialDriveAccelerationLimiter.\n\n:param system:          The differential drive dynamics.\n:param trackwidth:      The distance between the differential drive's left and\n                        right wheels.\n:param minLinearAccel:  The minimum (most negative) linear acceleration.\n:param maxLinearAccel:  The maximum (most positive) linear acceleration.\n:param maxAngularAccel: The maximum angular acceleration.\n                        @throws std::invalid_argument if minimum linear acceleration is greater\n                        than maximum linear acceleration"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.DifferentialDriveAccelerationLimiter"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.DifferentialDriveAccelerationLimiter",
                    "functionName": "calculate",
                    "returnType": "wpimath.controller.DifferentialDriveWheelVoltages",
                    "tooltip": "Returns the next voltage pair subject to acceleration constraints.\n\n:param leftVelocity:  The left wheel velocity.\n:param rightVelocity: The right wheel velocity.\n:param leftVoltage:   The unconstrained left motor voltage.\n:param rightVoltage:  The unconstrained right motor voltage.\n\n:returns: The constrained wheel voltages."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.DifferentialDriveWheelVoltages",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "left",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "0",
                            "name": "right",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.DifferentialDriveWheelVoltages",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.DifferentialDriveWheelVoltages",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "left",
                    "tooltip": "Left wheel voltage.",
                    "type": "wpimath.units.volts",
                    "writable": true
                },
                {
                    "name": "right",
                    "tooltip": "Right wheel voltage.",
                    "type": "wpimath.units.volts",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ElevatorFeedforward",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kS",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "kG",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        },
                        {
                            "defaultValue": "0.02",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ElevatorFeedforward",
                    "tooltip": "Creates a new ElevatorFeedforward with the specified gains.\n\n:param kS: The static gain, in volts.\n:param kG: The gravity gain, in volts.\n:param kV: The velocity gain, in volt seconds per distance.\n:param kA: The acceleration gain, in volt seconds\u00b2 per distance.\n:param dt: The period in seconds.\n           @throws IllegalArgumentException for kv &lt; zero.\n           @throws IllegalArgumentException for ka &lt; zero.\n           @throws IllegalArgumentException for period &le; zero."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentVelocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculates the feedforward from the gains and setpoint assuming discrete\ncontrol. Use this method when the setpoint does not change.\n\n:param currentVelocity: The velocity setpoint.\n\n:returns: The computed feedforward, in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextVelocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculates the feedforward from the gains and setpoints assuming discrete\ncontrol.\n\nNote this method is inaccurate when the velocity crosses 0.\n\n:param currentVelocity: The current velocity setpoint.\n:param nextVelocity:    The next velocity setpoint.\n\n:returns: The computed feedforward, in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "getKa",
                    "returnType": "wpimath.units.volt_seconds_squared_per_meter",
                    "tooltip": "Returns the acceleration gain.\n\n:returns: The acceleration gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "getKg",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the gravity gain.\n\n:returns: The gravity gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "getKs",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the static gain.\n\n:returns: The static gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "getKv",
                    "returnType": "wpimath.units.volt_seconds_per_meter",
                    "tooltip": "Returns the velocity gain.\n\n:returns: The velocity gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "maxAchievableAcceleration",
                    "returnType": "wpimath.units.meters_per_second_squared",
                    "tooltip": "Calculates the maximum achievable acceleration given a maximum voltage\nsupply and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the elevator.\n:param velocity:   The velocity of the elevator.\n\n:returns: The maximum possible acceleration at the given velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "maxAchievableVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Calculates the maximum achievable velocity given a maximum voltage supply\nand an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the elevator.\n:param acceleration: The acceleration of the elevator.\n\n:returns: The maximum possible velocity at the given acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "minAchievableAcceleration",
                    "returnType": "wpimath.units.meters_per_second_squared",
                    "tooltip": "Calculates the minimum achievable acceleration given a maximum voltage\nsupply and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the elevator.\n:param velocity:   The velocity of the elevator.\n\n:returns: The minimum possible acceleration at the given velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "minAchievableVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Calculates the minimum achievable velocity given a maximum voltage supply\nand an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the elevator.\n:param acceleration: The acceleration of the elevator.\n\n:returns: The minimum possible velocity at the given acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "setKa",
                    "returnType": "None",
                    "tooltip": "Sets the acceleration gain.\n\n:param kA: The acceleration gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "kG",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "setKg",
                    "returnType": "None",
                    "tooltip": "Sets the gravity gain.\n\n:param kG: The gravity gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "kS",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "setKs",
                    "returnType": "None",
                    "tooltip": "Sets the static gain.\n\n:param kS: The static gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ElevatorFeedforward"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ElevatorFeedforward",
                    "functionName": "setKv",
                    "returnType": "None",
                    "tooltip": "Sets the velocity gain.\n\n:param kV: The velocity gain."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.HolonomicDriveController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "xController",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "yController",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "thetaController",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.HolonomicDriveController",
                    "tooltip": "Constructs a holonomic drive controller.\n\n:param xController:     A PID Controller to respond to error in the\n                        field-relative x direction.\n:param yController:     A PID Controller to respond to error in the\n                        field-relative y direction.\n:param thetaController: A profiled PID controller to respond to error in\n                        angle."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.HolonomicDriveController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "atReference",
                    "returnType": "bool",
                    "tooltip": "Returns true if the pose error is within tolerance of the reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.HolonomicDriveController"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "trajectoryPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredLinearVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredHeading",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "calculate",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Returns the next output of the holonomic drive controller.\n\n:param currentPose:           The current pose, as measured by odometry or pose\n                              estimator.\n:param trajectoryPose:        The desired trajectory pose, as sampled for the\n                              current timestep.\n:param desiredLinearVelocity: The desired linear velocity.\n:param desiredHeading:        The desired heading.\n\n:returns: The next output of the holonomic drive controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.HolonomicDriveController"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredState",
                            "type": "wpimath.trajectory.Trajectory.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredHeading",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "calculate",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Returns the next output of the holonomic drive controller.\n\n:param currentPose:    The current pose, as measured by odometry or pose\n                       estimator.\n:param desiredState:   The desired trajectory pose, as sampled for the current\n                       timestep.\n:param desiredHeading: The desired heading.\n\n:returns: The next output of the holonomic drive controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.HolonomicDriveController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "getThetaController",
                    "returnType": "wpimath.controller.ProfiledPIDControllerRadians",
                    "tooltip": "Returns the rotation ProfiledPIDController"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.HolonomicDriveController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "getXController",
                    "returnType": "wpimath.controller.PIDController",
                    "tooltip": "Returns the X PIDController"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.HolonomicDriveController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "getYController",
                    "returnType": "wpimath.controller.PIDController",
                    "tooltip": "Returns the Y PIDController"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.HolonomicDriveController"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "setEnabled",
                    "returnType": "None",
                    "tooltip": "Enables and disables the controller for troubleshooting purposes. When\nCalculate() is called on a disabled controller, only feedforward values\nare returned.\n\n:param enabled: If the controller is enabled or not."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.HolonomicDriveController"
                        },
                        {
                            "defaultValue": "",
                            "name": "tolerance",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.HolonomicDriveController",
                    "functionName": "setTolerance",
                    "returnType": "None",
                    "tooltip": "Sets the pose error which is considered tolerable for use with\nAtReference().\n\n:param tolerance: Pose error which is tolerable."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ImplicitModelFollower_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Aref",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Bref",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_1_1",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:    Continuous system matrix of the plant being controlled.\n:param B:    Continuous input matrix of the plant being controlled.\n:param Aref: Continuous system matrix whose dynamics should be followed.\n:param Bref: Continuous input matrix whose dynamics should be followed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_1_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_1_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_1_1",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_1_1",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the control input vector u.\n\n:returns: The control input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_1_1",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the control input vector u.\n\n:param i: Row of u.\n\n:returns: The row of the control input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_1_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x: The current state x.\n:param u: The current input for the original model."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the controller."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ImplicitModelFollower_2_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Aref",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Bref",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_2_1",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:    Continuous system matrix of the plant being controlled.\n:param B:    Continuous input matrix of the plant being controlled.\n:param Aref: Continuous system matrix whose dynamics should be followed.\n:param Bref: Continuous input matrix whose dynamics should be followed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_2_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_2_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_2_1",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_1",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the control input vector u.\n\n:returns: The control input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_1",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the control input vector u.\n\n:param i: Row of u.\n\n:returns: The row of the control input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x: The current state x.\n:param u: The current input for the original model."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the controller."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ImplicitModelFollower_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Aref",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Bref",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_2_2",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:    Continuous system matrix of the plant being controlled.\n:param B:    Continuous input matrix of the plant being controlled.\n:param Aref: Continuous system matrix whose dynamics should be followed.\n:param Bref: Continuous input matrix whose dynamics should be followed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_2_2",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_2_2",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "plantRef",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ImplicitModelFollower_2_2",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_2",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the control input vector u.\n\n:returns: The control input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_2",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the control input vector u.\n\n:param i: Row of u.\n\n:returns: The row of the control input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x: The current state x.\n:param u: The current input for the original model."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ImplicitModelFollower_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ImplicitModelFollower_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the controller."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LTVDifferentialDriveController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "trackwidth",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "Qelems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Relems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVDifferentialDriveController",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LTVDifferentialDriveController",
                    "tooltip": "Constructs a linear time-varying differential drive controller.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-intro.html#lqr-tuning\nfor how to select the tolerances.\n\n:param plant:      The differential drive velocity plant.\n:param trackwidth: The distance between the differential drive's left and\n                   right wheels.\n:param Qelems:     The maximum desired error tolerance for each state.\n:param Relems:     The maximum desired control effort for each input.\n:param dt:         Discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVDifferentialDriveController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVDifferentialDriveController",
                    "functionName": "atReference",
                    "returnType": "bool",
                    "tooltip": "Returns true if the pose error is within tolerance of the reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVDifferentialDriveController"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "poseRef",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftVelocityRef",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightVelocityRef",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVDifferentialDriveController",
                    "functionName": "calculate",
                    "returnType": "wpimath.controller.DifferentialDriveWheelVoltages",
                    "tooltip": "Returns the left and right output voltages of the LTV controller.\n\nThe reference pose, linear velocity, and angular velocity should come from\na drivetrain trajectory.\n\n:param currentPose:      The current pose.\n:param leftVelocity:     The current left velocity.\n:param rightVelocity:    The current right velocity.\n:param poseRef:          The desired pose.\n:param leftVelocityRef:  The desired left velocity.\n:param rightVelocityRef: The desired right velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVDifferentialDriveController"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredState",
                            "type": "wpimath.trajectory.Trajectory.State"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVDifferentialDriveController",
                    "functionName": "calculate",
                    "returnType": "wpimath.controller.DifferentialDriveWheelVoltages",
                    "tooltip": "Returns the left and right output voltages of the LTV controller.\n\nThe reference pose, linear velocity, and angular velocity should come from\na drivetrain trajectory.\n\n:param currentPose:   The current pose.\n:param leftVelocity:  The left velocity.\n:param rightVelocity: The right velocity.\n:param desiredState:  The desired pose, linear velocity, and angular velocity\n                      from a trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVDifferentialDriveController"
                        },
                        {
                            "defaultValue": "",
                            "name": "poseTolerance",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftVelocityTolerance",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightVelocityTolerance",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVDifferentialDriveController",
                    "functionName": "setTolerance",
                    "returnType": "None",
                    "tooltip": "Sets the pose error which is considered tolerable for use with\nAtReference().\n\n:param poseTolerance:          Pose error which is tolerable.\n:param leftVelocityTolerance:  Left velocity error which is tolerable.\n:param rightVelocityTolerance: Right velocity error which is tolerable."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LTVUnicycleController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVUnicycleController",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LTVUnicycleController",
                    "tooltip": "Constructs a linear time-varying unicycle controller with default maximum\ndesired error tolerances of (x = 0.0625 m, y = 0.125 m, heading = 2 rad)\nand default maximum desired control effort of (linear velocity = 1 m/s,\nangular velocity = 2 rad/s).\n\n:param dt: Discretization timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "Qelems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Relems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVUnicycleController",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LTVUnicycleController",
                    "tooltip": "Constructs a linear time-varying unicycle controller.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-intro.html#lqr-tuning\nfor how to select the tolerances.\n\n:param Qelems: The maximum desired error tolerance for each state (x, y,\n               heading).\n:param Relems: The maximum desired control effort for each input (linear\n               velocity, angular velocity).\n:param dt:     Discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVUnicycleController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVUnicycleController",
                    "functionName": "atReference",
                    "returnType": "bool",
                    "tooltip": "Returns true if the pose error is within tolerance of the reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVUnicycleController"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "poseRef",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "linearVelocityRef",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "angularVelocityRef",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVUnicycleController",
                    "functionName": "calculate",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Returns the linear and angular velocity outputs of the LTV controller.\n\nThe reference pose, linear velocity, and angular velocity should come from\na drivetrain trajectory.\n\n:param currentPose:        The current pose.\n:param poseRef:            The desired pose.\n:param linearVelocityRef:  The desired linear velocity.\n:param angularVelocityRef: The desired angular velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVUnicycleController"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredState",
                            "type": "wpimath.trajectory.Trajectory.State"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVUnicycleController",
                    "functionName": "calculate",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Returns the linear and angular velocity outputs of the LTV controller.\n\nThe reference pose, linear velocity, and angular velocity should come from\na drivetrain trajectory.\n\n:param currentPose:  The current pose.\n:param desiredState: The desired pose, linear velocity, and angular velocity\n                     from a trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVUnicycleController"
                        },
                        {
                            "defaultValue": "",
                            "name": "enabled",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVUnicycleController",
                    "functionName": "setEnabled",
                    "returnType": "None",
                    "tooltip": "Enables and disables the controller for troubleshooting purposes.\n\n:param enabled: If the controller is enabled or not."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LTVUnicycleController"
                        },
                        {
                            "defaultValue": "",
                            "name": "poseTolerance",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LTVUnicycleController",
                    "functionName": "setTolerance",
                    "returnType": "None",
                    "tooltip": "Sets the pose error which is considered tolerable for use with\nAtReference().\n\n:param poseTolerance: Pose error which is tolerable."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "tooltip": "Constructs a feedforward with the given coefficients.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param dt: Discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the current reference vector r.\n\n:returns: The current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Calculate the feedforward with only the desired\nfuture reference. This uses the internally stored \"current\"\nreference.\n\nIf this method is used the initial state of the system is the one set using\nReset(const StateVector&). If the initial state is not\nset it defaults to a zero vector.\n\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Calculate the feedforward with current and future reference vectors.\n\n:param r:     The reference state of the current timestep (k).\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a specified initial state vector.\n\n:param initialState: The initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a zero initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "uff",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the previously calculated feedforward as an input vector.\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_1_1",
                    "functionName": "uff",
                    "returnType": "float",
                    "tooltip": "Returns an element of the previously calculated feedforward.\n\n:param i: Row of uff.\n\n:returns: The row of the calculated feedforward."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "tooltip": "Constructs a feedforward with the given coefficients.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param dt: Discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current reference vector r.\n\n:returns: The current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Calculate the feedforward with only the desired\nfuture reference. This uses the internally stored \"current\"\nreference.\n\nIf this method is used the initial state of the system is the one set using\nReset(const StateVector&). If the initial state is not\nset it defaults to a zero vector.\n\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Calculate the feedforward with current and future reference vectors.\n\n:param r:     The reference state of the current timestep (k).\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a specified initial state vector.\n\n:param initialState: The initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a zero initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "uff",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the previously calculated feedforward as an input vector.\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_1",
                    "functionName": "uff",
                    "returnType": "float",
                    "tooltip": "Returns an element of the previously calculated feedforward.\n\n:param i: Row of uff.\n\n:returns: The row of the calculated feedforward."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "tooltip": "Constructs a feedforward with the given coefficients.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param dt: Discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the current reference vector r.\n\n:returns: The current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Calculate the feedforward with only the desired\nfuture reference. This uses the internally stored \"current\"\nreference.\n\nIf this method is used the initial state of the system is the one set using\nReset(const StateVector&). If the initial state is not\nset it defaults to a zero vector.\n\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Calculate the feedforward with current and future reference vectors.\n\n:param r:     The reference state of the current timestep (k).\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a specified initial state vector.\n\n:param initialState: The initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a zero initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "uff",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the previously calculated feedforward as an input vector.\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_2_2",
                    "functionName": "uff",
                    "returnType": "float",
                    "tooltip": "Returns an element of the previously calculated feedforward.\n\n:param i: Row of uff.\n\n:returns: The row of the calculated feedforward."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "tooltip": "Constructs a feedforward with the given coefficients.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param dt: Discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the current reference vector r.\n\n:returns: The current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the current reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Calculate the feedforward with only the desired\nfuture reference. This uses the internally stored \"current\"\nreference.\n\nIf this method is used the initial state of the system is the one set using\nReset(const StateVector&). If the initial state is not\nset it defaults to a zero vector.\n\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Calculate the feedforward with current and future reference vectors.\n\n:param r:     The reference state of the current timestep (k).\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a specified initial state vector.\n\n:param initialState: The initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the feedforward with a zero initial state vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "uff",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the previously calculated feedforward as an input vector.\n\n:returns: The calculated feedforward."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearPlantInversionFeedforward_3_2",
                    "functionName": "uff",
                    "returnType": "float",
                    "tooltip": "Returns an element of the previously calculated feedforward.\n\n:param i: Row of uff.\n\n:returns: The row of the calculated feedforward."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LinearQuadraticRegulator_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Qelems",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Relems",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-intro.html#lqr-tuning\nfor how to select the tolerances.\n\n:param A:      Continuous system matrix of the plant being controlled.\n:param B:      Continuous input matrix of the plant being controlled.\n:param Qelems: The maximum desired error tolerance for each state.\n:param Relems: The maximum desired control effort for each input.\n:param dt:     Discretization timestep.\n               @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Q",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param Q:  The state cost matrix.\n:param R:  The input cost matrix.\n:param dt: Discretization timestep.\n           @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Q",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "N",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param Q:  The state cost matrix.\n:param R:  The input cost matrix.\n:param N:  The state-input cross-term cost matrix.\n:param dt: Discretization timestep.\n           @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "K",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the controller matrix K."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "K",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller matrix K.\n\n:param i: Row of K.\n:param j: Column of K."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the reference vector r.\n\n:returns: The reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the control input vector u.\n\n:returns: The control input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the control input vector u.\n\n:param i: Row of u.\n\n:returns: The row of the control input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x: The current state x."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x:     The current state x.\n:param nextR: The next reference vector r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputDelay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "latencyCompensate",
                    "returnType": "None",
                    "tooltip": "Adjusts LQR controller gain to compensate for a pure time delay in the\ninput.\n\nLinear-Quadratic regulator controller gains tend to be aggressive. If\nsensor measurements are time-delayed too long, the LQR may be unstable.\nHowever, if we know the amount of delay, we can compute the control based\non where the system will be after the time delay.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf\nappendix C.4 for a derivation.\n\n:param plant:      The plant being controlled.\n:param dt:         Discretization timestep.\n:param inputDelay: Input time delay."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputDelay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "latencyCompensate",
                    "returnType": "None",
                    "tooltip": "Adjusts LQR controller gain to compensate for a pure time delay in the\ninput.\n\nLinear-Quadratic regulator controller gains tend to be aggressive. If\nsensor measurements are time-delayed too long, the LQR may be unstable.\nHowever, if we know the amount of delay, we can compute the control based\non where the system will be after the time delay.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf\nappendix C.4 for a derivation.\n\n:param plant:      The plant being controlled.\n:param dt:         Discretization timestep.\n:param inputDelay: Input time delay."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the controller."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LinearQuadraticRegulator_2_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Qelems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Relems",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-intro.html#lqr-tuning\nfor how to select the tolerances.\n\n:param A:      Continuous system matrix of the plant being controlled.\n:param B:      Continuous input matrix of the plant being controlled.\n:param Qelems: The maximum desired error tolerance for each state.\n:param Relems: The maximum desired control effort for each input.\n:param dt:     Discretization timestep.\n               @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Q",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param Q:  The state cost matrix.\n:param R:  The input cost matrix.\n:param dt: Discretization timestep.\n           @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Q",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "N",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param Q:  The state cost matrix.\n:param R:  The input cost matrix.\n:param N:  The state-input cross-term cost matrix.\n:param dt: Discretization timestep.\n           @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "K",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 2]\"]",
                    "tooltip": "Returns the controller matrix K."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "K",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller matrix K.\n\n:param i: Row of K.\n:param j: Column of K."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the reference vector r.\n\n:returns: The reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the control input vector u.\n\n:returns: The control input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the control input vector u.\n\n:param i: Row of u.\n\n:returns: The row of the control input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x: The current state x."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x:     The current state x.\n:param nextR: The next reference vector r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputDelay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "latencyCompensate",
                    "returnType": "None",
                    "tooltip": "Adjusts LQR controller gain to compensate for a pure time delay in the\ninput.\n\nLinear-Quadratic regulator controller gains tend to be aggressive. If\nsensor measurements are time-delayed too long, the LQR may be unstable.\nHowever, if we know the amount of delay, we can compute the control based\non where the system will be after the time delay.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf\nappendix C.4 for a derivation.\n\n:param plant:      The plant being controlled.\n:param dt:         Discretization timestep.\n:param inputDelay: Input time delay."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputDelay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "latencyCompensate",
                    "returnType": "None",
                    "tooltip": "Adjusts LQR controller gain to compensate for a pure time delay in the\ninput.\n\nLinear-Quadratic regulator controller gains tend to be aggressive. If\nsensor measurements are time-delayed too long, the LQR may be unstable.\nHowever, if we know the amount of delay, we can compute the control based\non where the system will be after the time delay.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf\nappendix C.4 for a derivation.\n\n:param plant:      The plant being controlled.\n:param dt:         Discretization timestep.\n:param inputDelay: Input time delay."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the controller."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LinearQuadraticRegulator_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Qelems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Relems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-intro.html#lqr-tuning\nfor how to select the tolerances.\n\n:param A:      Continuous system matrix of the plant being controlled.\n:param B:      Continuous input matrix of the plant being controlled.\n:param Qelems: The maximum desired error tolerance for each state.\n:param Relems: The maximum desired control effort for each input.\n:param dt:     Discretization timestep.\n               @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Q",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param Q:  The state cost matrix.\n:param R:  The input cost matrix.\n:param dt: Discretization timestep.\n           @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Q",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "N",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param Q:  The state cost matrix.\n:param R:  The input cost matrix.\n:param N:  The state-input cross-term cost matrix.\n:param dt: Discretization timestep.\n           @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "K",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the controller matrix K."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "K",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller matrix K.\n\n:param i: Row of K.\n:param j: Column of K."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the reference vector r.\n\n:returns: The reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the control input vector u.\n\n:returns: The control input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the control input vector u.\n\n:param i: Row of u.\n\n:returns: The row of the control input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x: The current state x."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x:     The current state x.\n:param nextR: The next reference vector r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputDelay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "latencyCompensate",
                    "returnType": "None",
                    "tooltip": "Adjusts LQR controller gain to compensate for a pure time delay in the\ninput.\n\nLinear-Quadratic regulator controller gains tend to be aggressive. If\nsensor measurements are time-delayed too long, the LQR may be unstable.\nHowever, if we know the amount of delay, we can compute the control based\non where the system will be after the time delay.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf\nappendix C.4 for a derivation.\n\n:param plant:      The plant being controlled.\n:param dt:         Discretization timestep.\n:param inputDelay: Input time delay."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputDelay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "latencyCompensate",
                    "returnType": "None",
                    "tooltip": "Adjusts LQR controller gain to compensate for a pure time delay in the\ninput.\n\nLinear-Quadratic regulator controller gains tend to be aggressive. If\nsensor measurements are time-delayed too long, the LQR may be unstable.\nHowever, if we know the amount of delay, we can compute the control based\non where the system will be after the time delay.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf\nappendix C.4 for a derivation.\n\n:param plant:      The plant being controlled.\n:param dt:         Discretization timestep.\n:param inputDelay: Input time delay."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the controller."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.LinearQuadraticRegulator_3_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Qelems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Relems",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-intro.html#lqr-tuning\nfor how to select the tolerances.\n\n:param A:      Continuous system matrix of the plant being controlled.\n:param B:      Continuous input matrix of the plant being controlled.\n:param Qelems: The maximum desired error tolerance for each state.\n:param Relems: The maximum desired control effort for each input.\n:param dt:     Discretization timestep.\n               @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Q",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param Q:  The state cost matrix.\n:param R:  The input cost matrix.\n:param dt: Discretization timestep.\n           @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "Q",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "N",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "tooltip": "Constructs a controller with the given coefficients and plant.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param Q:  The state cost matrix.\n:param R:  The input cost matrix.\n:param N:  The state-input cross-term cost matrix.\n:param dt: Discretization timestep.\n           @throws std::invalid_argument If the system is unstabilizable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "K",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 3]\"]",
                    "tooltip": "Returns the controller matrix K."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "K",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller matrix K.\n\n:param i: Row of K.\n:param j: Column of K."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "R",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the reference vector r.\n\n:returns: The reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "R",
                    "returnType": "float",
                    "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the reference vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the control input vector u.\n\n:returns: The control input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the control input vector u.\n\n:param i: Row of u.\n\n:returns: The row of the control input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x: The current state x."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "calculate",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the next output of the controller.\n\n:param x:     The current state x.\n:param nextR: The next reference vector r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputDelay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "latencyCompensate",
                    "returnType": "None",
                    "tooltip": "Adjusts LQR controller gain to compensate for a pure time delay in the\ninput.\n\nLinear-Quadratic regulator controller gains tend to be aggressive. If\nsensor measurements are time-delayed too long, the LQR may be unstable.\nHowever, if we know the amount of delay, we can compute the control based\non where the system will be after the time delay.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf\nappendix C.4 for a derivation.\n\n:param plant:      The plant being controlled.\n:param dt:         Discretization timestep.\n:param inputDelay: Input time delay."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputDelay",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "latencyCompensate",
                    "returnType": "None",
                    "tooltip": "Adjusts LQR controller gain to compensate for a pure time delay in the\ninput.\n\nLinear-Quadratic regulator controller gains tend to be aggressive. If\nsensor measurements are time-delayed too long, the LQR may be unstable.\nHowever, if we know the amount of delay, we can compute the control based\non where the system will be after the time delay.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf\nappendix C.4 for a derivation.\n\n:param plant:      The plant being controlled.\n:param dt:         Discretization timestep.\n:param inputDelay: Input time delay."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.LinearQuadraticRegulator_3_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the controller."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.PIDController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "0.02",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.PIDController",
                    "tooltip": "Allocates a PIDController with the given constants for Kp, Ki, and Kd.\n\n:param Kp:     The proportional coefficient. Must be >= 0.\n:param Ki:     The integral coefficient. Must be >= 0.\n:param Kd:     The derivative coefficient. Must be >= 0.\n:param period: The period between controller updates in seconds. The\n               default is 20 milliseconds. Must be positive."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "atSetpoint",
                    "returnType": "bool",
                    "tooltip": "Returns true if the error is within the tolerance of the setpoint.\nThe error tolerance defauls to 0.05, and the error derivative tolerance\ndefaults to \u221e.\n\nThis will return false until at least one input value has been computed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "setpoint",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param setpoint:    The new setpoint of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "disableContinuousInput",
                    "returnType": "None",
                    "tooltip": "Disables continuous input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "minimumInput",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "maximumInput",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "enableContinuousInput",
                    "returnType": "None",
                    "tooltip": "Enables continuous input.\n\nRather then using the max and min input range as constraints, it considers\nthem to be the same point and automatically calculates the shortest route\nto the setpoint.\n\n:param minimumInput: The minimum value expected from the input.\n:param maximumInput: The maximum value expected from the input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getAccumulatedError",
                    "returnType": "float",
                    "tooltip": "Gets the accumulated error used in the integral calculation of this\ncontroller.\n\n:returns: The accumulated error of this controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getD",
                    "returnType": "float",
                    "tooltip": "Gets the differential coefficient.\n\n:returns: differential coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getError",
                    "returnType": "float",
                    "tooltip": "Returns the difference between the setpoint and the measurement."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getErrorDerivative",
                    "returnType": "float",
                    "tooltip": "Returns the error derivative."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getErrorDerivativeTolerance",
                    "returnType": "float",
                    "tooltip": "Gets the error derivative tolerance of this controller. Defaults to \u221e.\n\n:returns: The error derivative tolerance of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getErrorTolerance",
                    "returnType": "float",
                    "tooltip": "Gets the error tolerance of this controller. Defaults to 0.05.\n\n:returns: The error tolerance of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getI",
                    "returnType": "float",
                    "tooltip": "Gets the integral coefficient.\n\n:returns: integral coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getIZone",
                    "returnType": "float",
                    "tooltip": "Get the IZone range.\n\n:returns: Maximum magnitude of error to allow integral control."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getP",
                    "returnType": "float",
                    "tooltip": "Gets the proportional coefficient.\n\n:returns: proportional coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gets the period of this controller.\n\n:returns: The period of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getPositionError",
                    "returnType": "float",
                    "tooltip": "Returns the difference between the setpoint and the measurement.\n\n:deprecated: Use GetError() instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getPositionTolerance",
                    "returnType": "float",
                    "tooltip": "Gets the position tolerance of this controller.\n\n:deprecated: Use GetErrorTolerance() instead.\n\n:returns: The position tolerance of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getSetpoint",
                    "returnType": "float",
                    "tooltip": "Returns the current setpoint of the PIDController.\n\n:returns: The current setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getVelocityError",
                    "returnType": "float",
                    "tooltip": "Returns the velocity error.\n\n:deprecated: Use GetErrorDerivative() instead."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "getVelocityTolerance",
                    "returnType": "float",
                    "tooltip": "Gets the velocity tolerance of this controller.\n\n:deprecated: Use GetErrorDerivativeTolerance() instead.\n\n:returns: The velocity tolerance of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "isContinuousInputEnabled",
                    "returnType": "bool",
                    "tooltip": "Returns true if continuous input is enabled."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the previous error, the integral term, and disable the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "setD",
                    "returnType": "None",
                    "tooltip": "Sets the differential coefficient of the PID controller gain.\n\n:param Kd: The differential coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "setI",
                    "returnType": "None",
                    "tooltip": "Sets the integral coefficient of the PID controller gain.\n\n:param Ki: The integral coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "iZone",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "setIZone",
                    "returnType": "None",
                    "tooltip": "Sets the IZone range. When the absolute value of the position error is\ngreater than IZone, the total accumulated error will reset to zero,\ndisabling integral gain until the absolute value of the position error is\nless than IZone. This is used to prevent integral windup. Must be\nnon-negative. Passing a value of zero will effectively disable integral\ngain. Passing a value of infinity disables IZone functionality.\n\n:param iZone: Maximum magnitude of error to allow integral control. Must be\n              >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "minimumIntegral",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "maximumIntegral",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "setIntegratorRange",
                    "returnType": "None",
                    "tooltip": "Sets the minimum and maximum contributions of the integral term.\n\nThe internal integrator is clamped so that the integral term's contribution\nto the output stays between minimumIntegral and maximumIntegral. This\nprevents integral windup.\n\n:param minimumIntegral: The minimum contribution of the integral term.\n:param maximumIntegral: The maximum contribution of the integral term."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Sets the proportional coefficient of the PID controller gain.\n\n:param Kp: The proportional coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "setPID",
                    "returnType": "None",
                    "tooltip": "Sets the PID Controller gain parameters.\n\nSets the proportional, integral, and differential coefficients.\n\n:param Kp: The proportional coefficient. Must be >= 0.\n:param Ki: The integral coefficient. Must be >= 0.\n:param Kd: The differential coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "setpoint",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "setSetpoint",
                    "returnType": "None",
                    "tooltip": "Sets the setpoint for the PIDController.\n\n:param setpoint: The desired setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.PIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "errorTolerance",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "inf",
                            "name": "errorDerivativeTolerance",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.PIDController",
                    "functionName": "setTolerance",
                    "returnType": "None",
                    "tooltip": "Sets the error which is considered tolerable for use with AtSetpoint().\n\n:param errorTolerance:           error which is tolerable.\n:param errorDerivativeTolerance: error derivative which is tolerable."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ProfiledPIDController",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.TrapezoidProfile.Constraints"
                        },
                        {
                            "defaultValue": "0.02",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ProfiledPIDController",
                    "tooltip": "Allocates a ProfiledPIDController with the given constants for Kp, Ki, and\nKd. Users should call reset() when they first start running the controller\nto avoid unwanted behavior.\n\n:param Kp:          The proportional coefficient. Must be >= 0.\n:param Ki:          The integral coefficient. Must be >= 0.\n:param Kd:          The derivative coefficient. Must be >= 0.\n:param constraints: Velocity and acceleration constraints for goal.\n:param period:      The period between controller updates in seconds. The\n                    default is 20 milliseconds. Must be positive."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "atGoal",
                    "returnType": "bool",
                    "tooltip": "Returns true if the error is within the tolerance of the error.\n\nThis will return false until at least one input value has been computed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "atSetpoint",
                    "returnType": "bool",
                    "tooltip": "Returns true if the error is within the tolerance of the error.\n\nCurrently this just reports on target as the actual value passes through\nthe setpoint. Ideally it should be based on being within the tolerance for\nsome period of time.\n\nThis will return false until at least one input value has been computed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.TrapezoidProfile.State"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.TrapezoidProfile.Constraints"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller.\n:param constraints: Velocity and acceleration constraints for goal."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "disableContinuousInput",
                    "returnType": "None",
                    "tooltip": "Disables continuous input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "minimumInput",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "maximumInput",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "enableContinuousInput",
                    "returnType": "None",
                    "tooltip": "Enables continuous input.\n\nRather then using the max and min input range as constraints, it considers\nthem to be the same point and automatically calculates the shortest route\nto the setpoint.\n\n:param minimumInput: The minimum value expected from the input.\n:param maximumInput: The maximum value expected from the input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getAccumulatedError",
                    "returnType": "float",
                    "tooltip": "Gets the accumulated error used in the integral calculation of this\ncontroller.\n\n:returns: The accumulated error of this controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getConstraints",
                    "returnType": "wpimath.trajectory.TrapezoidProfile.Constraints",
                    "tooltip": "Get the velocity and acceleration constraints for this controller.\n\n:returns: Velocity and acceleration constraints."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getD",
                    "returnType": "float",
                    "tooltip": "Gets the differential coefficient.\n\n:returns: differential coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getGoal",
                    "returnType": "wpimath.trajectory.TrapezoidProfile.State",
                    "tooltip": "Gets the goal for the ProfiledPIDController."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getI",
                    "returnType": "float",
                    "tooltip": "Gets the integral coefficient.\n\n:returns: integral coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getIZone",
                    "returnType": "float",
                    "tooltip": "Get the IZone range.\n\n:returns: Maximum magnitude of error to allow integral control."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getP",
                    "returnType": "float",
                    "tooltip": "Gets the proportional coefficient.\n\n:returns: proportional coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gets the period of this controller.\n\n:returns: The period of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getPositionError",
                    "returnType": "float",
                    "tooltip": "Returns the difference between the setpoint and the measurement.\n\n:returns: The error."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getPositionTolerance",
                    "returnType": "float",
                    "tooltip": "Gets the position tolerance of this controller.\n\n:returns: The position tolerance of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getSetpoint",
                    "returnType": "wpimath.trajectory.TrapezoidProfile.State",
                    "tooltip": "Returns the current setpoint of the ProfiledPIDController.\n\n:returns: The current setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getVelocityError",
                    "returnType": "wpimath.units.units_per_second",
                    "tooltip": "Returns the change in error per second."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "getVelocityTolerance",
                    "returnType": "float",
                    "tooltip": "Gets the velocity tolerance of this controller.\n\n:returns: The velocity tolerance of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "wpimath.trajectory.TrapezoidProfile.State"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the previous error and the integral term.\n\n:param measurement: The current measured State of the system."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measuredPosition",
                            "type": "float"
                        },
                        {
                            "defaultValue": "",
                            "name": "measuredVelocity",
                            "type": "wpimath.units.units_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the previous error and the integral term.\n\n:param measuredPosition: The current measured position of the system.\n:param measuredVelocity: The current measured velocity of the system."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "measuredPosition",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the previous error and the integral term.\n\n:param measuredPosition: The current measured position of the system. The\n                         velocity is assumed to be zero."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.TrapezoidProfile.Constraints"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setConstraints",
                    "returnType": "None",
                    "tooltip": "Set velocity and acceleration constraints for goal.\n\n:param constraints: Velocity and acceleration constraints for goal."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setD",
                    "returnType": "None",
                    "tooltip": "Sets the differential coefficient of the PID controller gain.\n\n:param Kd: The differential coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.TrapezoidProfile.State"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setGoal",
                    "returnType": "None",
                    "tooltip": "Sets the goal for the ProfiledPIDController.\n\n:param goal: The desired unprofiled setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setGoal",
                    "returnType": "None",
                    "tooltip": "Sets the goal for the ProfiledPIDController.\n\n:param goal: The desired unprofiled setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setI",
                    "returnType": "None",
                    "tooltip": "Sets the integral coefficient of the PID controller gain.\n\n:param Ki: The integral coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "iZone",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setIZone",
                    "returnType": "None",
                    "tooltip": "Sets the IZone range. When the absolute value of the position error is\ngreater than IZone, the total accumulated error will reset to zero,\ndisabling integral gain until the absolute value of the position error is\nless than IZone. This is used to prevent integral windup. Must be\nnon-negative. Passing a value of zero will effectively disable integral\ngain. Passing a value of infinity disables IZone functionality.\n\n:param iZone: Maximum magnitude of error to allow integral control. Must be\n              >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "minimumIntegral",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "maximumIntegral",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setIntegratorRange",
                    "returnType": "None",
                    "tooltip": "Sets the minimum and maximum contributions of the integral term.\n\nThe internal integrator is clamped so that the integral term's contribution\nto the output stays between minimumIntegral and maximumIntegral. This\nprevents integral windup.\n\n:param minimumIntegral: The minimum contribution of the integral term.\n:param maximumIntegral: The maximum contribution of the integral term."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Sets the proportional coefficient of the PID controller gain.\n\n:param Kp: The proportional coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setPID",
                    "returnType": "None",
                    "tooltip": "Sets the PID Controller gain parameters.\n\nSets the proportional, integral, and differential coefficients.\n\n:param Kp: The proportional coefficient. Must be >= 0.\n:param Ki: The integral coefficient. Must be >= 0.\n:param Kd: The differential coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDController"
                        },
                        {
                            "defaultValue": "",
                            "name": "positionTolerance",
                            "type": "float"
                        },
                        {
                            "defaultValue": "inf",
                            "name": "velocityTolerance",
                            "type": "wpimath.units.units_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDController",
                    "functionName": "setTolerance",
                    "returnType": "None",
                    "tooltip": "Sets the error which is considered tolerable for use with\nAtSetpoint().\n\n:param positionTolerance: Position error which is tolerable.\n:param velocityTolerance: Velocity error which is tolerable."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.ProfiledPIDControllerRadians",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.Constraints"
                        },
                        {
                            "defaultValue": "0.02",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.ProfiledPIDControllerRadians",
                    "tooltip": "Allocates a ProfiledPIDController with the given constants for Kp, Ki, and\nKd. Users should call reset() when they first start running the controller\nto avoid unwanted behavior.\n\n:param Kp:          The proportional coefficient. Must be >= 0.\n:param Ki:          The integral coefficient. Must be >= 0.\n:param Kd:          The derivative coefficient. Must be >= 0.\n:param constraints: Velocity and acceleration constraints for goal.\n:param period:      The period between controller updates in seconds. The\n                    default is 20 milliseconds. Must be positive."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "atGoal",
                    "returnType": "bool",
                    "tooltip": "Returns true if the error is within the tolerance of the error.\n\nThis will return false until at least one input value has been computed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "atSetpoint",
                    "returnType": "bool",
                    "tooltip": "Returns true if the error is within the tolerance of the error.\n\nCurrently this just reports on target as the actual value passes through\nthe setpoint. Ideally it should be based on being within the tolerance for\nsome period of time.\n\nThis will return false until at least one input value has been computed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.State"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.Constraints"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller.\n:param constraints: Velocity and acceleration constraints for goal."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "disableContinuousInput",
                    "returnType": "None",
                    "tooltip": "Disables continuous input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "minimumInput",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "maximumInput",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "enableContinuousInput",
                    "returnType": "None",
                    "tooltip": "Enables continuous input.\n\nRather then using the max and min input range as constraints, it considers\nthem to be the same point and automatically calculates the shortest route\nto the setpoint.\n\n:param minimumInput: The minimum value expected from the input.\n:param maximumInput: The maximum value expected from the input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getAccumulatedError",
                    "returnType": "float",
                    "tooltip": "Gets the accumulated error used in the integral calculation of this\ncontroller.\n\n:returns: The accumulated error of this controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getConstraints",
                    "returnType": "wpimath.trajectory.TrapezoidProfileRadians.Constraints",
                    "tooltip": "Get the velocity and acceleration constraints for this controller.\n\n:returns: Velocity and acceleration constraints."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getD",
                    "returnType": "float",
                    "tooltip": "Gets the differential coefficient.\n\n:returns: differential coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getGoal",
                    "returnType": "wpimath.trajectory.TrapezoidProfileRadians.State",
                    "tooltip": "Gets the goal for the ProfiledPIDController."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getI",
                    "returnType": "float",
                    "tooltip": "Gets the integral coefficient.\n\n:returns: integral coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getIZone",
                    "returnType": "float",
                    "tooltip": "Get the IZone range.\n\n:returns: Maximum magnitude of error to allow integral control."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getP",
                    "returnType": "float",
                    "tooltip": "Gets the proportional coefficient.\n\n:returns: proportional coefficient"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getPeriod",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gets the period of this controller.\n\n:returns: The period of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getPositionError",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Returns the difference between the setpoint and the measurement.\n\n:returns: The error."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getPositionTolerance",
                    "returnType": "float",
                    "tooltip": "Gets the position tolerance of this controller.\n\n:returns: The position tolerance of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getSetpoint",
                    "returnType": "wpimath.trajectory.TrapezoidProfileRadians.State",
                    "tooltip": "Returns the current setpoint of the ProfiledPIDController.\n\n:returns: The current setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getVelocityError",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Returns the change in error per second."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "getVelocityTolerance",
                    "returnType": "float",
                    "tooltip": "Gets the velocity tolerance of this controller.\n\n:returns: The velocity tolerance of the controller."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "builder",
                            "type": "wpiutil.SendableBuilder"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "initSendable",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurement",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.State"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the previous error and the integral term.\n\n:param measurement: The current measured State of the system."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "measuredPosition",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "measuredVelocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the previous error and the integral term.\n\n:param measuredPosition: The current measured position of the system.\n:param measuredVelocity: The current measured velocity of the system."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "measuredPosition",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the previous error and the integral term.\n\n:param measuredPosition: The current measured position of the system. The\n                         velocity is assumed to be zero."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.Constraints"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setConstraints",
                    "returnType": "None",
                    "tooltip": "Set velocity and acceleration constraints for goal.\n\n:param constraints: Velocity and acceleration constraints for goal."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setD",
                    "returnType": "None",
                    "tooltip": "Sets the differential coefficient of the PID controller gain.\n\n:param Kd: The differential coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.State"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setGoal",
                    "returnType": "None",
                    "tooltip": "Sets the goal for the ProfiledPIDController.\n\n:param goal: The desired unprofiled setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setGoal",
                    "returnType": "None",
                    "tooltip": "Sets the goal for the ProfiledPIDController.\n\n:param goal: The desired unprofiled setpoint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setI",
                    "returnType": "None",
                    "tooltip": "Sets the integral coefficient of the PID controller gain.\n\n:param Ki: The integral coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "iZone",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setIZone",
                    "returnType": "None",
                    "tooltip": "Sets the IZone range. When the absolute value of the position error is\ngreater than IZone, the total accumulated error will reset to zero,\ndisabling integral gain until the absolute value of the position error is\nless than IZone. This is used to prevent integral windup. Must be\nnon-negative. Passing a value of zero will effectively disable integral\ngain. Passing a value of infinity disables IZone functionality.\n\n:param iZone: Maximum magnitude of error to allow integral control. Must be\n              >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "minimumIntegral",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "maximumIntegral",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setIntegratorRange",
                    "returnType": "None",
                    "tooltip": "Sets the minimum and maximum contributions of the integral term.\n\nThe internal integrator is clamped so that the integral term's contribution\nto the output stays between minimumIntegral and maximumIntegral. This\nprevents integral windup.\n\n:param minimumIntegral: The minimum contribution of the integral term.\n:param maximumIntegral: The maximum contribution of the integral term."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Sets the proportional coefficient of the PID controller gain.\n\n:param Kp: The proportional coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kp",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Ki",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "Kd",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setPID",
                    "returnType": "None",
                    "tooltip": "Sets the PID Controller gain parameters.\n\nSets the proportional, integral, and differential coefficients.\n\n:param Kp: The proportional coefficient. Must be >= 0.\n:param Ki: The integral coefficient. Must be >= 0.\n:param Kd: The differential coefficient. Must be >= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.ProfiledPIDControllerRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "positionTolerance",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "inf",
                            "name": "velocityTolerance",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.ProfiledPIDControllerRadians",
                    "functionName": "setTolerance",
                    "returnType": "None",
                    "tooltip": "Sets the error which is considered tolerable for use with\nAtSetpoint().\n\n:param positionTolerance: Position error which is tolerable.\n:param velocityTolerance: Velocity error which is tolerable."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.SimpleMotorFeedforwardMeters",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kS",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        },
                        {
                            "defaultValue": "0.02",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "tooltip": "Creates a new SimpleMotorFeedforward with the specified gains.\n\n:param kS: The static gain, in volts.\n:param kV: The velocity gain, in volt seconds per distance.\n:param kA: The acceleration gain, in volt seconds\u00b2 per distance.\n:param dt: The period in seconds.\n           @throws IllegalArgumentException for kv &lt; zero.\n           @throws IllegalArgumentException for ka &lt; zero.\n           @throws IllegalArgumentException for period &le; zero."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculates the feedforward from the gains and velocity setpoint assuming\ndiscrete control. Use this method when the velocity setpoint does not\nchange.\n\n:param velocity: The velocity setpoint.\n\n:returns: The computed feedforward, in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextVelocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculates the feedforward from the gains and setpoints assuming discrete\ncontrol.\n\nNote this method is inaccurate when the velocity crosses 0.\n\n:param currentVelocity: The current velocity setpoint.\n:param nextVelocity:    The next velocity setpoint.\n\n:returns: The computed feedforward, in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "getDt",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the period.\n\n:returns: The period."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "getKa",
                    "returnType": "wpimath.units.volt_seconds_squared_per_meter",
                    "tooltip": "Returns the acceleration gain.\n\n:returns: The acceleration gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "getKs",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the static gain.\n\n:returns: The static gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "getKv",
                    "returnType": "wpimath.units.volt_seconds_per_meter",
                    "tooltip": "Returns the velocity gain.\n\n:returns: The velocity gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "maxAchievableAcceleration",
                    "returnType": "wpimath.units.meters_per_second_squared",
                    "tooltip": "Calculates the maximum achievable acceleration given a maximum voltage\nsupply and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the motor.\n:param velocity:   The velocity of the motor.\n\n:returns: The maximum possible acceleration at the given velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "maxAchievableVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Calculates the maximum achievable velocity given a maximum voltage supply\nand an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the motor.\n:param acceleration: The acceleration of the motor.\n\n:returns: The maximum possible velocity at the given acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "minAchievableAcceleration",
                    "returnType": "wpimath.units.meters_per_second_squared",
                    "tooltip": "Calculates the minimum achievable acceleration given a maximum voltage\nsupply and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the motor.\n:param velocity:   The velocity of the motor.\n\n:returns: The minimum possible acceleration at the given velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "minAchievableVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Calculates the minimum achievable velocity given a maximum voltage supply\nand an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the motor.\n:param acceleration: The acceleration of the motor.\n\n:returns: The minimum possible velocity at the given acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "setKa",
                    "returnType": "None",
                    "tooltip": "Sets the acceleration gain.\n\n:param kA: The acceleration gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "kS",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "setKs",
                    "returnType": "None",
                    "tooltip": "Sets the static gain.\n\n:param kS: The static gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardMeters",
                    "functionName": "setKv",
                    "returnType": "None",
                    "tooltip": "Sets the velocity gain.\n\n:param kV: The velocity gain."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.controller.SimpleMotorFeedforwardRadians",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kS",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_radian"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_radian"
                        },
                        {
                            "defaultValue": "0.02",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "__init__",
                    "returnType": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "tooltip": "Creates a new SimpleMotorFeedforward with the specified gains.\n\n:param kS: The static gain, in volts.\n:param kV: The velocity gain, in volt seconds per distance.\n:param kA: The acceleration gain, in volt seconds\u00b2 per distance.\n:param dt: The period in seconds.\n           @throws IllegalArgumentException for kv &lt; zero.\n           @throws IllegalArgumentException for ka &lt; zero.\n           @throws IllegalArgumentException for period &le; zero."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculates the feedforward from the gains and velocity setpoint assuming\ndiscrete control. Use this method when the velocity setpoint does not\nchange.\n\n:param velocity: The velocity setpoint.\n\n:returns: The computed feedforward, in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentVelocity",
                            "type": "wpimath.units.radians_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextVelocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "calculate",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Calculates the feedforward from the gains and setpoints assuming discrete\ncontrol.\n\nNote this method is inaccurate when the velocity crosses 0.\n\n:param currentVelocity: The current velocity setpoint.\n:param nextVelocity:    The next velocity setpoint.\n\n:returns: The computed feedforward, in volts."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "getDt",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the period.\n\n:returns: The period."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "getKa",
                    "returnType": "wpimath.units.volt_seconds_squared_per_radian",
                    "tooltip": "Returns the acceleration gain.\n\n:returns: The acceleration gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "getKs",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the static gain.\n\n:returns: The static gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "getKv",
                    "returnType": "wpimath.units.volt_seconds_per_radian",
                    "tooltip": "Returns the velocity gain.\n\n:returns: The velocity gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "maxAchievableAcceleration",
                    "returnType": "wpimath.units.radians_per_second_squared",
                    "tooltip": "Calculates the maximum achievable acceleration given a maximum voltage\nsupply and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the motor.\n:param velocity:   The velocity of the motor.\n\n:returns: The maximum possible acceleration at the given velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.radians_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "maxAchievableVelocity",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Calculates the maximum achievable velocity given a maximum voltage supply\nand an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the motor.\n:param acceleration: The acceleration of the motor.\n\n:returns: The maximum possible velocity at the given acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "minAchievableAcceleration",
                    "returnType": "wpimath.units.radians_per_second_squared",
                    "tooltip": "Calculates the minimum achievable acceleration given a maximum voltage\nsupply and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the motor.\n:param velocity:   The velocity of the motor.\n\n:returns: The minimum possible acceleration at the given velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "acceleration",
                            "type": "wpimath.units.radians_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "minAchievableVelocity",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Calculates the minimum achievable velocity given a maximum voltage supply\nand an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the motor.\n:param acceleration: The acceleration of the motor.\n\n:returns: The minimum possible velocity at the given acceleration."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_radian"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "setKa",
                    "returnType": "None",
                    "tooltip": "Sets the acceleration gain.\n\n:param kA: The acceleration gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "kS",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "setKs",
                    "returnType": "None",
                    "tooltip": "Sets the static gain.\n\n:param kS: The static gain."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.controller.SimpleMotorFeedforwardRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_radian"
                        }
                    ],
                    "declaringClassName": "wpimath.controller.SimpleMotorFeedforwardRadians",
                    "functionName": "setKv",
                    "returnType": "None",
                    "tooltip": "Sets the velocity gain.\n\n:param kV: The velocity gain."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.controller",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.DifferentialDrivePoseEstimator",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.DifferentialDrivePoseEstimator",
                    "tooltip": "Constructs a DifferentialDrivePoseEstimator with default standard\ndeviations for the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.02 meters for x, 0.02 meters for y, and 0.01 radians for heading.\nThe default standard deviations of the vision measurements are\n0.1 meters for x, 0.1 meters for y, and 0.1 radians for heading.\n\n:param kinematics:    A correctly-configured kinematics object for your\n                      drivetrain.\n:param gyroAngle:     The gyro angle of the robot.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n:param initialPose:   The estimated initial pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.DifferentialDrivePoseEstimator",
                    "tooltip": "Constructs a DifferentialDrivePoseEstimator.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The gyro angle of the robot.\n:param leftDistance:             The distance traveled by the left encoder.\n:param rightDistance:            The distance traveled by the right encoder.\n:param initialPose:              The estimated initial pose.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\n:param gyroAngle:     The current gyro angle.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n:param pose:          The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:     The current gyro angle.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n\n:returns: The estimated pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:   The time at which this method was called.\n:param gyroAngle:     The current gyro angle.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n\n:returns: The estimated pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.DifferentialDrivePoseEstimator3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.DifferentialDrivePoseEstimator3d",
                    "tooltip": "Constructs a DifferentialDrivePoseEstimator3d with default standard\ndeviations for the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.02 meters for x, 0.02 meters for y, 0.02 meters for z, and 0.01 radians\nfor angle. The default standard deviations of the vision measurements are\n0.1 meters for x, 0.1 meters for y, 0.1 meters for z, and 0.1 radians for\nangle.\n\n:param kinematics:    A correctly-configured kinematics object for your\n                      drivetrain.\n:param gyroAngle:     The gyro angle of the robot.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n:param initialPose:   The estimated initial pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.DifferentialDrivePoseEstimator3d",
                    "tooltip": "Constructs a DifferentialDrivePoseEstimator3d.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The gyro angle of the robot.\n:param leftDistance:             The distance traveled by the left encoder.\n:param rightDistance:            The distance traveled by the right encoder.\n:param initialPose:              The estimated initial pose.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, z position in meters, and angle in\n                                 radians). Increase these numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, z position in\n                                 meters, and angle in radians). Increase these numbers to trust the vision\n                                 pose measurement less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3d",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\n:param gyroAngle:     The current gyro angle.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n:param pose:          The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3d",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:     The current gyro angle.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n\n:returns: The estimated pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3d",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:   The time at which this method was called.\n:param gyroAngle:     The current gyro angle.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n\n:returns: The estimated pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics._kinematics.DifferentialDriveOdometry3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "tooltip": "Constructs a PoseEstimator3d.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and z position\n                                 in meters, and angle in radians). Increase these numbers to trust the\n                                 vision pose measurement less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "tooltip": "Constructs a PoseEstimator.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.DifferentialDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.DifferentialDrivePoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "tooltip": "Constructs an extended Kalman filter.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param f:                  A vector-valued function of x and u that returns\n                           the derivative of the state vector.\n:param h:                  A vector-valued function of x and u that returns\n                           the measurement vector.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "residualFuncY",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "addFuncX",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "tooltip": "Constructs an extended Kalman filter.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param f:                  A vector-valued function of x and u that returns\n                           the derivative of the state vector.\n:param h:                  A vector-valued function of x and u that returns\n                           the measurement vector.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param residualFuncY:      A function that computes the residual of two\n                           measurement vectors (i.e. it subtracts them.)\n:param addFuncX:           A function that adds two state vectors.\n:param dt:                 Nominal discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_1_1_1",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "tooltip": "Constructs an extended Kalman filter.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param f:                  A vector-valued function of x and u that returns\n                           the derivative of the state vector.\n:param h:                  A vector-valued function of x and u that returns\n                           the measurement vector.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "residualFuncY",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "addFuncX",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "tooltip": "Constructs an extended Kalman filter.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param f:                  A vector-valued function of x and u that returns\n                           the derivative of the state vector.\n:param h:                  A vector-valued function of x and u that returns\n                           the measurement vector.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param residualFuncY:      A function that computes the residual of two\n                           measurement vectors (i.e. it subtracts them.)\n:param addFuncX:           A function that adds two state vectors.\n:param dt:                 Nominal discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_1",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "tooltip": "Constructs an extended Kalman filter.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param f:                  A vector-valued function of x and u that returns\n                           the derivative of the state vector.\n:param h:                  A vector-valued function of x and u that returns\n                           the measurement vector.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "residualFuncY",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "addFuncX",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "tooltip": "Constructs an extended Kalman filter.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param f:                  A vector-valued function of x and u that returns\n                           the derivative of the state vector.\n:param h:                  A vector-valued function of x and u that returns\n                           the measurement vector.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param residualFuncY:      A function that computes the residual of two\n                           measurement vectors (i.e. it subtracts them.)\n:param addFuncX:           A function that adds two state vectors.\n:param dt:                 Nominal discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_1_2",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "tooltip": "Constructs an extended Kalman filter.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param f:                  A vector-valued function of x and u that returns\n                           the derivative of the state vector.\n:param h:                  A vector-valued function of x and u that returns\n                           the measurement vector.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "f",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "h",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "residualFuncY",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "addFuncX",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"], typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "tooltip": "Constructs an extended Kalman filter.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param f:                  A vector-valued function of x and u that returns\n                           the derivative of the state vector.\n:param h:                  A vector-valued function of x and u that returns\n                           the measurement vector.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param residualFuncY:      A function that computes the residual of two\n                           measurement vectors (i.e. it subtracts them.)\n:param addFuncX:           A function that adds two state vectors.\n:param dt:                 Nominal discretization timestep."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.ExtendedKalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.ExtendedKalmanFilter_2_2_2",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.KalmanFilter_1_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.KalmanFilter_1_1_1",
                    "tooltip": "Constructs a Kalman filter with the given plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param plant:              The plant used for the prediction step.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep.\n                           @throws std::invalid_argument If the system is undetectable."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_1_1_1",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.KalmanFilter_2_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.KalmanFilter_2_1_1",
                    "tooltip": "Constructs a Kalman filter with the given plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param plant:              The plant used for the prediction step.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep.\n                           @throws std::invalid_argument If the system is undetectable."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_1",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.KalmanFilter_2_1_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.KalmanFilter_2_1_2",
                    "tooltip": "Constructs a Kalman filter with the given plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param plant:              The plant used for the prediction step.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep.\n                           @throws std::invalid_argument If the system is undetectable."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_1_2",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.KalmanFilter_2_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.KalmanFilter_2_2_2",
                    "tooltip": "Constructs a Kalman filter with the given plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param plant:              The plant used for the prediction step.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep.\n                           @throws std::invalid_argument If the system is undetectable."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_2_2_2",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.KalmanFilter_3_2_3",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "measurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.KalmanFilter_3_2_3",
                    "tooltip": "Constructs a Kalman filter with the given plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param plant:              The plant used for the prediction step.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep.\n                           @throws std::invalid_argument If the system is undetectable."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "P",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Returns the error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "P",
                    "returnType": "float",
                    "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "R",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the observer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "P",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "setP",
                    "returnType": "None",
                    "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.KalmanFilter_3_2_3",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.MecanumDrivePoseEstimator",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.MecanumDrivePoseEstimator",
                    "tooltip": "Constructs a MecanumDrivePoseEstimator with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, and 0.1 radians for heading.\nThe default standard deviations of the vision measurements are\n0.45 meters for x, 0.45 meters for y, and 0.45 radians for heading.\n\n:param kinematics:     A correctly-configured kinematics object for your\n                       drivetrain.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distance measured by each wheel.\n:param initialPose:    The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.MecanumDrivePoseEstimator",
                    "tooltip": "Constructs a MecanumDrivePoseEstimator.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param wheelPositions:           The distance measured by each wheel.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.MecanumDrivePoseEstimator3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.MecanumDrivePoseEstimator3d",
                    "tooltip": "Constructs a MecanumDrivePoseEstimator3d with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, 0.1 meters for z, and 0.1 radians for\nangle. The default standard deviations of the vision measurements are 0.45\nmeters for x, 0.45 meters for y, 0.45 meters for z, and 0.45 radians for\nangle.\n\n:param kinematics:     A correctly-configured kinematics object for your\n                       drivetrain.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distance measured by each wheel.\n:param initialPose:    The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.MecanumDrivePoseEstimator3d",
                    "tooltip": "Constructs a MecanumDrivePoseEstimator3d.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param wheelPositions:           The distance measured by each wheel.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, z position in meters, and angle in\n                                 radians). Increase these numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, z position in\n                                 meters, and angle in radians). Increase these numbers to trust the vision\n                                 pose measurement less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics._kinematics.MecanumDriveOdometry3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "tooltip": "Constructs a PoseEstimator3d.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and z position\n                                 in meters, and angle in radians). Increase these numbers to trust the\n                                 vision pose measurement less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "tooltip": "Constructs a PoseEstimator.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.MecanumDrivePoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.MecanumDrivePoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive2PoseEstimator",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive2PoseEstimator",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, and 0.1 radians for heading.\nThe default standard deviations of the vision measurements are\n0.9 meters for x, 0.9 meters for y, and 0.9 radians for heading.\n\n:param kinematics:      A correctly-configured kinematics object for your\n                        drivetrain.\n:param gyroAngle:       The current gyro angle.\n:param modulePositions: The current distance and rotation measurements of\n                        the swerve modules.\n:param initialPose:     The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive2PoseEstimator",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param modulePositions:          The current distance and rotation measurements of\n                                 the swerve modules.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive2PoseEstimator3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive2PoseEstimator3d",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator3d with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, 0.1 meters for z, and 0.1 radians for\nangle. The default standard deviations of the vision measurements are 0.9\nmeters for x, 0.9 meters for y, 0.9 meters for z, and 0.9 radians for\nangle.\n\n:param kinematics:      A correctly-configured kinematics object for your\n                        drivetrain.\n:param gyroAngle:       The current gyro angle.\n:param modulePositions: The current distance and rotation measurements of\n                        the swerve modules.\n:param initialPose:     The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive2PoseEstimator3d",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator3d.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param modulePositions:          The current distance and rotation measurements of\n                                 the swerve modules.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics._kinematics.SwerveDrive2Odometry3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "tooltip": "Constructs a PoseEstimator3d.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and z position\n                                 in meters, and angle in radians). Increase these numbers to trust the\n                                 vision pose measurement less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "tooltip": "Constructs a PoseEstimator.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive2PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive2PoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive3PoseEstimator",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive3PoseEstimator",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, and 0.1 radians for heading.\nThe default standard deviations of the vision measurements are\n0.9 meters for x, 0.9 meters for y, and 0.9 radians for heading.\n\n:param kinematics:      A correctly-configured kinematics object for your\n                        drivetrain.\n:param gyroAngle:       The current gyro angle.\n:param modulePositions: The current distance and rotation measurements of\n                        the swerve modules.\n:param initialPose:     The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive3PoseEstimator",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param modulePositions:          The current distance and rotation measurements of\n                                 the swerve modules.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive3PoseEstimator3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive3PoseEstimator3d",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator3d with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, 0.1 meters for z, and 0.1 radians for\nangle. The default standard deviations of the vision measurements are 0.9\nmeters for x, 0.9 meters for y, 0.9 meters for z, and 0.9 radians for\nangle.\n\n:param kinematics:      A correctly-configured kinematics object for your\n                        drivetrain.\n:param gyroAngle:       The current gyro angle.\n:param modulePositions: The current distance and rotation measurements of\n                        the swerve modules.\n:param initialPose:     The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive3PoseEstimator3d",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator3d.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param modulePositions:          The current distance and rotation measurements of\n                                 the swerve modules.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics._kinematics.SwerveDrive3Odometry3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "tooltip": "Constructs a PoseEstimator3d.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and z position\n                                 in meters, and angle in radians). Increase these numbers to trust the\n                                 vision pose measurement less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "tooltip": "Constructs a PoseEstimator.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive3PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive3PoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive4PoseEstimator",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive4PoseEstimator",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, and 0.1 radians for heading.\nThe default standard deviations of the vision measurements are\n0.9 meters for x, 0.9 meters for y, and 0.9 radians for heading.\n\n:param kinematics:      A correctly-configured kinematics object for your\n                        drivetrain.\n:param gyroAngle:       The current gyro angle.\n:param modulePositions: The current distance and rotation measurements of\n                        the swerve modules.\n:param initialPose:     The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive4PoseEstimator",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param modulePositions:          The current distance and rotation measurements of\n                                 the swerve modules.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive4PoseEstimator3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive4PoseEstimator3d",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator3d with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, 0.1 meters for z, and 0.1 radians for\nangle. The default standard deviations of the vision measurements are 0.9\nmeters for x, 0.9 meters for y, 0.9 meters for z, and 0.9 radians for\nangle.\n\n:param kinematics:      A correctly-configured kinematics object for your\n                        drivetrain.\n:param gyroAngle:       The current gyro angle.\n:param modulePositions: The current distance and rotation measurements of\n                        the swerve modules.\n:param initialPose:     The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive4PoseEstimator3d",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator3d.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param modulePositions:          The current distance and rotation measurements of\n                                 the swerve modules.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics._kinematics.SwerveDrive4Odometry3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "tooltip": "Constructs a PoseEstimator3d.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and z position\n                                 in meters, and angle in radians). Increase these numbers to trust the\n                                 vision pose measurement less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "tooltip": "Constructs a PoseEstimator.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive4PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive4PoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive6PoseEstimator",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive6PoseEstimator",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, and 0.1 radians for heading.\nThe default standard deviations of the vision measurements are\n0.9 meters for x, 0.9 meters for y, and 0.9 radians for heading.\n\n:param kinematics:      A correctly-configured kinematics object for your\n                        drivetrain.\n:param gyroAngle:       The current gyro angle.\n:param modulePositions: The current distance and rotation measurements of\n                        the swerve modules.\n:param initialPose:     The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive6PoseEstimator",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param modulePositions:          The current distance and rotation measurements of\n                                 the swerve modules.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive6PoseEstimator3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive6PoseEstimator3d",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator3d with default standard deviations\nfor the model and vision measurements.\n\nThe default standard deviations of the model states are\n0.1 meters for x, 0.1 meters for y, 0.1 meters for z, and 0.1 radians for\nangle. The default standard deviations of the vision measurements are 0.9\nmeters for x, 0.9 meters for y, 0.9 meters for z, and 0.9 radians for\nangle.\n\n:param kinematics:      A correctly-configured kinematics object for your\n                        drivetrain.\n:param gyroAngle:       The current gyro angle.\n:param modulePositions: The current distance and rotation measurements of\n                        the swerve modules.\n:param initialPose:     The starting pose estimate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive6PoseEstimator3d",
                    "tooltip": "Constructs a SwerveDrivePoseEstimator3d.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param gyroAngle:                The current gyro angle.\n:param modulePositions:          The current distance and rotation measurements of\n                                 the swerve modules.\n:param initialPose:              The starting pose estimate.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics._kinematics.SwerveDrive6Odometry3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "tooltip": "Constructs a PoseEstimator3d.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and z position\n                                 in meters, and angle in radians). Increase these numbers to trust the\n                                 vision pose measurement less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetFPGATimestamp(). This means that you should use\n                        frc::Timer::GetFPGATimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetFPGATimestamp(). This means that you should use\n                                 frc::Timer::GetFPGATimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimator3dBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "odometry",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "stateStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "tooltip": "Constructs a PoseEstimator.\n\n@warning The initial pose estimate will always be the default pose,\nregardless of the odometry's current pose.\n\n:param kinematics:               A correctly-configured kinematics object for your\n                                 drivetrain.\n:param odometry:                 A correctly-configured odometry object for your drivetrain.\n:param stateStdDevs:             Standard deviations of the pose estimate (x position in\n                                 meters, y position in meters, and heading in radians). Increase these\n                                 numbers to trust your state estimate less.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\n:param visionRobotPose: The pose of the robot as measured by the vision\n                        camera.\n:param timestamp:       The timestamp of the vision measurement in seconds. Note\n                        that if you don't use your own time source by calling UpdateWithTime(),\n                        then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                        the epoch of this timestamp is the same epoch as\n                        frc::Timer::GetTimestamp(). This means that you should use\n                        frc::Timer::GetTimestamp() as your time source in this case."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionRobotPose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "addVisionMeasurement",
                    "returnType": "None",
                    "tooltip": "Adds a vision measurement to the Kalman Filter. This will correct\nthe odometry pose estimate while still accounting for measurement noise.\n\nThis method can be called as infrequently as you want, as long as you are\ncalling Update() every loop.\n\nTo promote stability of the pose estimate and make it robust to bad vision\ndata, we recommend only adding vision measurements that are already within\none meter or so of the current pose estimate.\n\nNote that the vision measurement standard deviations passed into this\nmethod will continue to apply to future measurements until a subsequent\ncall to SetVisionMeasurementStdDevs() or this method.\n\n:param visionRobotPose:          The pose of the robot as measured by the vision\n                                 camera.\n:param timestamp:                The timestamp of the vision measurement in seconds. Note\n                                 that if you don't use your own time source by calling UpdateWithTime(),\n                                 then you must use a timestamp with an epoch since FPGA startup (i.e.,\n                                 the epoch of this timestamp is the same epoch as\n                                 frc::Timer::GetTimestamp(). This means that you should use\n                                 frc::Timer::GetTimestamp() as your time source in this case.\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "getEstimatedPosition",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Gets the estimated robot pose.\n\n:returns: The estimated robot pose in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the robot's pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset in the user's robot code.\nThe library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n:param pose:           The estimated pose of the robot on the field."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's rotation.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the robot's translation.\n\n:param translation: The pose to translation to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "timestamp",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "sampleAt",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Return the pose at a given timestamp, if the buffer is not empty.\n\n:param timestamp: The pose's timestamp.\n\n:returns: The pose at the given timestamp (or std::nullopt if the buffer is\n          empty)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "visionMeasurementStdDevs",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "setVisionMeasurementStdDevs",
                    "returnType": "None",
                    "tooltip": "Sets the pose estimator's trust in vision measurements. This might be used\nto change trust in vision measurements after the autonomous period, or to\nchange trust as distance to a vision target increases.\n\n:param visionMeasurementStdDevs: Standard deviations of the vision pose\n                                 measurement (x position in meters, y position in meters, and heading in\n                                 radians). Increase these numbers to trust the vision pose measurement\n                                 less."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.estimator.SwerveDrive6PoseEstimatorBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.estimator.SwerveDrive6PoseEstimatorBase",
                    "functionName": "updateWithTime",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the pose estimator with wheel encoder and gyro information. This\nshould be called every loop.\n\n:param currentTime:    The time at which this method was called.\n:param gyroAngle:      The current gyro angle.\n:param wheelPositions: The distances traveled by the encoders.\n\n:returns: The estimated pose of the robot in meters."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.estimator",
            "staticMethods": []
        },
        {
            "className": "wpimath.filter.Debouncer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "debounceTime",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "<DebounceType.kRising: 0>",
                            "name": "type",
                            "type": "wpimath.filter.Debouncer.DebounceType"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.Debouncer",
                    "functionName": "__init__",
                    "returnType": "wpimath.filter.Debouncer",
                    "tooltip": "Creates a new Debouncer.\n\n:param debounceTime: The number of seconds the value must change from\n                     baseline for the filtered value to change.\n:param type:         Which type of state change the debouncing will be\n                     performed on."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.Debouncer"
                        },
                        {
                            "defaultValue": "",
                            "name": "input",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.Debouncer",
                    "functionName": "calculate",
                    "returnType": "bool",
                    "tooltip": "Applies the debouncer to the input stream.\n\n:param input: The current value of the input stream.\n\n:returns: The debounced value of the input stream."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.Debouncer"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.Debouncer",
                    "functionName": "getDebounceTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gets the time to debounce.\n\n:returns: The number of seconds the value must change from baseline\n          for the filtered value to change."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.Debouncer"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.Debouncer",
                    "functionName": "getDebounceType",
                    "returnType": "wpimath.filter.Debouncer.DebounceType",
                    "tooltip": "Get the debounce type.\n\n:returns: Which type of state change the debouncing will be performed on."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.Debouncer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.Debouncer",
                    "functionName": "setDebounceTime",
                    "returnType": "None",
                    "tooltip": "Sets the time to debounce.\n\n:param time: The number of seconds the value must change from baseline\n             for the filtered value to change."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.Debouncer"
                        },
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "wpimath.filter.Debouncer.DebounceType"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.Debouncer",
                    "functionName": "setDebounceType",
                    "returnType": "None",
                    "tooltip": "Set the debounce type.\n\n:param type: Which type of state change the debouncing will be performed on."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.filter",
            "staticMethods": []
        },
        {
            "className": "wpimath.filter.Debouncer.DebounceType",
            "classVariables": [
                {
                    "name": "kBoth",
                    "tooltip": "",
                    "type": "wpimath.filter.Debouncer.DebounceType",
                    "writable": false
                },
                {
                    "name": "kFalling",
                    "tooltip": "",
                    "type": "wpimath.filter.Debouncer.DebounceType",
                    "writable": false
                },
                {
                    "name": "kRising",
                    "tooltip": "",
                    "type": "wpimath.filter.Debouncer.DebounceType",
                    "writable": false
                }
            ],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.Debouncer.DebounceType",
                    "functionName": "__init__",
                    "returnType": "wpimath.filter.Debouncer.DebounceType",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "name",
                    "tooltip": "name(self: object, /) -> str\n",
                    "type": "str",
                    "writable": false
                },
                {
                    "name": "value",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.filter",
            "staticMethods": []
        },
        {
            "className": "wpimath.filter.LinearFilter",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "ffGains",
                            "type": "List[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "fbGains",
                            "type": "List[typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.LinearFilter",
                    "functionName": "__init__",
                    "returnType": "wpimath.filter.LinearFilter",
                    "tooltip": "Create a linear FIR or IIR filter.\n\n:param ffGains: The \"feedforward\" or FIR gains.\n:param fbGains: The \"feedback\" or IIR gains."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.LinearFilter"
                        },
                        {
                            "defaultValue": "",
                            "name": "input",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.LinearFilter",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Calculates the next value of the filter.\n\n:param input: Current input value.\n\n:returns: The filtered value at this step"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.LinearFilter"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.LinearFilter",
                    "functionName": "lastValue",
                    "returnType": "float",
                    "tooltip": "Returns the last value calculated by the LinearFilter.\n\n:returns: The last value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.LinearFilter"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.LinearFilter",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Reset the filter state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.LinearFilter"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputBuffer",
                            "type": "List[typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "outputBuffer",
                            "type": "List[typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.LinearFilter",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the filter state, initializing internal buffers to the provided\nvalues.\n\nThese are the expected lengths of the buffers, depending on what type of\nlinear filter used:\n\n<table>\n<tr>\n<th>Type</th>\n<th>Input Buffer Size</th>\n<th>Output Buffer Size</th>\n</tr>\n<tr>\n<td>Unspecified</td>\n<td>size of ``ffGains``</td>\n<td>size of ``fbGains``</td>\n</tr>\n<tr>\n<td>Single Pole IIR</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>High-Pass</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Moving Average</td>\n<td>``taps``</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Finite Difference</td>\n<td>size of ``stencil``</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Backward Finite Difference</td>\n<td>``Samples``</td>\n<td>0</td>\n</tr>\n</table>\n\n:param inputBuffer:  Values to initialize input buffer.\n:param outputBuffer: Values to initialize output buffer.\n                     @throws std::runtime_error if size of inputBuffer or outputBuffer does not\n                     match the size of ffGains and fbGains provided in the constructor."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.filter",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "timeConstant",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.LinearFilter",
                    "functionName": "highPass",
                    "returnType": "wpimath.filter.LinearFilter",
                    "tooltip": "Creates a first-order high-pass filter of the form:\ny[n] = gain x[n] + (-gain) x[n-1] + gain y[n-1]\nwhere gain = e:sup:`-dt / T`, T is the time constant in seconds\n\nNote: T = 1 / (2\u03c0f) where f is the cutoff frequency in Hz, the frequency\nbelow which the input starts to attenuate.\n\nThis filter is stable for time constants greater than zero.\n\n:param timeConstant: The discrete-time time constant in seconds.\n:param period:       The period in seconds between samples taken by the\n                     user."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "taps",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.LinearFilter",
                    "functionName": "movingAverage",
                    "returnType": "wpimath.filter.LinearFilter",
                    "tooltip": "Creates a K-tap FIR moving average filter of the form:\ny[n] = 1/k (x[k] + x[k-1] + \u2026 + x[0])\n\nThis filter is always stable.\n\n:param taps: The number of samples to average over. Higher = smoother but\n             slower\n             @throws std::runtime_error if number of taps is less than 1."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "timeConstant",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "period",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.LinearFilter",
                    "functionName": "singlePoleIIR",
                    "returnType": "wpimath.filter.LinearFilter",
                    "tooltip": "Creates a one-pole IIR low-pass filter of the form:\ny[n] = (1 - gain) x[n] + gain y[n-1]\nwhere gain = e:sup:`-dt / T`, T is the time constant in seconds\n\nNote: T = 1 / (2\u03c0f) where f is the cutoff frequency in Hz, the frequency\nabove which the input starts to attenuate.\n\nThis filter is stable for time constants greater than zero.\n\n:param timeConstant: The discrete-time time constant in seconds.\n:param period:       The period in seconds between samples taken by the\n                     user."
                }
            ]
        },
        {
            "className": "wpimath.filter.MedianFilter",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "size",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.MedianFilter",
                    "functionName": "__init__",
                    "returnType": "wpimath.filter.MedianFilter",
                    "tooltip": "Creates a new MedianFilter.\n\n:param size: The number of samples in the moving window."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.MedianFilter"
                        },
                        {
                            "defaultValue": "",
                            "name": "next",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.MedianFilter",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Calculates the moving-window median for the next value of the input stream.\n\n:param next: The next input value.\n\n:returns: The median of the moving window, updated to include the next value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.MedianFilter"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.MedianFilter",
                    "functionName": "lastValue",
                    "returnType": "float",
                    "tooltip": "Returns the last value calculated by the MedianFilter.\n\n:returns: The last value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.MedianFilter"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.MedianFilter",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the filter, clearing the window of all elements."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.filter",
            "staticMethods": []
        },
        {
            "className": "wpimath.filter.SlewRateLimiter",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "positiveRateLimit",
                            "type": "wpimath.units.units_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "negativeRateLimit",
                            "type": "wpimath.units.units_per_second"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "initialValue",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.SlewRateLimiter",
                    "functionName": "__init__",
                    "returnType": "wpimath.filter.SlewRateLimiter",
                    "tooltip": "Creates a new SlewRateLimiter with the given positive and negative rate\nlimits and initial value.\n\n:param positiveRateLimit: The rate-of-change limit in the positive\n                          direction, in units per second. This is expected\n                          to be positive.\n:param negativeRateLimit: The rate-of-change limit in the negative\n                          direction, in units per second. This is expected\n                          to be negative.\n:param initialValue:      The initial value of the input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rateLimit",
                            "type": "wpimath.units.units_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.SlewRateLimiter",
                    "functionName": "__init__",
                    "returnType": "wpimath.filter.SlewRateLimiter",
                    "tooltip": "Creates a new SlewRateLimiter with the given positive rate limit and\nnegative rate limit of -rateLimit.\n\n:param rateLimit: The rate-of-change limit."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.SlewRateLimiter"
                        },
                        {
                            "defaultValue": "",
                            "name": "input",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.SlewRateLimiter",
                    "functionName": "calculate",
                    "returnType": "float",
                    "tooltip": "Filters the input to limit its slew rate.\n\n:param input: The input value whose slew rate is to be limited.\n\n:returns: The filtered value, which will not change faster than the slew\n          rate."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.SlewRateLimiter"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.SlewRateLimiter",
                    "functionName": "lastValue",
                    "returnType": "float",
                    "tooltip": "Returns the value last calculated by the SlewRateLimiter.\n\n:returns: The last value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.filter.SlewRateLimiter"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.filter.SlewRateLimiter",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Resets the slew rate limiter to the specified value; ignores the rate limit\nwhen doing so.\n\n:param value: The value to reset to."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.filter",
            "staticMethods": []
        },
        {
            "className": "wpimath.geometry.CoordinateAxis",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "z",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.CoordinateAxis",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.CoordinateAxis",
                    "tooltip": "Constructs a coordinate system axis within the NWU coordinate system and\nnormalizes it.\n\n:param x: The x component.\n:param y: The y component.\n:param z: The z component."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateAxis",
                    "functionName": "D",
                    "returnType": "wpimath.geometry.CoordinateAxis",
                    "tooltip": "Returns a coordinate axis corresponding to -Z in the NWU coordinate system."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateAxis",
                    "functionName": "E",
                    "returnType": "wpimath.geometry.CoordinateAxis",
                    "tooltip": "Returns a coordinate axis corresponding to -Y in the NWU coordinate system."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateAxis",
                    "functionName": "N",
                    "returnType": "wpimath.geometry.CoordinateAxis",
                    "tooltip": "Returns a coordinate axis corresponding to +X in the NWU coordinate system."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateAxis",
                    "functionName": "S",
                    "returnType": "wpimath.geometry.CoordinateAxis",
                    "tooltip": "Returns a coordinate axis corresponding to -X in the NWU coordinate system."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateAxis",
                    "functionName": "U",
                    "returnType": "wpimath.geometry.CoordinateAxis",
                    "tooltip": "Returns a coordinate axis corresponding to +Z in the NWU coordinate system."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateAxis",
                    "functionName": "W",
                    "returnType": "wpimath.geometry.CoordinateAxis",
                    "tooltip": "Returns a coordinate axis corresponding to +Y in the NWU coordinate system."
                }
            ]
        },
        {
            "className": "wpimath.geometry.CoordinateSystem",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "positiveX",
                            "type": "wpimath.geometry.CoordinateAxis"
                        },
                        {
                            "defaultValue": "",
                            "name": "positiveY",
                            "type": "wpimath.geometry.CoordinateAxis"
                        },
                        {
                            "defaultValue": "",
                            "name": "positiveZ",
                            "type": "wpimath.geometry.CoordinateAxis"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.CoordinateSystem",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.CoordinateSystem",
                    "tooltip": "Constructs a coordinate system with the given cardinal directions for each\naxis.\n\n:param positiveX: The cardinal direction of the positive x-axis.\n:param positiveY: The cardinal direction of the positive y-axis.\n:param positiveZ: The cardinal direction of the positive z-axis.\n                  @throws std::domain_error if the coordinate system isn't special orthogonal"
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateSystem",
                    "functionName": "EDN",
                    "returnType": "wpimath.geometry.CoordinateSystem",
                    "tooltip": "Returns an instance of the East-Down-North (EDN) coordinate system.\n\nThe +X axis is east, the +Y axis is down, and the +Z axis is north."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateSystem",
                    "functionName": "NED",
                    "returnType": "wpimath.geometry.CoordinateSystem",
                    "tooltip": "Returns an instance of the NED coordinate system.\n\nThe +X axis is north, the +Y axis is east, and the +Z axis is down."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.CoordinateSystem",
                    "functionName": "NWU",
                    "returnType": "wpimath.geometry.CoordinateSystem",
                    "tooltip": "Returns an instance of the North-West-Up (NWU) coordinate system.\n\nThe +X axis is north, the +Y axis is west, and the +Z axis is up."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "from_",
                            "type": "wpimath.geometry.CoordinateSystem"
                        },
                        {
                            "defaultValue": "",
                            "name": "to",
                            "type": "wpimath.geometry.CoordinateSystem"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.CoordinateSystem",
                    "functionName": "convert",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Converts the given translation from one coordinate system to another.\n\n:param translation: The translation to convert.\n:param from_:       The coordinate system the translation starts in.\n:param to:          The coordinate system to which to convert.\n\n:returns: The given translation in the desired coordinate system."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "from_",
                            "type": "wpimath.geometry.CoordinateSystem"
                        },
                        {
                            "defaultValue": "",
                            "name": "to",
                            "type": "wpimath.geometry.CoordinateSystem"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.CoordinateSystem",
                    "functionName": "convert",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Converts the given rotation from one coordinate system to another.\n\n:param rotation: The rotation to convert.\n:param from_:    The coordinate system the rotation starts in.\n:param to:       The coordinate system to which to convert.\n\n:returns: The given rotation in the desired coordinate system."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "from_",
                            "type": "wpimath.geometry.CoordinateSystem"
                        },
                        {
                            "defaultValue": "",
                            "name": "to",
                            "type": "wpimath.geometry.CoordinateSystem"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.CoordinateSystem",
                    "functionName": "convert",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Converts the given pose from one coordinate system to another.\n\n:param pose:  The pose to convert.\n:param from_: The coordinate system the pose starts in.\n:param to:    The coordinate system to which to convert.\n\n:returns: The given pose in the desired coordinate system."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "transform",
                            "type": "wpimath.geometry.Transform3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "from_",
                            "type": "wpimath.geometry.CoordinateSystem"
                        },
                        {
                            "defaultValue": "",
                            "name": "to",
                            "type": "wpimath.geometry.CoordinateSystem"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.CoordinateSystem",
                    "functionName": "convert",
                    "returnType": "wpimath.geometry.Transform3d",
                    "tooltip": "Converts the given transform from one coordinate system to another.\n\n:param transform: The transform to convert.\n:param from_:     The coordinate system the transform starts in.\n:param to:        The coordinate system to which to convert.\n\n:returns: The given transform in the desired coordinate system."
                }
            ]
        },
        {
            "className": "wpimath.geometry.Ellipse2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "xSemiAxis",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "ySemiAxis",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Ellipse2d",
                    "tooltip": "Constructs an ellipse around a center point and two semi-axes, a horizontal\nand vertical one.\n\n:param center:    The center of the ellipse.\n:param xSemiAxis: The x semi-axis.\n:param ySemiAxis: The y semi-axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "radius",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Ellipse2d",
                    "tooltip": "Constructs a perfectly circular ellipse with the specified radius.\n\n:param center: The center of the circle.\n:param radius: The radius of the circle."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "center",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the center of the ellipse.\n\n:returns: The center of the ellipse."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "contains",
                    "returnType": "bool",
                    "tooltip": "Checks if a point is contained within this ellipse. This is inclusive, if\nthe point lies on the circumference this will return ``true``.\n\n:param point: The point to check.\n\n:returns: True, if the point is within or on the ellipse."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "distance",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the distance between the perimeter of the ellipse and the point.\n\n:param point: The point to check.\n\n:returns: The distance (0, if the point is contained by the ellipse)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "focalPoints",
                    "returnType": "Tuple[wpimath.geometry.Translation2d, wpimath.geometry.Translation2d]",
                    "tooltip": "Returns the focal points of the ellipse. In a perfect circle, this will\nalways return the center.\n\n:returns: The focal points."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "intersects",
                    "returnType": "bool",
                    "tooltip": "Checks if a point is intersected by this ellipse's circumference.\n\n:param point: The point to check.\n\n:returns: True, if this ellipse's circumference intersects the point."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "nearest",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the nearest point that is contained within the ellipse.\n\n:param point: The point that this will find the nearest point to.\n\n:returns: A new point that is nearest to ``point`` and contained in the\n          ellipse."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "rotateBy",
                    "returnType": "wpimath.geometry.Ellipse2d",
                    "tooltip": "Rotates the center of the ellipse and returns the new ellipse.\n\n:param other: The rotation to transform by.\n\n:returns: The rotated ellipse."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "rotation",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Returns the rotational component of the ellipse.\n\n:returns: The rotational component of the ellipse."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Ellipse2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "transformBy",
                    "returnType": "wpimath.geometry.Ellipse2d",
                    "tooltip": "Transforms the center of the ellipse and returns the new ellipse.\n\n:param other: The transform to transform by.\n\n:returns: The transformed ellipse."
                }
            ],
            "instanceVariables": [
                {
                    "name": "xsemiaxis",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "xsemiaxis_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "ysemiaxis",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "ysemiaxis_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "xSemiAxis",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "ySemiAxis",
                            "type": "wpimath.units.feet"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Ellipse2d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Ellipse2d",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.geometry.Pose2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Constructs a pose at the origin facing toward the positive X axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Constructs a pose with the specified translation and rotation.\n\n:param translation: The translational component of the pose.\n:param rotation:    The rotational component of the pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Constructs a pose with x and y translations instead of a separate\nTranslation2d.\n\n:param x:        The x component of the translational component of the pose.\n:param y:        The y component of the translational component of the pose.\n:param rotation: The rotational component of the pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "X",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the X component of the pose's translation.\n\n:returns: The x component of the pose's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "Y",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Y component of the pose's translation.\n\n:returns: The y component of the pose's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "twist",
                            "type": "wpimath.geometry.Twist2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "exp",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Obtain a new Pose2d from a (constant curvature) velocity.\n\nSee https://file.tavsys.net/control/controls-engineering-in-frc.pdf section\n10.2 \"Pose exponential\" for a derivation.\n\nThe twist is a change in pose in the robot's coordinate frame since the\nprevious pose update. When the user runs exp() on the previous known\nfield-relative pose with the argument being the twist, the user will\nreceive the new field-relative pose.\n\n\"Exp\" represents the pose exponential, which is solving a differential\nequation moving the pose forward in time.\n\n:param twist: The change in pose in the robot's coordinate frame since the\n              previous pose update. For example, if a non-holonomic robot moves forward\n              0.01 meters and changes angle by 0.5 degrees since the previous pose\n              update, the twist would be Twist2d{0.01_m, 0_m, 0.5_deg}.\n\n:returns: The new pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "log",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Returns a Twist2d that maps this pose to the end pose. If c is the output\nof a.Log(b), then a.Exp(c) would yield b.\n\n:param end: The end pose for the transformation.\n\n:returns: The twist that maps this to end."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "poses",
                            "type": "List[wpimath.geometry.Pose2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "nearest",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the nearest Pose2d from a collection of poses.\n\nIf two or more poses in the collection have the same distance from this\npose, return the one with the closest rotation component.\n\n:param poses: The collection of poses.\n\n:returns: The nearest Pose2d from the collection."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "relativeTo",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the current pose relative to the given pose.\n\nThis function can often be used for trajectory tracking or pose\nstabilization algorithms to get the error between the reference and the\ncurrent pose.\n\n:param other: The pose that is the origin of the new coordinate frame that\n              the current pose will be converted into.\n\n:returns: The current pose relative to the new origin pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rot",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "rotateAround",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Rotates the current pose around a point in 2D space.\n\n:param point: The point in 2D space to rotate around.\n:param rot:   The rotation to rotate the pose by.\n\n:returns: The new rotated pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "rotateBy",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Rotates the pose around the origin and returns the new pose.\n\n:param other: The rotation to transform the pose by.\n\n:returns: The rotated pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "rotation",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Returns the underlying rotation.\n\n:returns: Reference to the rotational component of the pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "toMatrix",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Returns an affine transformation matrix representation of this pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "transformBy",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Transforms the pose by the given transformation and returns the new pose.\nSee + operator for the matrix multiplication performed.\n\n:param other: The transform to transform the pose by.\n\n:returns: The transformed pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "translation",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the underlying translation.\n\n:returns: Reference to the translational component of the pose."
                }
            ],
            "instanceVariables": [
                {
                    "name": "x",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "x_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "y",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "y_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "matrix",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose2d",
                    "functionName": "fromMatrix",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Constructs a pose with the specified affine transformation matrix.\n\n:param matrix: The affine transformation matrix.\n               @throws std::domain_error if the affine transformation matrix is invalid."
                }
            ]
        },
        {
            "className": "wpimath.geometry.Pose3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Constructs a pose at the origin facing toward the positive X axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Constructs a pose with the specified translation and rotation.\n\n:param translation: The translational component of the pose.\n:param rotation:    The rotational component of the pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "z",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Constructs a pose with x, y, and z translations instead of a separate\nTranslation3d.\n\n:param x:        The x component of the translational component of the pose.\n:param y:        The y component of the translational component of the pose.\n:param z:        The z component of the translational component of the pose.\n:param rotation: The rotational component of the pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Constructs a 3D pose from a 2D pose in the X-Y plane.\n\n:param pose: The 2D pose.\n             @see Rotation3d(Rotation2d)\n             @see Translation3d(Translation2d)"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "X",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the X component of the pose's translation.\n\n:returns: The x component of the pose's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "Y",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Y component of the pose's translation.\n\n:returns: The y component of the pose's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "Z",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Z component of the pose's translation.\n\n:returns: The z component of the pose's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "twist",
                            "type": "wpimath.geometry.Twist3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "exp",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Obtain a new Pose3d from a (constant curvature) velocity.\n\nThe twist is a change in pose in the robot's coordinate frame since the\nprevious pose update. When the user runs exp() on the previous known\nfield-relative pose with the argument being the twist, the user will\nreceive the new field-relative pose.\n\n\"Exp\" represents the pose exponential, which is solving a differential\nequation moving the pose forward in time.\n\n:param twist: The change in pose in the robot's coordinate frame since the\n              previous pose update. For example, if a non-holonomic robot moves forward\n              0.01 meters and changes angle by 0.5 degrees since the previous pose\n              update, the twist would be Twist3d{0.01_m, 0_m, 0_m, Rotation3d{0.0, 0.0,\n              0.5_deg}}.\n\n:returns: The new pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "log",
                    "returnType": "wpimath.geometry.Twist3d",
                    "tooltip": "Returns a Twist3d that maps this pose to the end pose. If c is the output\nof a.Log(b), then a.Exp(c) would yield b.\n\n:param end: The end pose for the transformation.\n\n:returns: The twist that maps this to end."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "poses",
                            "type": "List[wpimath.geometry.Pose3d]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "nearest",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Returns the nearest Pose3d from a collection of poses.\n\nIf two or more poses in the collection have the same distance from this\npose, return the one with the closest rotation component.\n\n:param poses: The collection of poses.\n\n:returns: The nearest Pose3d from the collection."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "relativeTo",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Returns the current pose relative to the given pose.\n\nThis function can often be used for trajectory tracking or pose\nstabilization algorithms to get the error between the reference and the\ncurrent pose.\n\n:param other: The pose that is the origin of the new coordinate frame that\n              the current pose will be converted into.\n\n:returns: The current pose relative to the new origin pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rot",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "rotateAround",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Rotates the current pose around a point in 3D space.\n\n:param point: The point in 3D space to rotate around.\n:param rot:   The rotation to rotate the pose by.\n\n:returns: The new rotated pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "rotateBy",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Rotates the pose around the origin and returns the new pose.\n\n:param other: The rotation to transform the pose by, which is applied\n              extrinsically (from the global frame).\n\n:returns: The rotated pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "rotation",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Returns the underlying rotation.\n\n:returns: Reference to the rotational component of the pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "toMatrix",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[4, 4]\"]",
                    "tooltip": "Returns an affine transformation matrix representation of this pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "toPose2d",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns a Pose2d representing this Pose3d projected into the X-Y plane."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "transformBy",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Transforms the pose by the given transformation and returns the new\ntransformed pose. The transform is applied relative to the pose's frame.\nNote that this differs from Pose3d::RotateBy(const Rotation3d&), which is\napplied relative to the global frame and around the origin.\n\n:param other: The transform to transform the pose by.\n\n:returns: The transformed pose."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "translation",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Returns the underlying translation.\n\n:returns: Reference to the translational component of the pose."
                }
            ],
            "instanceVariables": [
                {
                    "name": "x",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "x_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "y",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "y_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "z",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "z_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "z",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "matrix",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[4, 4]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Pose3d",
                    "functionName": "fromMatrix",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": "Constructs a pose with the specified affine transformation matrix.\n\n:param matrix: The affine transformation matrix.\n               @throws std::domain_error if the affine transformation matrix is invalid."
                }
            ]
        },
        {
            "className": "wpimath.geometry.Quaternion",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Constructs a quaternion with a default angle of 0 degrees."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "w",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "z",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Constructs a quaternion with the given components.\n\n:param w: W component of the quaternion.\n:param x: X component of the quaternion.\n:param y: Y component of the quaternion.\n:param z: Z component of the quaternion."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "W",
                    "returnType": "float",
                    "tooltip": "Returns W component of the quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "X",
                    "returnType": "float",
                    "tooltip": "Returns X component of the quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "Y",
                    "returnType": "float",
                    "tooltip": "Returns Y component of the quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "Z",
                    "returnType": "float",
                    "tooltip": "Returns Z component of the quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "conjugate",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Returns the conjugate of the quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "dot",
                    "returnType": "float",
                    "tooltip": "Returns the elementwise product of two quaternions."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "exp",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Matrix exponential of a quaternion.\n\n:param other: the \"Twist\" that will be applied to this quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "exp",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Matrix exponential of a quaternion.\n\nsource: wpimath/algorithms.md\n\nIf this quaternion is in \ud835\udd98\ud835\udd94(3) and you are looking for an element of\nSO(3), use FromRotationVector"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "inverse",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Returns the inverse of the quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "log",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Log operator of a quaternion.\n\n:param other: The quaternion to map this quaternion onto"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "log",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Log operator of a quaternion.\n\nsource:  wpimath/algorithms.md\n\nIf this quaternion is in SO(3) and you are looking for an element of \ud835\udd98\ud835\udd94(3),\nuse ToRotationVector"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "norm",
                    "returnType": "float",
                    "tooltip": "Calculates the L2 norm of the quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "normalize",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Normalizes the quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "pow",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Calculates this quaternion raised to a power.\n\n:param t: the power to raise this quaternion to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "toRotationVector",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the rotation vector representation of this quaternion.\n\nThis is also the log operator of SO(3)."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rvec",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Quaternion",
                    "functionName": "fromRotationVector",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Returns the quaternion representation of this rotation vector.\n\nThis is also the exp operator of \ud835\udd98\ud835\udd94(3).\n\nsource: wpimath/algorithms.md"
                }
            ]
        },
        {
            "className": "wpimath.geometry.Rectangle2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "xWidth",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "yWidth",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rectangle2d",
                    "tooltip": "Constructs a rectangle at the specified position with the specified width\nand height.\n\n:param center: The position (translation and rotation) of the rectangle.\n:param xWidth: The x size component of the rectangle, in unrotated\n               coordinate frame.\n:param yWidth: The y size component of the rectangle, in unrotated\n               coordinate frame."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "cornerA",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "cornerB",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rectangle2d",
                    "tooltip": "Creates an unrotated rectangle from the given corners. The corners should\nbe diagonally opposite of each other.\n\n:param cornerA: The first corner of the rectangle.\n:param cornerB: The second corner of the rectangle."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rectangle2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "center",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the center of the rectangle.\n\n:returns: The center of the rectangle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rectangle2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "contains",
                    "returnType": "bool",
                    "tooltip": "Checks if a point is contained within the rectangle. This is inclusive, if\nthe point lies on the perimeter it will return true.\n\n:param point: The point to check.\n\n:returns: True, if the rectangle contains the point or the perimeter\n          intersects the point."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rectangle2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "distance",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the distance between the perimeter of the rectangle and the point.\n\n:param point: The point to check.\n\n:returns: The distance (0, if the point is contained by the rectangle)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rectangle2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "intersects",
                    "returnType": "bool",
                    "tooltip": "Checks if a point is intersected by the rectangle's perimeter.\n\n:param point: The point to check.\n\n:returns: True, if the rectangle's perimeter intersects the point."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rectangle2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "point",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "nearest",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the nearest point that is contained within the rectangle.\n\n:param point: The point that this will find the nearest point to.\n\n:returns: A new point that is nearest to ``point`` and contained in the\n          rectangle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rectangle2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "rotateBy",
                    "returnType": "wpimath.geometry.Rectangle2d",
                    "tooltip": "Rotates the center of the rectangle and returns the new rectangle.\n\n:param other: The rotation to transform by.\n\n:returns: The rotated rectangle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rectangle2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "rotation",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Returns the rotational component of the rectangle.\n\n:returns: The rotational component of the rectangle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rectangle2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "transformBy",
                    "returnType": "wpimath.geometry.Rectangle2d",
                    "tooltip": "Transforms the center of the rectangle and returns the new rectangle.\n\n:param other: The transform to transform by.\n\n:returns: The transformed rectangle"
                }
            ],
            "instanceVariables": [
                {
                    "name": "xwidth",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "xwidth_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "ywidth",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "ywidth_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "xWidth",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "yWidth",
                            "type": "wpimath.units.feet"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rectangle2d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Rectangle2d",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.geometry.Rotation2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Constructs a Rotation2d with a default angle of 0 degrees."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Constructs a Rotation2d with the given radian value.\n:param value: The value of the angle in radians."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Constructs a Rotation2d with the given x and y (cosine and sine)\ncomponents. The x and y don't have to be normalized.\n\n:param x: The x component or cosine of the rotation.\n:param y: The y component or sine of the rotation."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "cos",
                    "returnType": "float",
                    "tooltip": "Returns the cosine of the rotation.\n\n:returns: The cosine of the rotation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "degrees",
                    "returnType": "wpimath.units.degrees",
                    "tooltip": "Returns the degree value of the rotation constrained within [-180, 180].\n\n:returns: The degree value of the rotation constrained within [-180, 180]."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "radians",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Returns the radian value of the rotation constrained within [-\u03c0, \u03c0].\n\n:returns: The radian value of the rotation constrained within [-\u03c0, \u03c0]."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "rotateBy",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Adds the new rotation to the current rotation using a rotation matrix.\n\n::\n\n  [cos_new]   [other.cos, -other.sin][cos]\n  [sin_new] = [other.sin,  other.cos][sin]\n  value_new = std::atan2(sin_new, cos_new)\n\n:param other: The rotation to rotate by.\n\n:returns: The new rotated Rotation2d."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "sin",
                    "returnType": "float",
                    "tooltip": "Returns the sine of the rotation.\n\n:returns: The sine of the rotation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "tan",
                    "returnType": "float",
                    "tooltip": "Returns the tangent of the rotation.\n\n:returns: The tangent of the rotation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "toMatrix",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns matrix representation of this rotation."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "wpimath.units.degrees"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "fromDegrees",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rotationMatrix",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "fromMatrix",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Constructs a Rotation2d from a rotation matrix.\n\n:param rotationMatrix: The rotation matrix.\n                       @throws std::domain_error if the rotation matrix isn't special orthogonal."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.units.turns"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation2d",
                    "functionName": "fromRotations",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.geometry.Rotation3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Constructs a Rotation3d representing no rotation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "q",
                            "type": "wpimath.geometry.Quaternion"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Constructs a Rotation3d from a quaternion.\n\n:param q: The quaternion."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "roll",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "pitch",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "",
                            "name": "yaw",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Constructs a Rotation3d from extrinsic roll, pitch, and yaw.\n\nExtrinsic rotations occur in that order around the axes in the fixed global\nframe rather than the body frame.\n\nAngles are measured counterclockwise with the rotation axis pointing \"out\nof the page\". If you point your right thumb along the positive axis\ndirection, your fingers curl in the direction of positive rotation.\n\n:param roll:  The counterclockwise rotation angle around the X axis (roll).\n:param pitch: The counterclockwise rotation angle around the Y axis (pitch).\n:param yaw:   The counterclockwise rotation angle around the Z axis (yaw)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "axis",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Constructs a Rotation3d with the given axis-angle representation. The axis\ndoesn't have to be normalized.\n\n:param axis:  The rotation axis.\n:param angle: The rotation around the axis."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rvec",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Constructs a Rotation3d with the given rotation vector representation. This\nrepresentation is equivalent to axis-angle, where the normalized axis is\nmultiplied by the rotation around the axis in radians.\n\n:param rvec: The rotation vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rotationMatrix",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Constructs a Rotation3d from a rotation matrix.\n\n:param rotationMatrix: The rotation matrix.\n                       @throws std::domain_error if the rotation matrix isn't special orthogonal."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "initial",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "final",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Constructs a Rotation3d that rotates the initial vector onto the final\nvector.\n\nThis is useful for turning a 3D vector (final) into an orientation relative\nto a coordinate system vector (initial).\n\n:param initial: The initial vector.\n:param final:   The final vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Constructs a 3D rotation from a 2D rotation in the X-Y plane.\n\n:param rotation: The 2D rotation.\n                 @see Pose3d(Pose2d)\n                 @see Transform3d(Transform2d)"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "X",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Returns the counterclockwise rotation angle around the X axis (roll)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "Y",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Returns the counterclockwise rotation angle around the Y axis (pitch)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "Z",
                    "returnType": "wpimath.units.radians",
                    "tooltip": "Returns the counterclockwise rotation angle around the Z axis (yaw)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "axis",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the axis in the axis-angle representation of this rotation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "getQuaternion",
                    "returnType": "wpimath.geometry.Quaternion",
                    "tooltip": "Returns the quaternion representation of the Rotation3d."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "rotateBy",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Adds the new rotation to the current rotation. The other rotation is\napplied extrinsically, which means that it rotates around the global axes.\nFor example, Rotation3d{90_deg, 0, 0}.RotateBy(Rotation3d{0, 45_deg, 0})\nrotates by 90 degrees around the +X axis and then by 45 degrees around the\nglobal +Y axis. (This is equivalent to Rotation3d{90_deg, 45_deg, 0})\n\n:param other: The extrinsic rotation to rotate by.\n\n:returns: The new rotated Rotation3d."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "toMatrix",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Returns rotation matrix representation of this rotation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "toRotation2d",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Returns a Rotation2d representing this Rotation3d projected into the X-Y\nplane."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "toVector",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns rotation vector representation of this rotation.\n\n:returns: Rotation vector representation of this rotation."
                }
            ],
            "instanceVariables": [
                {
                    "name": "angle",
                    "tooltip": "",
                    "type": "wpimath.units.radians",
                    "writable": false
                },
                {
                    "name": "angle_degrees",
                    "tooltip": "",
                    "type": "wpimath.units.degrees",
                    "writable": false
                },
                {
                    "name": "x",
                    "tooltip": "",
                    "type": "wpimath.units.radians",
                    "writable": false
                },
                {
                    "name": "x_degrees",
                    "tooltip": "",
                    "type": "wpimath.units.degrees",
                    "writable": false
                },
                {
                    "name": "y",
                    "tooltip": "",
                    "type": "wpimath.units.radians",
                    "writable": false
                },
                {
                    "name": "y_degrees",
                    "tooltip": "",
                    "type": "wpimath.units.degrees",
                    "writable": false
                },
                {
                    "name": "z",
                    "tooltip": "",
                    "type": "wpimath.units.radians",
                    "writable": false
                },
                {
                    "name": "z_degrees",
                    "tooltip": "",
                    "type": "wpimath.units.degrees",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "roll",
                            "type": "wpimath.units.degrees"
                        },
                        {
                            "defaultValue": "",
                            "name": "pitch",
                            "type": "wpimath.units.degrees"
                        },
                        {
                            "defaultValue": "",
                            "name": "yaw",
                            "type": "wpimath.units.degrees"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Rotation3d",
                    "functionName": "fromDegrees",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.geometry.Transform2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "initial",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "final",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform2d",
                    "tooltip": "Constructs the transform that maps the initial pose to the final pose.\n\n:param initial: The initial pose for the transformation.\n:param final:   The final pose for the transformation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform2d",
                    "tooltip": "Constructs a transform with the given translation and rotation components.\n\n:param translation: Translational component of the transform.\n:param rotation:    Rotational component of the transform."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform2d",
                    "tooltip": "Constructs a transform with x and y translations instead of a separate\nTranslation2d.\n\n:param x:        The x component of the translational component of the transform.\n:param y:        The y component of the translational component of the transform.\n:param rotation: The rotational component of the transform."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform2d",
                    "tooltip": "Constructs the identity transform -- maps an initial pose to itself."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform2d",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "X",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the X component of the transformation's translation.\n\n:returns: The x component of the transformation's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "Y",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Y component of the transformation's translation.\n\n:returns: The y component of the transformation's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "inverse",
                    "returnType": "wpimath.geometry.Transform2d",
                    "tooltip": "Invert the transformation. This is useful for undoing a transformation.\n\n:returns: The inverted transformation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "rotation",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Returns the rotational component of the transformation.\n\n:returns: Reference to the rotational component of the transform."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "toMatrix",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Returns an affine transformation matrix representation of this\ntransformation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "translation",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the translation component of the transformation.\n\n:returns: Reference to the translational component of the transform."
                }
            ],
            "instanceVariables": [
                {
                    "name": "x",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "x_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "y",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "y_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Transform2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "matrix",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform2d",
                    "functionName": "fromMatrix",
                    "returnType": "wpimath.geometry.Transform2d",
                    "tooltip": "Constructs a pose with the specified affine transformation matrix.\n\n:param matrix: The affine transformation matrix.\n               @throws std::domain_error if the affine transformation matrix is invalid."
                }
            ]
        },
        {
            "className": "wpimath.geometry.Transform3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "initial",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "final",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform3d",
                    "tooltip": "Constructs the transform that maps the initial pose to the final pose.\n\n:param initial: The initial pose for the transformation.\n:param final:   The final pose for the transformation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform3d",
                    "tooltip": "Constructs a transform with the given translation and rotation components.\n\n:param translation: Translational component of the transform.\n:param rotation:    Rotational component of the transform."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "z",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform3d",
                    "tooltip": "Constructs a transform with x, y, and z translations instead of a separate\nTranslation3d.\n\n:param x:        The x component of the translational component of the transform.\n:param y:        The y component of the translational component of the transform.\n:param z:        The z component of the translational component of the transform.\n:param rotation: The rotational component of the transform."
                },
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform3d",
                    "tooltip": "Constructs the identity transform -- maps an initial pose to itself."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "transform",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Transform3d",
                    "tooltip": "Constructs a 3D transform from a 2D transform in the X-Y plane.\n**\n\n:param transform: The 2D transform.\n                  @see Rotation3d(Rotation2d)\n                  @see Translation3d(Translation2d)"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "X",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the X component of the transformation's translation.\n\n:returns: The x component of the transformation's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "Y",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Y component of the transformation's translation.\n\n:returns: The y component of the transformation's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "Z",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Z component of the transformation's translation.\n\n:returns: The z component of the transformation's translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "inverse",
                    "returnType": "wpimath.geometry.Transform3d",
                    "tooltip": "Invert the transformation. This is useful for undoing a transformation.\n\n:returns: The inverted transformation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "rotation",
                    "returnType": "wpimath.geometry.Rotation3d",
                    "tooltip": "Returns the rotational component of the transformation.\n\n:returns: Reference to the rotational component of the transform."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "toMatrix",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[4, 4]\"]",
                    "tooltip": "Returns an affine transformation matrix representation of this\ntransformation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "translation",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Returns the translation component of the transformation.\n\n:returns: Reference to the translational component of the transform."
                }
            ],
            "instanceVariables": [
                {
                    "name": "x",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "x_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "y",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "y_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "z",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "z_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "matrix",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[4, 4]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Transform3d",
                    "functionName": "fromMatrix",
                    "returnType": "wpimath.geometry.Transform3d",
                    "tooltip": "Constructs a transform with the specified affine transformation matrix.\n\n:param matrix: The affine transformation matrix.\n               @throws std::domain_error if the affine transformation matrix is invalid."
                }
            ]
        },
        {
            "className": "wpimath.geometry.Translation2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Constructs a Translation2d with X and Y components equal to zero."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Constructs a Translation2d with the X and Y components equal to the\nprovided values.\n\n:param x: The x component of the translation.\n:param y: The y component of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "distance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Constructs a Translation2d with the provided distance and angle. This is\nessentially converting from polar coordinates to Cartesian coordinates.\n\n:param distance: The distance from the origin to the end of the translation.\n:param angle:    The angle between the x-axis and the translation vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "vector",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Constructs a Translation2d from a 2D translation vector. The values are\nassumed to be in meters.\n\n:param vector: The translation vector."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "X",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the X component of the translation.\n\n:returns: The X component of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "Y",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Y component of the translation.\n\n:returns: The Y component of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "angle",
                    "returnType": "wpimath.geometry.Rotation2d",
                    "tooltip": "Returns the angle this translation forms with the positive X axis.\n\n:returns: The angle of the translation"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "distance",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Calculates the distance between two translations in 2D space.\n\nThe distance between translations is defined as \u221a((x\u2082\u2212x\u2081)\u00b2+(y\u2082\u2212y\u2081)\u00b2).\n\n:param other: The translation to compute the distance to.\n\n:returns: The distance between the two translations."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "distanceFeet",
                    "returnType": "wpimath.units.feet",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "translations",
                            "type": "List[wpimath.geometry.Translation2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "nearest",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the nearest Translation2d from a collection of translations\n\n:param translations: The collection of translations.\n\n:returns: The nearest Translation2d from the collection."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "norm",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the norm, or distance from the origin to the translation.\n\n:returns: The norm of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "normFeet",
                    "returnType": "wpimath.units.feet",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rot",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "rotateAround",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Rotates this translation around another translation in 2D space.\n\n::\n\n  [x_new]   [rot.cos, -rot.sin][x - other.x]   [other.x]\n  [y_new] = [rot.sin,  rot.cos][y - other.y] + [other.y]\n\n:param other: The other translation to rotate around.\n:param rot:   The rotation to rotate the translation by.\n\n:returns: The new rotated translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "rotateBy",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Applies a rotation to the translation in 2D space.\n\nThis multiplies the translation vector by a counterclockwise rotation\nmatrix of the given angle.\n\n::\n\n  [x_new]   [other.cos, -other.sin][x]\n  [y_new] = [other.sin,  other.cos][y]\n\nFor example, rotating a Translation2d of &lt;2, 0&gt; by 90 degrees will\nreturn a Translation2d of &lt;0, 2&gt;.\n\n:param other: The rotation to rotate the translation by.\n\n:returns: The new rotated translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "toVector",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns a 2D translation vector representation of this translation.\n\n:returns: A 2D translation vector representation of this translation."
                }
            ],
            "instanceVariables": [
                {
                    "name": "x",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "x_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "y",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "y_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.feet"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "distance",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation2d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.geometry.Translation3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Constructs a Translation3d with X, Y, and Z components equal to zero."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "z",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Constructs a Translation3d with the X, Y, and Z components equal to the\nprovided values.\n\n:param x: The x component of the translation.\n:param y: The y component of the translation.\n:param z: The z component of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "distance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Constructs a Translation3d with the provided distance and angle. This is\nessentially converting from polar coordinates to Cartesian coordinates.\n\n:param distance: The distance from the origin to the end of the translation.\n:param angle:    The angle between the x-axis and the translation vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "vector",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Constructs a Translation3d from a 3D translation vector. The values are\nassumed to be in meters.\n\n:param vector: The translation vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Constructs a 3D translation from a 2D translation in the X-Y plane.\n\n:param translation: The 2D translation.\n                    @see Pose3d(Pose2d)\n                    @see Transform3d(Transform2d)"
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "X",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the X component of the translation.\n\n:returns: The Z component of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "Y",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Y component of the translation.\n\n:returns: The Y component of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "Z",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the Z component of the translation.\n\n:returns: The Z component of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "distance",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Calculates the distance between two translations in 3D space.\n\nThe distance between translations is defined as\n\u221a((x\u2082\u2212x\u2081)\u00b2+(y\u2082\u2212y\u2081)\u00b2+(z\u2082\u2212z\u2081)\u00b2).\n\n:param other: The translation to compute the distance to.\n\n:returns: The distance between the two translations."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "distanceFeet",
                    "returnType": "wpimath.units.feet",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "translations",
                            "type": "List[wpimath.geometry.Translation3d]"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "nearest",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Returns the nearest Translation3d from a collection of translations\n\n:param translations: The collection of translations.\n\n:returns: The nearest Translation3d from the collection."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "norm",
                    "returnType": "wpimath.units.meters",
                    "tooltip": "Returns the norm, or distance from the origin to the translation.\n\n:returns: The norm of the translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "normFeet",
                    "returnType": "wpimath.units.feet",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rot",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "rotateAround",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Rotates this translation around another translation in 3D space.\n\n:param other: The other translation to rotate around.\n:param rot:   The rotation to rotate the translation by.\n\n:returns: The new rotated translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "other",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "rotateBy",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Applies a rotation to the translation in 3D space.\n\nFor example, rotating a Translation3d of &lt;2, 0, 0&gt; by 90 degrees\naround the Z axis will return a Translation3d of &lt;0, 2, 0&gt;.\n\n:param other: The rotation to rotate the translation by.\n\n:returns: The new rotated translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "toTranslation2d",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns a Translation2d representing this Translation3d projected into the\nX-Y plane."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "toVector",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns a 3D translation vector representation of this translation.\n\n:returns: A 3D translation vector representation of this translation."
                }
            ],
            "instanceVariables": [
                {
                    "name": "x",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "x_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "y",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "y_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                },
                {
                    "name": "z",
                    "tooltip": "",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "z_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "z",
                            "type": "wpimath.units.feet"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Translation3d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.geometry.Twist2d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "dx",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "0",
                            "name": "dy",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "0",
                            "name": "dtheta",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Twist2d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "dtheta",
                    "tooltip": "Angular \"dtheta\" component (radians)",
                    "type": "wpimath.units.radians",
                    "writable": true
                },
                {
                    "name": "dtheta_degrees",
                    "tooltip": "",
                    "type": "wpimath.units.degrees",
                    "writable": true
                },
                {
                    "name": "dx",
                    "tooltip": "Linear \"dx\" component",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "dx_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": true
                },
                {
                    "name": "dy",
                    "tooltip": "Linear \"dy\" component",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "dy_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "dx",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "0",
                            "name": "dy",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "0",
                            "name": "dtheta",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Twist2d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.geometry.Twist3d",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "dx",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "0",
                            "name": "dy",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "0",
                            "name": "dz",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "0",
                            "name": "rx",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "0",
                            "name": "ry",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "0",
                            "name": "rz",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Twist3d",
                    "functionName": "__init__",
                    "returnType": "wpimath.geometry.Twist3d",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "dx",
                    "tooltip": "Linear \"dx\" component",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "dx_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": true
                },
                {
                    "name": "dy",
                    "tooltip": "Linear \"dy\" component",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "dy_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": true
                },
                {
                    "name": "dz",
                    "tooltip": "Linear \"dz\" component",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "dz_feet",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": true
                },
                {
                    "name": "rx",
                    "tooltip": "Rotation vector x component.",
                    "type": "wpimath.units.radians",
                    "writable": true
                },
                {
                    "name": "rx_degrees",
                    "tooltip": "",
                    "type": "wpimath.units.degrees",
                    "writable": true
                },
                {
                    "name": "ry",
                    "tooltip": "Rotation vector y component.",
                    "type": "wpimath.units.radians",
                    "writable": true
                },
                {
                    "name": "ry_degrees",
                    "tooltip": "",
                    "type": "wpimath.units.degrees",
                    "writable": true
                },
                {
                    "name": "rz",
                    "tooltip": "Rotation vector z component.",
                    "type": "wpimath.units.radians",
                    "writable": true
                },
                {
                    "name": "rz_degrees",
                    "tooltip": "",
                    "type": "wpimath.units.degrees",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.geometry",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "dx",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "0",
                            "name": "dy",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "0",
                            "name": "dz",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "0",
                            "name": "rx",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "0",
                            "name": "ry",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "0",
                            "name": "rz",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.geometry.Twist3d",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.geometry.Twist3d",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat], float]"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer.\n\n:param historySize: The history size of the buffer.\n:param func:        The function used to interpolate between values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer. By default, the interpolation\nfunction is wpi::Lerp except for Pose2d, which uses the pose exponential.\n\n:param historySize: The history size of the buffer."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableFloatBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "sample",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
                    "functionName": "addSample",
                    "returnType": "None",
                    "tooltip": "Add a sample to the buffer.\n\n:param time:   The timestamp of the sample.\n:param sample: The sample object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableFloatBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
                    "functionName": "clear",
                    "returnType": "None",
                    "tooltip": "Clear all old samples."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableFloatBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
                    "functionName": "getInternalBuffer",
                    "returnType": "list[tuple[wpimath.units.seconds, float]]",
                    "tooltip": "Grant access to the internal sample buffer. Used in Pose Estimation to\nreplay odometry inputs stored within this buffer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableFloatBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableFloatBuffer",
                    "functionName": "sample",
                    "returnType": "Optional[float]",
                    "tooltip": "Sample the buffer at the given time. If the buffer is empty, an empty\noptional is returned.\n\n:param time: The time at which to sample the buffer."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.interpolation",
            "staticMethods": []
        },
        {
            "className": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[wpimath.geometry.Pose2d, wpimath.geometry.Pose2d, typing.SupportsFloat], wpimath.geometry.Pose2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer.\n\n:param historySize: The history size of the buffer.\n:param func:        The function used to interpolate between values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer. By default, the interpolation\nfunction is wpi::Lerp except for Pose2d, which uses the pose exponential.\n\n:param historySize: The history size of the buffer."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatablePose2dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "sample",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
                    "functionName": "addSample",
                    "returnType": "None",
                    "tooltip": "Add a sample to the buffer.\n\n:param time:   The timestamp of the sample.\n:param sample: The sample object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatablePose2dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
                    "functionName": "clear",
                    "returnType": "None",
                    "tooltip": "Clear all old samples."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatablePose2dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
                    "functionName": "getInternalBuffer",
                    "returnType": "list[tuple[wpimath.units.seconds, wpimath.geometry.Pose2d]]",
                    "tooltip": "Grant access to the internal sample buffer. Used in Pose Estimation to\nreplay odometry inputs stored within this buffer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatablePose2dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose2dBuffer",
                    "functionName": "sample",
                    "returnType": "Optional[wpimath.geometry.Pose2d]",
                    "tooltip": "Sample the buffer at the given time. If the buffer is empty, an empty\noptional is returned.\n\n:param time: The time at which to sample the buffer."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.interpolation",
            "staticMethods": []
        },
        {
            "className": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[wpimath.geometry.Pose3d, wpimath.geometry.Pose3d, typing.SupportsFloat], wpimath.geometry.Pose3d]"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer.\n\n:param historySize: The history size of the buffer.\n:param func:        The function used to interpolate between values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer. By default, the interpolation\nfunction is wpi::Lerp except for Pose2d, which uses the pose exponential.\n\n:param historySize: The history size of the buffer."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatablePose3dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "sample",
                            "type": "wpimath.geometry.Pose3d"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
                    "functionName": "addSample",
                    "returnType": "None",
                    "tooltip": "Add a sample to the buffer.\n\n:param time:   The timestamp of the sample.\n:param sample: The sample object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatablePose3dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
                    "functionName": "clear",
                    "returnType": "None",
                    "tooltip": "Clear all old samples."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatablePose3dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
                    "functionName": "getInternalBuffer",
                    "returnType": "list[tuple[wpimath.units.seconds, wpimath.geometry.Pose3d]]",
                    "tooltip": "Grant access to the internal sample buffer. Used in Pose Estimation to\nreplay odometry inputs stored within this buffer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatablePose3dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatablePose3dBuffer",
                    "functionName": "sample",
                    "returnType": "Optional[wpimath.geometry.Pose3d]",
                    "tooltip": "Sample the buffer at the given time. If the buffer is empty, an empty\noptional is returned.\n\n:param time: The time at which to sample the buffer."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.interpolation",
            "staticMethods": []
        },
        {
            "className": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d, typing.SupportsFloat], wpimath.geometry.Rotation2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer.\n\n:param historySize: The history size of the buffer.\n:param func:        The function used to interpolate between values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer. By default, the interpolation\nfunction is wpi::Lerp except for Pose2d, which uses the pose exponential.\n\n:param historySize: The history size of the buffer."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "sample",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
                    "functionName": "addSample",
                    "returnType": "None",
                    "tooltip": "Add a sample to the buffer.\n\n:param time:   The timestamp of the sample.\n:param sample: The sample object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
                    "functionName": "clear",
                    "returnType": "None",
                    "tooltip": "Clear all old samples."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
                    "functionName": "getInternalBuffer",
                    "returnType": "list[tuple[wpimath.units.seconds, wpimath.geometry.Rotation2d]]",
                    "tooltip": "Grant access to the internal sample buffer. Used in Pose Estimation to\nreplay odometry inputs stored within this buffer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation2dBuffer",
                    "functionName": "sample",
                    "returnType": "Optional[wpimath.geometry.Rotation2d]",
                    "tooltip": "Sample the buffer at the given time. If the buffer is empty, an empty\noptional is returned.\n\n:param time: The time at which to sample the buffer."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.interpolation",
            "staticMethods": []
        },
        {
            "className": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[wpimath.geometry.Rotation3d, wpimath.geometry.Rotation3d, typing.SupportsFloat], wpimath.geometry.Rotation3d]"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer.\n\n:param historySize: The history size of the buffer.\n:param func:        The function used to interpolate between values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer. By default, the interpolation\nfunction is wpi::Lerp except for Pose2d, which uses the pose exponential.\n\n:param historySize: The history size of the buffer."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "sample",
                            "type": "wpimath.geometry.Rotation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
                    "functionName": "addSample",
                    "returnType": "None",
                    "tooltip": "Add a sample to the buffer.\n\n:param time:   The timestamp of the sample.\n:param sample: The sample object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
                    "functionName": "clear",
                    "returnType": "None",
                    "tooltip": "Clear all old samples."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
                    "functionName": "getInternalBuffer",
                    "returnType": "list[tuple[wpimath.units.seconds, wpimath.geometry.Rotation3d]]",
                    "tooltip": "Grant access to the internal sample buffer. Used in Pose Estimation to\nreplay odometry inputs stored within this buffer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableRotation3dBuffer",
                    "functionName": "sample",
                    "returnType": "Optional[wpimath.geometry.Rotation3d]",
                    "tooltip": "Sample the buffer at the given time. If the buffer is empty, an empty\noptional is returned.\n\n:param time: The time at which to sample the buffer."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.interpolation",
            "staticMethods": []
        },
        {
            "className": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[wpimath.geometry.Translation2d, wpimath.geometry.Translation2d, typing.SupportsFloat], wpimath.geometry.Translation2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer.\n\n:param historySize: The history size of the buffer.\n:param func:        The function used to interpolate between values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer. By default, the interpolation\nfunction is wpi::Lerp except for Pose2d, which uses the pose exponential.\n\n:param historySize: The history size of the buffer."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "sample",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
                    "functionName": "addSample",
                    "returnType": "None",
                    "tooltip": "Add a sample to the buffer.\n\n:param time:   The timestamp of the sample.\n:param sample: The sample object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
                    "functionName": "clear",
                    "returnType": "None",
                    "tooltip": "Clear all old samples."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
                    "functionName": "getInternalBuffer",
                    "returnType": "list[tuple[wpimath.units.seconds, wpimath.geometry.Translation2d]]",
                    "tooltip": "Grant access to the internal sample buffer. Used in Pose Estimation to\nreplay odometry inputs stored within this buffer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation2dBuffer",
                    "functionName": "sample",
                    "returnType": "Optional[wpimath.geometry.Translation2d]",
                    "tooltip": "Sample the buffer at the given time. If the buffer is empty, an empty\noptional is returned.\n\n:param time: The time at which to sample the buffer."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.interpolation",
            "staticMethods": []
        },
        {
            "className": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[wpimath.geometry.Translation3d, wpimath.geometry.Translation3d, typing.SupportsFloat], wpimath.geometry.Translation3d]"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer.\n\n:param historySize: The history size of the buffer.\n:param func:        The function used to interpolate between values."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "historySize",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
                    "functionName": "__init__",
                    "returnType": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
                    "tooltip": "Create a new TimeInterpolatableBuffer. By default, the interpolation\nfunction is wpi::Lerp except for Pose2d, which uses the pose exponential.\n\n:param historySize: The history size of the buffer."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "sample",
                            "type": "wpimath.geometry.Translation3d"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
                    "functionName": "addSample",
                    "returnType": "None",
                    "tooltip": "Add a sample to the buffer.\n\n:param time:   The timestamp of the sample.\n:param sample: The sample object."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
                    "functionName": "clear",
                    "returnType": "None",
                    "tooltip": "Clear all old samples."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
                    "functionName": "getInternalBuffer",
                    "returnType": "list[tuple[wpimath.units.seconds, wpimath.geometry.Translation3d]]",
                    "tooltip": "Grant access to the internal sample buffer. Used in Pose Estimation to\nreplay odometry inputs stored within this buffer."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer"
                        },
                        {
                            "defaultValue": "",
                            "name": "time",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.interpolation.TimeInterpolatableTranslation3dBuffer",
                    "functionName": "sample",
                    "returnType": "Optional[wpimath.geometry.Translation3d]",
                    "tooltip": "Sample the buffer at the given time. If the buffer is empty, an empty\noptional is returned.\n\n:param time: The time at which to sample the buffer."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.interpolation",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.ChassisSpeeds",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "vx",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "vy",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "omega",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.ChassisSpeeds",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.ChassisSpeeds",
                    "functionName": "discretize",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Discretizes a continuous-time chassis speed.\n\nThis function converts a continuous-time chassis speed into a discrete-time\none such that when the discrete-time chassis speed is applied for one\ntimestep, the robot moves as if the velocity components are independent\n(i.e., the robot moves v_x * dt along the x-axis, v_y * dt along the\ny-axis, and omega * dt around the z-axis).\n\nThis is useful for compensating for translational skew when translating and\nrotating a holonomic (swerve or mecanum) drivetrain. However, scaling down\nthe ChassisSpeeds after discretizing (e.g., when desaturating swerve module\nspeeds) rotates the direction of net motion in the opposite direction of\nrotational velocity, introducing a different translational skew which is\nnot accounted for by discretization.\n\n:param dt: The duration of the timestep the speeds should be applied for.\n\n:returns: Discretized ChassisSpeeds."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "robotAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.ChassisSpeeds",
                    "functionName": "toFieldRelative",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Converts this robot-relative set of speeds into a field-relative\nChassisSpeeds object.\n\n:param robotAngle: The angle of the robot as measured by a gyroscope. The\n                   robot's angle is considered to be zero when it is facing directly away\n                   from your alliance station wall. Remember that this should be CCW\n                   positive.\n\n:returns: ChassisSpeeds object representing the speeds in the field's frame\n          of reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "robotAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.ChassisSpeeds",
                    "functionName": "toRobotRelative",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Converts this field-relative set of speeds into a robot-relative\nChassisSpeeds object.\n\n:param robotAngle: The angle of the robot as measured by a gyroscope. The\n                   robot's angle is considered to be zero when it is facing directly away\n                   from your alliance station wall. Remember that this should be CCW\n                   positive.\n\n:returns: ChassisSpeeds object representing the speeds in the robot's frame\n          of reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.ChassisSpeeds",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Creates a Twist2d from ChassisSpeeds.\n\n:param dt: The duration of the timestep.\n\n:returns: Twist2d."
                }
            ],
            "instanceVariables": [
                {
                    "name": "omega",
                    "tooltip": "Represents the angular velocity of the robot frame. (CCW is +)",
                    "type": "wpimath.units.radians_per_second",
                    "writable": true
                },
                {
                    "name": "omega_dps",
                    "tooltip": "",
                    "type": "wpimath.units.degrees_per_second",
                    "writable": true
                },
                {
                    "name": "vx",
                    "tooltip": "Velocity along the x-axis. (Fwd is +)",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "vx_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                },
                {
                    "name": "vy",
                    "tooltip": "Velocity along the y-axis. (Left is +)",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "vy_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.kinematics",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "vx",
                            "type": "wpimath.units.feet_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "vy",
                            "type": "wpimath.units.feet_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "omega",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.ChassisSpeeds",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.kinematics.DifferentialDriveKinematics",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "trackwidth",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematics",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.DifferentialDriveKinematics",
                    "tooltip": "Constructs a differential drive kinematics object.\n\n:param trackwidth: The trackwidth of the drivetrain. Theoretically, this is\n                   the distance between the left wheels and right wheels. However, the\n                   empirical value may be larger than the physical measured value due to\n                   scrubbing effects."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematics",
                    "functionName": "interpolate",
                    "returnType": "wpimath.kinematics.DifferentialDriveWheelPositions",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSpeeds",
                            "type": "wpimath.kinematics.DifferentialDriveWheelSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematics",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Returns a chassis speed from left and right component velocities using\nforward kinematics.\n\n:param wheelSpeeds: The left and right velocities.\n\n:returns: The chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Returns a twist from left and right distance deltas using\nforward kinematics.\n\n:param leftDistance:  The distance measured by the left encoder.\n:param rightDistance: The distance measured by the right encoder.\n\n:returns: The resulting Twist2d."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematics",
                    "functionName": "toWheelSpeeds",
                    "returnType": "wpimath.kinematics.DifferentialDriveWheelSpeeds",
                    "tooltip": "Returns left and right component velocities from a chassis speed using\ninverse kinematics.\n\n:param chassisSpeeds: The linear and angular (dx and dtheta) components that\n                      represent the chassis' speed.\n\n:returns: The left and right velocities."
                }
            ],
            "instanceVariables": [
                {
                    "name": "trackwidth",
                    "tooltip": "Differential drive trackwidth.",
                    "type": "wpimath.units.meters",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.DifferentialDriveKinematicsBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematicsBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.DifferentialDriveKinematicsBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematicsBase",
                    "functionName": "interpolate",
                    "returnType": "wpimath.kinematics.DifferentialDriveWheelPositions",
                    "tooltip": "Performs interpolation between two values.\n\n:param start: The value to start at.\n:param end:   The value to end at.\n:param t:     How far between the two values to interpolate. This should be\n              bounded to [0, 1].\n\n:returns: The interpolated value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSpeeds",
                            "type": "wpimath.kinematics.DifferentialDriveWheelSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematicsBase",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis speed from the\nwheel speeds. This method is often used for odometry -- determining the\nrobot's position on the field using data from the real-world speed of each\nwheel on the robot.\n\n:param wheelSpeeds: The speeds of the wheels.\n\n:returns: The chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematicsBase",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the given\nchange in wheel positions. This method is often used for odometry --\ndetermining the robot's position on the field using changes in the distance\ndriven by each wheel on the robot.\n\n:param start: The starting distances driven by the wheels.\n:param end:   The ending distances driven by the wheels.\n\n:returns: The resulting Twist2d in the robot's movement."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveKinematicsBase",
                    "functionName": "toWheelSpeeds",
                    "returnType": "wpimath.kinematics.DifferentialDriveWheelSpeeds",
                    "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\n:param chassisSpeeds: The desired chassis speed.\n\n:returns: The wheel speeds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.DifferentialDriveOdometry",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometry",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.DifferentialDriveOdometry",
                    "tooltip": "Constructs a DifferentialDriveOdometry object.\n\nIF leftDistance and rightDistance are unspecified,\nYou NEED to reset your encoders (to zero).\n\n:param gyroAngle:     The angle reported by the gyroscope.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n:param initialPose:   The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometry"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometry",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nIF leftDistance and rightDistance are unspecified,\nYou NEED to reset your encoders (to zero).\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param pose:          The position on the field that your robot is at.\n:param gyroAngle:     The angle reported by the gyroscope.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometry"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "leftDistance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rightDistance",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometry",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot position on the field using distance measurements from\nencoders. This method is more numerically accurate than using velocities to\nintegrate the pose and is also advantageous for teams that are using lower\nCPR encoders.\n\n:param gyroAngle:     The angle reported by the gyroscope.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.DifferentialDriveOdometryBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "tooltip": "Constructs an Odometry object.\n\n:param kinematics:     The kinematics for your drivetrain.\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param initialPose:    The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveOdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.DifferentialDriveWheelPositions",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveWheelPositions",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.DifferentialDriveWheelPositions",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "endValue",
                            "type": "wpimath.kinematics.DifferentialDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveWheelPositions",
                    "functionName": "interpolate",
                    "returnType": "wpimath.kinematics.DifferentialDriveWheelPositions",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [
                {
                    "name": "left",
                    "tooltip": "Distance driven by the left side.",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "right",
                    "tooltip": "Distance driven by the right side.",
                    "type": "wpimath.units.meters",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.DifferentialDriveWheelSpeeds",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "left",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "right",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveWheelSpeeds",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.DifferentialDriveWheelSpeeds",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.DifferentialDriveWheelSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveWheelSpeeds",
                    "functionName": "desaturate",
                    "returnType": "None",
                    "tooltip": "Renormalizes the wheel speeds if either side is above the specified\nmaximum.\n\nSometimes, after inverse kinematics, the requested speed from one or more\nwheels may be above the max attainable speed for the driving motor on that\nwheel. To fix this issue, one can reduce all the wheel speeds to make sure\nthat all requested module speeds are at-or-below the absolute threshold,\nwhile maintaining the ratio of speeds between wheels.\n\n:param attainableMaxSpeed: The absolute max speed that a wheel can reach."
                }
            ],
            "instanceVariables": [
                {
                    "name": "left",
                    "tooltip": "Speed of the left side of the robot.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "left_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                },
                {
                    "name": "right",
                    "tooltip": "Speed of the right side of the robot.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "right_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.kinematics",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "left",
                            "type": "wpimath.units.feet_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "right",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.DifferentialDriveWheelSpeeds",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.kinematics.DifferentialDriveWheelSpeeds",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.kinematics.MecanumDriveKinematics",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "frontLeftWheel",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "frontRightWheel",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rearLeftWheel",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "rearRightWheel",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.MecanumDriveKinematics",
                    "tooltip": "Constructs a mecanum drive kinematics object.\n\n:param frontLeftWheel:  The location of the front-left wheel relative to the\n                        physical center of the robot.\n:param frontRightWheel: The location of the front-right wheel relative to\n                        the physical center of the robot.\n:param rearLeftWheel:   The location of the rear-left wheel relative to the\n                        physical center of the robot.\n:param rearRightWheel:  The location of the rear-right wheel relative to the\n                        physical center of the robot."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "getFrontLeft",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the front-left wheel translation.\n\n:returns: The front-left wheel translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "getFrontRight",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the front-right wheel translation.\n\n:returns: The front-right wheel translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "getRearLeft",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the rear-left wheel translation.\n\n:returns: The rear-left wheel translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "getRearRight",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Returns the rear-right wheel translation.\n\n:returns: The rear-right wheel translation."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "interpolate",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelPositions",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSpeeds",
                            "type": "wpimath.kinematics.MecanumDriveWheelSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis state from the\ngiven wheel speeds. This method is often used for odometry -- determining\nthe robot's position on the field using data from the real-world speed of\neach wheel on the robot.\n\n:param wheelSpeeds: The current mecanum drive wheel speeds.\n\n:returns: The resulting chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelDeltas",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the\ngiven wheel position deltas. This method is often used for odometry --\ndetermining the robot's position on the field using data from the\ndistance driven by each wheel on the robot.\n\n:param wheelDeltas: The change in distance driven by each wheel.\n\n:returns: The resulting chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "centerOfRotation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "toWheelSpeeds",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\nThis function also supports variable centers of rotation. During normal\noperations, the center of rotation is usually the same as the physical\ncenter of the robot; therefore, the argument is defaulted to that use case.\nHowever, if you wish to change the center of rotation for evasive\nmaneuvers, vision alignment, or for any other use case, you can do so.\n\n:param chassisSpeeds:    The desired chassis speed.\n:param centerOfRotation: The center of rotation. For example, if you set the\n                         center of rotation at one corner of the robot and\n                         provide a chassis speed that only has a dtheta\n                         component, the robot will rotate around that\n                         corner.\n\n:returns: The wheel speeds. Use caution because they are not normalized.\n          Sometimes, a user input may cause one of the wheel speeds to go\n          above the attainable max velocity. Use the\n          :meth:`MecanumDriveWheelSpeeds.normalize` method to rectify\n          this issue. In addition, you can use Python unpacking syntax\n          to directly assign the wheel speeds to variables::\n\n            fl, fr, bl, br = kinematics.toWheelSpeeds(chassisSpeeds)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematics",
                    "functionName": "toWheelSpeeds",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\nThis function also supports variable centers of rotation. During normal\noperations, the center of rotation is usually the same as the physical\ncenter of the robot; therefore, the argument is defaulted to that use case.\nHowever, if you wish to change the center of rotation for evasive\nmaneuvers, vision alignment, or for any other use case, you can do so.\n\n:param chassisSpeeds:    The desired chassis speed.\n:param centerOfRotation: The center of rotation. For example, if you set the\n                         center of rotation at one corner of the robot and\n                         provide a chassis speed that only has a dtheta\n                         component, the robot will rotate around that\n                         corner.\n\n:returns: The wheel speeds. Use caution because they are not normalized.\n          Sometimes, a user input may cause one of the wheel speeds to go\n          above the attainable max velocity. Use the\n          :meth:`MecanumDriveWheelSpeeds.normalize` method to rectify\n          this issue. In addition, you can use Python unpacking syntax\n          to directly assign the wheel speeds to variables::\n\n            fl, fr, bl, br = kinematics.toWheelSpeeds(chassisSpeeds)"
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.MecanumDriveKinematicsBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematicsBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.MecanumDriveKinematicsBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematicsBase",
                    "functionName": "interpolate",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelPositions",
                    "tooltip": "Performs interpolation between two values.\n\n:param start: The value to start at.\n:param end:   The value to end at.\n:param t:     How far between the two values to interpolate. This should be\n              bounded to [0, 1].\n\n:returns: The interpolated value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSpeeds",
                            "type": "wpimath.kinematics.MecanumDriveWheelSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematicsBase",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis speed from the\nwheel speeds. This method is often used for odometry -- determining the\nrobot's position on the field using data from the real-world speed of each\nwheel on the robot.\n\n:param wheelSpeeds: The speeds of the wheels.\n\n:returns: The chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematicsBase",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the given\nchange in wheel positions. This method is often used for odometry --\ndetermining the robot's position on the field using changes in the distance\ndriven by each wheel on the robot.\n\n:param start: The starting distances driven by the wheels.\n:param end:   The ending distances driven by the wheels.\n\n:returns: The resulting Twist2d in the robot's movement."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveKinematicsBase",
                    "functionName": "toWheelSpeeds",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\n:param chassisSpeeds: The desired chassis speed.\n\n:returns: The wheel speeds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.MecanumDriveOdometry",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometry",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.MecanumDriveOdometry",
                    "tooltip": "Constructs a MecanumDriveOdometry object.\n\n:param kinematics:     The mecanum drive kinematics for your drivetrain.\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param initialPose:    The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.MecanumDriveOdometryBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "tooltip": "Constructs an Odometry object.\n\n:param kinematics:     The kinematics for your drivetrain.\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param initialPose:    The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveOdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveOdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.MecanumDriveWheelPositions",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveWheelPositions",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelPositions",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "endValue",
                            "type": "wpimath.kinematics.MecanumDriveWheelPositions"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveWheelPositions",
                    "functionName": "interpolate",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelPositions",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [
                {
                    "name": "frontLeft",
                    "tooltip": "Distance driven by the front-left wheel.",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "frontRight",
                    "tooltip": "Distance driven by the front-right wheel.",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "rearLeft",
                    "tooltip": "Distance driven by the rear-left wheel.",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "rearRight",
                    "tooltip": "Distance driven by the rear-right wheel.",
                    "type": "wpimath.units.meters",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.MecanumDriveWheelSpeeds",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "frontLeft",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "frontRight",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "rearLeft",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "rearRight",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.MecanumDriveWheelSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "functionName": "desaturate",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum.\n\nSometimes, after inverse kinematics, the requested speed from one or\nmore wheels may be above the max attainable speed for the driving motor on\nthat wheel. To fix this issue, one can reduce all the wheel speeds to make\nsure that all requested module speeds are at-or-below the absolute\nthreshold, while maintaining the ratio of speeds between wheels.\n\n:param attainableMaxSpeed: The absolute max speed that a wheel can reach.\n\n:returns: Desaturated MecanumDriveWheelSpeeds."
                }
            ],
            "instanceVariables": [
                {
                    "name": "frontLeft",
                    "tooltip": "Speed of the front-left wheel.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "frontLeft_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                },
                {
                    "name": "frontRight",
                    "tooltip": "Speed of the front-right wheel.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "frontRight_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                },
                {
                    "name": "rearLeft",
                    "tooltip": "Speed of the rear-left wheel.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "rearLeft_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                },
                {
                    "name": "rearRight",
                    "tooltip": "Speed of the rear-right wheel.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "rearRight_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.kinematics",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "frontLeft",
                            "type": "wpimath.units.feet_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "frontRight",
                            "type": "wpimath.units.feet_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "rearLeft",
                            "type": "wpimath.units.feet_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "rearRight",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.kinematics.MecanumDriveWheelSpeeds",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.kinematics.SwerveDrive2Kinematics",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "getModules",
                    "returnType": "Tuple[wpimath.geometry.Translation2d, wpimath.geometry.Translation2d]",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "interpolate",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleHeadings",
                            "type": "Tuple[wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "resetHeadings",
                    "returnType": "None",
                    "tooltip": "Reset the internal swerve module headings.\n\n:param moduleHeadings: The swerve module headings. The order of the module\n                       headings should be same as passed into the constructor of this class."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis state from the\ngiven module states. This method is often used for odometry -- determining\nthe robot's position on the field using data from the real-world speed and\nangle of each module on the robot.\n\n:param moduleStates: The state of the modules as an wpi::array of type\n                     SwerveModuleState, NumModules long as measured from respective encoders\n                     and gyros. The order of the swerve module states should be same as passed\n                     into the constructor of this class.\n\n:returns: The resulting chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "Translation2d(x=0.000000, y=0.000000)",
                            "name": "centerOfRotation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "toSwerveModuleStates",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Performs inverse kinematics to return the module states from a desired\nchassis velocity. This method is often used to convert joystick values into\nmodule speeds and angles.\n\nThis function also supports variable centers of rotation. During normal\noperations, the center of rotation is usually the same as the physical\ncenter of the robot; therefore, the argument is defaulted to that use case.\nHowever, if you wish to change the center of rotation for evasive\nmaneuvers, vision alignment, or for any other use case, you can do so.\n\n:param chassisSpeeds:    The desired chassis speed.\n:param centerOfRotation: The center of rotation. For example, if you set the\n center of rotation at one corner of the robot and provide a chassis speed\n that only has a dtheta component, the robot will rotate around that corner.\n\n:returns: An array containing the module states. Use caution because these\n          module states are not normalized. Sometimes, a user input may cause one of\n          the module speeds to go above the attainable max velocity. Use the\n          :meth:`desaturateWheelSpeeds` function to rectify this issue.\n          In addition, you can use Python unpacking syntax\n          to directly assign the module states to variables::\n\n            fl, fr, bl, br = kinematics.toSwerveModuleStates(chassisSpeeds)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleDeltas",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the\ngiven module position deltas. This method is often used for odometry --\ndetermining the robot's position on the field using data from the\nreal-world position delta and angle of each module on the robot.\n\n:param moduleDeltas: The latest change in position of the modules (as a\n                     SwerveModulePosition type) as measured from respective encoders and gyros.\n                     The order of the swerve module states should be same as passed into the\n                     constructor of this class.\n\n:returns: The resulting Twist2d."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "toWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "desaturateWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum.\n\nSometimes, after inverse kinematics, the requested speed\nfrom one or more modules may be above the max attainable speed for the\ndriving motor on that module. To fix this issue, one can reduce all the\nwheel speeds to make sure that all requested module speeds are at-or-below\nthe absolute threshold, while maintaining the ratio of speeds between\nmodules.\n\nScaling down the module speeds rotates the direction of net motion in the\nopposite direction of rotational velocity, which makes discretizing the\nchassis speeds inaccurate because the discretization did not account for\nthis translational skew.\n\n:param moduleStates:       Reference to array of module states. The array will be\n                           mutated with the normalized speeds!\n:param attainableMaxSpeed: The absolute max speed that a module can reach."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredChassisSpeed",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxModuleSpeed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxRobotTranslationSpeed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxRobotRotationSpeed",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Kinematics",
                    "functionName": "desaturateWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum, as well as getting rid of joystick saturation at edges\nof joystick.\n\nSometimes, after inverse kinematics, the requested speed\nfrom one or more modules may be above the max attainable speed for the\ndriving motor on that module. To fix this issue, one can reduce all the\nwheel speeds to make sure that all requested module speeds are at-or-below\nthe absolute threshold, while maintaining the ratio of speeds between\nmodules.\n\nScaling down the module speeds rotates the direction of net motion in the\nopposite direction of rotational velocity, which makes discretizing the\nchassis speeds inaccurate because the discretization did not account for\nthis translational skew.\n\n:param moduleStates:                       Reference to array of module states. The array will be\n                                           mutated with the normalized speeds!\n:param desiredChassisSpeed:                The desired speed of the robot\n:param attainableMaxModuleSpeed:           The absolute max speed a module can reach\n:param attainableMaxRobotTranslationSpeed: The absolute max speed the robot\n                                           can reach while translating\n:param attainableMaxRobotRotationSpeed:    The absolute max speed the robot can\n                                           reach while rotating"
                }
            ]
        },
        {
            "className": "wpimath.kinematics.SwerveDrive2KinematicsBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2KinematicsBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive2KinematicsBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2KinematicsBase",
                    "functionName": "interpolate",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]",
                    "tooltip": "Performs interpolation between two values.\n\n:param start: The value to start at.\n:param end:   The value to end at.\n:param t:     How far between the two values to interpolate. This should be\n              bounded to [0, 1].\n\n:returns: The interpolated value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSpeeds",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2KinematicsBase",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis speed from the\nwheel speeds. This method is often used for odometry -- determining the\nrobot's position on the field using data from the real-world speed of each\nwheel on the robot.\n\n:param wheelSpeeds: The speeds of the wheels.\n\n:returns: The chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2KinematicsBase",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the given\nchange in wheel positions. This method is often used for odometry --\ndetermining the robot's position on the field using changes in the distance\ndriven by each wheel on the robot.\n\n:param start: The starting distances driven by the wheels.\n:param end:   The ending distances driven by the wheels.\n\n:returns: The resulting Twist2d in the robot's movement."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2KinematicsBase",
                    "functionName": "toWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\n:param chassisSpeeds: The desired chassis speed.\n\n:returns: The wheel speeds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive2Odometry",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2Odometry",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive2Odometry",
                    "tooltip": "Constructs a SwerveDriveOdometry object.\n\n:param kinematics:      The swerve drive kinematics for your drivetrain.\n:param gyroAngle:       The angle reported by the gyroscope.\n:param modulePositions: The wheel positions reported by each module.\n:param initialPose:     The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive2OdometryBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "tooltip": "Constructs an Odometry object.\n\n:param kinematics:     The kinematics for your drivetrain.\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param initialPose:    The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive2OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive2OdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive3Kinematics",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "getModules",
                    "returnType": "Tuple[wpimath.geometry.Translation2d, wpimath.geometry.Translation2d, wpimath.geometry.Translation2d]",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "interpolate",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleHeadings",
                            "type": "Tuple[wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "resetHeadings",
                    "returnType": "None",
                    "tooltip": "Reset the internal swerve module headings.\n\n:param moduleHeadings: The swerve module headings. The order of the module\n                       headings should be same as passed into the constructor of this class."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis state from the\ngiven module states. This method is often used for odometry -- determining\nthe robot's position on the field using data from the real-world speed and\nangle of each module on the robot.\n\n:param moduleStates: The state of the modules as an wpi::array of type\n                     SwerveModuleState, NumModules long as measured from respective encoders\n                     and gyros. The order of the swerve module states should be same as passed\n                     into the constructor of this class.\n\n:returns: The resulting chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "Translation2d(x=0.000000, y=0.000000)",
                            "name": "centerOfRotation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "toSwerveModuleStates",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Performs inverse kinematics to return the module states from a desired\nchassis velocity. This method is often used to convert joystick values into\nmodule speeds and angles.\n\nThis function also supports variable centers of rotation. During normal\noperations, the center of rotation is usually the same as the physical\ncenter of the robot; therefore, the argument is defaulted to that use case.\nHowever, if you wish to change the center of rotation for evasive\nmaneuvers, vision alignment, or for any other use case, you can do so.\n\n:param chassisSpeeds:    The desired chassis speed.\n:param centerOfRotation: The center of rotation. For example, if you set the\n center of rotation at one corner of the robot and provide a chassis speed\n that only has a dtheta component, the robot will rotate around that corner.\n\n:returns: An array containing the module states. Use caution because these\n          module states are not normalized. Sometimes, a user input may cause one of\n          the module speeds to go above the attainable max velocity. Use the\n          :meth:`desaturateWheelSpeeds` function to rectify this issue.\n          In addition, you can use Python unpacking syntax\n          to directly assign the module states to variables::\n\n            fl, fr, bl, br = kinematics.toSwerveModuleStates(chassisSpeeds)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleDeltas",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the\ngiven module position deltas. This method is often used for odometry --\ndetermining the robot's position on the field using data from the\nreal-world position delta and angle of each module on the robot.\n\n:param moduleDeltas: The latest change in position of the modules (as a\n                     SwerveModulePosition type) as measured from respective encoders and gyros.\n                     The order of the swerve module states should be same as passed into the\n                     constructor of this class.\n\n:returns: The resulting Twist2d."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "toWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "desaturateWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum.\n\nSometimes, after inverse kinematics, the requested speed\nfrom one or more modules may be above the max attainable speed for the\ndriving motor on that module. To fix this issue, one can reduce all the\nwheel speeds to make sure that all requested module speeds are at-or-below\nthe absolute threshold, while maintaining the ratio of speeds between\nmodules.\n\nScaling down the module speeds rotates the direction of net motion in the\nopposite direction of rotational velocity, which makes discretizing the\nchassis speeds inaccurate because the discretization did not account for\nthis translational skew.\n\n:param moduleStates:       Reference to array of module states. The array will be\n                           mutated with the normalized speeds!\n:param attainableMaxSpeed: The absolute max speed that a module can reach."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredChassisSpeed",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxModuleSpeed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxRobotTranslationSpeed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxRobotRotationSpeed",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Kinematics",
                    "functionName": "desaturateWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum, as well as getting rid of joystick saturation at edges\nof joystick.\n\nSometimes, after inverse kinematics, the requested speed\nfrom one or more modules may be above the max attainable speed for the\ndriving motor on that module. To fix this issue, one can reduce all the\nwheel speeds to make sure that all requested module speeds are at-or-below\nthe absolute threshold, while maintaining the ratio of speeds between\nmodules.\n\nScaling down the module speeds rotates the direction of net motion in the\nopposite direction of rotational velocity, which makes discretizing the\nchassis speeds inaccurate because the discretization did not account for\nthis translational skew.\n\n:param moduleStates:                       Reference to array of module states. The array will be\n                                           mutated with the normalized speeds!\n:param desiredChassisSpeed:                The desired speed of the robot\n:param attainableMaxModuleSpeed:           The absolute max speed a module can reach\n:param attainableMaxRobotTranslationSpeed: The absolute max speed the robot\n                                           can reach while translating\n:param attainableMaxRobotRotationSpeed:    The absolute max speed the robot can\n                                           reach while rotating"
                }
            ]
        },
        {
            "className": "wpimath.kinematics.SwerveDrive3KinematicsBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3KinematicsBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive3KinematicsBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3KinematicsBase",
                    "functionName": "interpolate",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]",
                    "tooltip": "Performs interpolation between two values.\n\n:param start: The value to start at.\n:param end:   The value to end at.\n:param t:     How far between the two values to interpolate. This should be\n              bounded to [0, 1].\n\n:returns: The interpolated value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSpeeds",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3KinematicsBase",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis speed from the\nwheel speeds. This method is often used for odometry -- determining the\nrobot's position on the field using data from the real-world speed of each\nwheel on the robot.\n\n:param wheelSpeeds: The speeds of the wheels.\n\n:returns: The chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3KinematicsBase",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the given\nchange in wheel positions. This method is often used for odometry --\ndetermining the robot's position on the field using changes in the distance\ndriven by each wheel on the robot.\n\n:param start: The starting distances driven by the wheels.\n:param end:   The ending distances driven by the wheels.\n\n:returns: The resulting Twist2d in the robot's movement."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3KinematicsBase",
                    "functionName": "toWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\n:param chassisSpeeds: The desired chassis speed.\n\n:returns: The wheel speeds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive3Odometry",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3Odometry",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive3Odometry",
                    "tooltip": "Constructs a SwerveDriveOdometry object.\n\n:param kinematics:      The swerve drive kinematics for your drivetrain.\n:param gyroAngle:       The angle reported by the gyroscope.\n:param modulePositions: The wheel positions reported by each module.\n:param initialPose:     The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive3OdometryBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "tooltip": "Constructs an Odometry object.\n\n:param kinematics:     The kinematics for your drivetrain.\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param initialPose:    The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive3OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive3OdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive4Kinematics",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "getModules",
                    "returnType": "Tuple[wpimath.geometry.Translation2d, wpimath.geometry.Translation2d, wpimath.geometry.Translation2d, wpimath.geometry.Translation2d]",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "interpolate",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleHeadings",
                            "type": "Tuple[wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "resetHeadings",
                    "returnType": "None",
                    "tooltip": "Reset the internal swerve module headings.\n\n:param moduleHeadings: The swerve module headings. The order of the module\n                       headings should be same as passed into the constructor of this class."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis state from the\ngiven module states. This method is often used for odometry -- determining\nthe robot's position on the field using data from the real-world speed and\nangle of each module on the robot.\n\n:param moduleStates: The state of the modules as an wpi::array of type\n                     SwerveModuleState, NumModules long as measured from respective encoders\n                     and gyros. The order of the swerve module states should be same as passed\n                     into the constructor of this class.\n\n:returns: The resulting chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "Translation2d(x=0.000000, y=0.000000)",
                            "name": "centerOfRotation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "toSwerveModuleStates",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Performs inverse kinematics to return the module states from a desired\nchassis velocity. This method is often used to convert joystick values into\nmodule speeds and angles.\n\nThis function also supports variable centers of rotation. During normal\noperations, the center of rotation is usually the same as the physical\ncenter of the robot; therefore, the argument is defaulted to that use case.\nHowever, if you wish to change the center of rotation for evasive\nmaneuvers, vision alignment, or for any other use case, you can do so.\n\n:param chassisSpeeds:    The desired chassis speed.\n:param centerOfRotation: The center of rotation. For example, if you set the\n center of rotation at one corner of the robot and provide a chassis speed\n that only has a dtheta component, the robot will rotate around that corner.\n\n:returns: An array containing the module states. Use caution because these\n          module states are not normalized. Sometimes, a user input may cause one of\n          the module speeds to go above the attainable max velocity. Use the\n          :meth:`desaturateWheelSpeeds` function to rectify this issue.\n          In addition, you can use Python unpacking syntax\n          to directly assign the module states to variables::\n\n            fl, fr, bl, br = kinematics.toSwerveModuleStates(chassisSpeeds)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleDeltas",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the\ngiven module position deltas. This method is often used for odometry --\ndetermining the robot's position on the field using data from the\nreal-world position delta and angle of each module on the robot.\n\n:param moduleDeltas: The latest change in position of the modules (as a\n                     SwerveModulePosition type) as measured from respective encoders and gyros.\n                     The order of the swerve module states should be same as passed into the\n                     constructor of this class.\n\n:returns: The resulting Twist2d."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "toWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "desaturateWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum.\n\nSometimes, after inverse kinematics, the requested speed\nfrom one or more modules may be above the max attainable speed for the\ndriving motor on that module. To fix this issue, one can reduce all the\nwheel speeds to make sure that all requested module speeds are at-or-below\nthe absolute threshold, while maintaining the ratio of speeds between\nmodules.\n\nScaling down the module speeds rotates the direction of net motion in the\nopposite direction of rotational velocity, which makes discretizing the\nchassis speeds inaccurate because the discretization did not account for\nthis translational skew.\n\n:param moduleStates:       Reference to array of module states. The array will be\n                           mutated with the normalized speeds!\n:param attainableMaxSpeed: The absolute max speed that a module can reach."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredChassisSpeed",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxModuleSpeed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxRobotTranslationSpeed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxRobotRotationSpeed",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Kinematics",
                    "functionName": "desaturateWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum, as well as getting rid of joystick saturation at edges\nof joystick.\n\nSometimes, after inverse kinematics, the requested speed\nfrom one or more modules may be above the max attainable speed for the\ndriving motor on that module. To fix this issue, one can reduce all the\nwheel speeds to make sure that all requested module speeds are at-or-below\nthe absolute threshold, while maintaining the ratio of speeds between\nmodules.\n\nScaling down the module speeds rotates the direction of net motion in the\nopposite direction of rotational velocity, which makes discretizing the\nchassis speeds inaccurate because the discretization did not account for\nthis translational skew.\n\n:param moduleStates:                       Reference to array of module states. The array will be\n                                           mutated with the normalized speeds!\n:param desiredChassisSpeed:                The desired speed of the robot\n:param attainableMaxModuleSpeed:           The absolute max speed a module can reach\n:param attainableMaxRobotTranslationSpeed: The absolute max speed the robot\n                                           can reach while translating\n:param attainableMaxRobotRotationSpeed:    The absolute max speed the robot can\n                                           reach while rotating"
                }
            ]
        },
        {
            "className": "wpimath.kinematics.SwerveDrive4KinematicsBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4KinematicsBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive4KinematicsBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4KinematicsBase",
                    "functionName": "interpolate",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]",
                    "tooltip": "Performs interpolation between two values.\n\n:param start: The value to start at.\n:param end:   The value to end at.\n:param t:     How far between the two values to interpolate. This should be\n              bounded to [0, 1].\n\n:returns: The interpolated value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSpeeds",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4KinematicsBase",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis speed from the\nwheel speeds. This method is often used for odometry -- determining the\nrobot's position on the field using data from the real-world speed of each\nwheel on the robot.\n\n:param wheelSpeeds: The speeds of the wheels.\n\n:returns: The chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4KinematicsBase",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the given\nchange in wheel positions. This method is often used for odometry --\ndetermining the robot's position on the field using changes in the distance\ndriven by each wheel on the robot.\n\n:param start: The starting distances driven by the wheels.\n:param end:   The ending distances driven by the wheels.\n\n:returns: The resulting Twist2d in the robot's movement."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4KinematicsBase",
                    "functionName": "toWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\n:param chassisSpeeds: The desired chassis speed.\n\n:returns: The wheel speeds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive4Odometry",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4Odometry",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive4Odometry",
                    "tooltip": "Constructs a SwerveDriveOdometry object.\n\n:param kinematics:      The swerve drive kinematics for your drivetrain.\n:param gyroAngle:       The angle reported by the gyroscope.\n:param modulePositions: The wheel positions reported by each module.\n:param initialPose:     The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive4OdometryBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "tooltip": "Constructs an Odometry object.\n\n:param kinematics:     The kinematics for your drivetrain.\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param initialPose:    The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive4OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive4OdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive6Kinematics",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg2",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg3",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg4",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg5",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "getModules",
                    "returnType": "Tuple[wpimath.geometry.Translation2d, wpimath.geometry.Translation2d, wpimath.geometry.Translation2d, wpimath.geometry.Translation2d, wpimath.geometry.Translation2d, wpimath.geometry.Translation2d]",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "interpolate",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleHeadings",
                            "type": "Tuple[wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d, wpimath.geometry.Rotation2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "resetHeadings",
                    "returnType": "None",
                    "tooltip": "Reset the internal swerve module headings.\n\n:param moduleHeadings: The swerve module headings. The order of the module\n                       headings should be same as passed into the constructor of this class."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis state from the\ngiven module states. This method is often used for odometry -- determining\nthe robot's position on the field using data from the real-world speed and\nangle of each module on the robot.\n\n:param moduleStates: The state of the modules as an wpi::array of type\n                     SwerveModuleState, NumModules long as measured from respective encoders\n                     and gyros. The order of the swerve module states should be same as passed\n                     into the constructor of this class.\n\n:returns: The resulting chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "Translation2d(x=0.000000, y=0.000000)",
                            "name": "centerOfRotation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "toSwerveModuleStates",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Performs inverse kinematics to return the module states from a desired\nchassis velocity. This method is often used to convert joystick values into\nmodule speeds and angles.\n\nThis function also supports variable centers of rotation. During normal\noperations, the center of rotation is usually the same as the physical\ncenter of the robot; therefore, the argument is defaulted to that use case.\nHowever, if you wish to change the center of rotation for evasive\nmaneuvers, vision alignment, or for any other use case, you can do so.\n\n:param chassisSpeeds:    The desired chassis speed.\n:param centerOfRotation: The center of rotation. For example, if you set the\n center of rotation at one corner of the robot and provide a chassis speed\n that only has a dtheta component, the robot will rotate around that corner.\n\n:returns: An array containing the module states. Use caution because these\n          module states are not normalized. Sometimes, a user input may cause one of\n          the module speeds to go above the attainable max velocity. Use the\n          :meth:`desaturateWheelSpeeds` function to rectify this issue.\n          In addition, you can use Python unpacking syntax\n          to directly assign the module states to variables::\n\n            fl, fr, bl, br = kinematics.toSwerveModuleStates(chassisSpeeds)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "moduleDeltas",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the\ngiven module position deltas. This method is often used for odometry --\ndetermining the robot's position on the field using data from the\nreal-world position delta and angle of each module on the robot.\n\n:param moduleDeltas: The latest change in position of the modules (as a\n                     SwerveModulePosition type) as measured from respective encoders and gyros.\n                     The order of the swerve module states should be same as passed into the\n                     constructor of this class.\n\n:returns: The resulting Twist2d."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "toWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "desaturateWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum.\n\nSometimes, after inverse kinematics, the requested speed\nfrom one or more modules may be above the max attainable speed for the\ndriving motor on that module. To fix this issue, one can reduce all the\nwheel speeds to make sure that all requested module speeds are at-or-below\nthe absolute threshold, while maintaining the ratio of speeds between\nmodules.\n\nScaling down the module speeds rotates the direction of net motion in the\nopposite direction of rotational velocity, which makes discretizing the\nchassis speeds inaccurate because the discretization did not account for\nthis translational skew.\n\n:param moduleStates:       Reference to array of module states. The array will be\n                           mutated with the normalized speeds!\n:param attainableMaxSpeed: The absolute max speed that a module can reach."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "moduleStates",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        },
                        {
                            "defaultValue": "",
                            "name": "desiredChassisSpeed",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxModuleSpeed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxRobotTranslationSpeed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "attainableMaxRobotRotationSpeed",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Kinematics",
                    "functionName": "desaturateWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Renormalizes the wheel speeds if any individual speed is above the\nspecified maximum, as well as getting rid of joystick saturation at edges\nof joystick.\n\nSometimes, after inverse kinematics, the requested speed\nfrom one or more modules may be above the max attainable speed for the\ndriving motor on that module. To fix this issue, one can reduce all the\nwheel speeds to make sure that all requested module speeds are at-or-below\nthe absolute threshold, while maintaining the ratio of speeds between\nmodules.\n\nScaling down the module speeds rotates the direction of net motion in the\nopposite direction of rotational velocity, which makes discretizing the\nchassis speeds inaccurate because the discretization did not account for\nthis translational skew.\n\n:param moduleStates:                       Reference to array of module states. The array will be\n                                           mutated with the normalized speeds!\n:param desiredChassisSpeed:                The desired speed of the robot\n:param attainableMaxModuleSpeed:           The absolute max speed a module can reach\n:param attainableMaxRobotTranslationSpeed: The absolute max speed the robot\n                                           can reach while translating\n:param attainableMaxRobotRotationSpeed:    The absolute max speed the robot can\n                                           reach while rotating"
                }
            ]
        },
        {
            "className": "wpimath.kinematics.SwerveDrive6KinematicsBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6KinematicsBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive6KinematicsBase",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6KinematicsBase",
                    "functionName": "interpolate",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]",
                    "tooltip": "Performs interpolation between two values.\n\n:param start: The value to start at.\n:param end:   The value to end at.\n:param t:     How far between the two values to interpolate. This should be\n              bounded to [0, 1].\n\n:returns: The interpolated value."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelSpeeds",
                            "type": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6KinematicsBase",
                    "functionName": "toChassisSpeeds",
                    "returnType": "wpimath.kinematics.ChassisSpeeds",
                    "tooltip": "Performs forward kinematics to return the resulting chassis speed from the\nwheel speeds. This method is often used for odometry -- determining the\nrobot's position on the field using data from the real-world speed of each\nwheel on the robot.\n\n:param wheelSpeeds: The speeds of the wheels.\n\n:returns: The chassis speed."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6KinematicsBase",
                    "functionName": "toTwist2d",
                    "returnType": "wpimath.geometry.Twist2d",
                    "tooltip": "Performs forward kinematics to return the resulting Twist2d from the given\nchange in wheel positions. This method is often used for odometry --\ndetermining the robot's position on the field using changes in the distance\ndriven by each wheel on the robot.\n\n:param start: The starting distances driven by the wheels.\n:param end:   The ending distances driven by the wheels.\n\n:returns: The resulting Twist2d in the robot's movement."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "chassisSpeeds",
                            "type": "wpimath.kinematics.ChassisSpeeds"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6KinematicsBase",
                    "functionName": "toWheelSpeeds",
                    "returnType": "Tuple[wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState, wpimath.kinematics.SwerveModuleState]",
                    "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\n:param chassisSpeeds: The desired chassis speed.\n\n:returns: The wheel speeds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive6Odometry",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "modulePositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6Odometry",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive6Odometry",
                    "tooltip": "Constructs a SwerveDriveOdometry object.\n\n:param kinematics:      The swerve drive kinematics for your drivetrain.\n:param gyroAngle:       The angle reported by the gyroscope.\n:param modulePositions: The wheel positions reported by each module.\n:param initialPose:     The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveDrive6OdometryBase",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6KinematicsBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "initialPose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "tooltip": "Constructs an Odometry object.\n\n:param kinematics:     The kinematics for your drivetrain.\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param initialPose:    The starting position of the robot on the field."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "getPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "resetPose",
                    "returnType": "None",
                    "tooltip": "Resets the pose.\n\n:param pose: The pose to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "resetPosition",
                    "returnType": "None",
                    "tooltip": "Resets the robot's position on the field.\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n:param pose:           The position on the field that your robot is at."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "resetRotation",
                    "returnType": "None",
                    "tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "translation",
                            "type": "wpimath.geometry.Translation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "resetTranslation",
                    "returnType": "None",
                    "tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveDrive6OdometryBase"
                        },
                        {
                            "defaultValue": "",
                            "name": "gyroAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "wheelPositions",
                            "type": "Tuple[wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition, wpimath.kinematics.SwerveModulePosition]"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveDrive6OdometryBase",
                    "functionName": "update",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Updates the robot's position on the field using forward kinematics and\nintegration of the pose over time. This method takes in an angle parameter\nwhich is used instead of the angular rate that is calculated from forward\nkinematics, in addition to the current distance measurement at each wheel.\n\n:param gyroAngle:      The angle reported by the gyroscope.\n:param wheelPositions: The current distances measured by each wheel.\n\n:returns: The new pose of the robot."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveModulePosition",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "distance",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "Rotation2d(0.000000)",
                            "name": "angle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveModulePosition",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveModulePosition",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveModulePosition"
                        },
                        {
                            "defaultValue": "",
                            "name": "endValue",
                            "type": "wpimath.kinematics.SwerveModulePosition"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveModulePosition",
                    "functionName": "interpolate",
                    "returnType": "wpimath.kinematics.SwerveModulePosition",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [
                {
                    "name": "angle",
                    "tooltip": "Angle of the module.",
                    "type": "wpimath.geometry.Rotation2d",
                    "writable": true
                },
                {
                    "name": "distance",
                    "tooltip": "Distance the wheel of a module has traveled",
                    "type": "wpimath.units.meters",
                    "writable": true
                },
                {
                    "name": "distance_ft",
                    "tooltip": "",
                    "type": "wpimath.units.feet",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.kinematics.SwerveModuleState",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "Rotation2d(0.000000)",
                            "name": "angle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveModuleState",
                    "functionName": "__init__",
                    "returnType": "wpimath.kinematics.SwerveModuleState",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveModuleState"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveModuleState",
                    "functionName": "cosineScale",
                    "returnType": "None",
                    "tooltip": "Scales speed by cosine of angle error. This scales down movement\nperpendicular to the desired direction of travel that can occur when\nmodules change directions. This results in smoother driving.\n\n:param currentAngle: The current module angle."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.kinematics.SwerveModuleState"
                        },
                        {
                            "defaultValue": "",
                            "name": "currentAngle",
                            "type": "wpimath.geometry.Rotation2d"
                        }
                    ],
                    "declaringClassName": "wpimath.kinematics.SwerveModuleState",
                    "functionName": "optimize",
                    "returnType": "None",
                    "tooltip": "Minimize the change in the heading this swerve module state would\nrequire by potentially reversing the direction the wheel spins. If this is\nused with the PIDController class's continuous input functionality, the\nfurthest a wheel will ever rotate is 90 degrees.\n\n:param currentAngle: The current module angle."
                }
            ],
            "instanceVariables": [
                {
                    "name": "angle",
                    "tooltip": "Angle of the module.",
                    "type": "wpimath.geometry.Rotation2d",
                    "writable": true
                },
                {
                    "name": "speed",
                    "tooltip": "Speed of the wheel of the module.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "speed_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.kinematics",
            "staticMethods": []
        },
        {
            "className": "wpimath.optimization.SimulatedAnnealing",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "initialTemperature",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "neighbor",
                            "type": "Callable[[object], object]"
                        },
                        {
                            "defaultValue": "",
                            "name": "cost",
                            "type": "Callable[[object], float]"
                        }
                    ],
                    "declaringClassName": "wpimath.optimization.SimulatedAnnealing",
                    "functionName": "__init__",
                    "returnType": "wpimath.optimization.SimulatedAnnealing",
                    "tooltip": "Constructor for Simulated Annealing that can be used for the same functions\nbut with different initial states.\n\n:param initialTemperature: The initial temperature. Higher temperatures make\n                           it more likely a worse state will be accepted during iteration, helping\n                           to avoid local minima. The temperature is decreased over time.\n:param neighbor:           Function that generates a random neighbor of the current\n                           state.\n:param cost:               Function that returns the scalar cost of a state."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.optimization.SimulatedAnnealing"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialGuess",
                            "type": "object"
                        },
                        {
                            "defaultValue": "",
                            "name": "iterations",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.optimization.SimulatedAnnealing",
                    "functionName": "solve",
                    "returnType": "object",
                    "tooltip": "Runs the Simulated Annealing algorithm.\n\n:param initialGuess: The initial state.\n:param iterations:   Number of iterations to run the solver.\n\n:returns: The optimized state."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.optimization",
            "staticMethods": []
        },
        {
            "className": "wpimath.path.TravelingSalesman",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.path.TravelingSalesman",
                    "functionName": "__init__",
                    "returnType": "wpimath.path.TravelingSalesman",
                    "tooltip": "Constructs a traveling salesman problem solver with a cost function defined\nas the 2D distance between poses."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "cost",
                            "type": "Callable[[wpimath.geometry.Pose2d, wpimath.geometry.Pose2d], float]"
                        }
                    ],
                    "declaringClassName": "wpimath.path.TravelingSalesman",
                    "functionName": "__init__",
                    "returnType": "wpimath.path.TravelingSalesman",
                    "tooltip": "Constructs a traveling salesman problem solver with a user-provided cost\nfunction.\n\n:param cost: Function that returns the cost between two poses. The sum of\n             the costs for every pair of poses is minimized."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.path.TravelingSalesman"
                        },
                        {
                            "defaultValue": "",
                            "name": "poses",
                            "type": "List[wpimath.geometry.Pose2d]"
                        },
                        {
                            "defaultValue": "",
                            "name": "iterations",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.path.TravelingSalesman",
                    "functionName": "solve",
                    "returnType": "list[wpimath.geometry.Pose2d]",
                    "tooltip": "Finds the path through every pose that minimizes the cost. The first pose\nin the returned array is the first pose that was passed in.\n\nThis overload supports a dynamically-sized list of poses for Python to use.\n\n:param poses:      An array of Pose2ds the path must pass through.\n:param iterations: The number of times the solver attempts to find a better\n                   random neighbor.\n\n:returns: The optimized path as an array of Pose2ds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.path",
            "staticMethods": []
        },
        {
            "className": "wpimath.spline.CubicHermiteSpline",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "xInitialControlVector",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "xFinalControlVector",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "yInitialControlVector",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "yFinalControlVector",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.CubicHermiteSpline",
                    "functionName": "__init__",
                    "returnType": "wpimath.spline.CubicHermiteSpline",
                    "tooltip": "Constructs a cubic hermite spline with the specified control vectors. Each\ncontrol vector contains info about the location of the point and its first\nderivative.\n\n:param xInitialControlVector: The control vector for the initial point in\n                              the x dimension.\n:param xFinalControlVector:   The control vector for the final point in\n                              the x dimension.\n:param yInitialControlVector: The control vector for the initial point in\n                              the y dimension.\n:param yFinalControlVector:   The control vector for the final point in\n                              the y dimension."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline3"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline3",
                    "functionName": "coefficients",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[6, 4]\"]",
                    "tooltip": "Returns the coefficients of the spline.\n\n:returns: The coefficients of the spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.CubicHermiteSpline"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.CubicHermiteSpline",
                    "functionName": "getFinalControlVector",
                    "returnType": "wpimath.spline.Spline3.ControlVector",
                    "tooltip": "Returns the final control vector that created this spline.\n\n:returns: The final control vector that created this spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.CubicHermiteSpline"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.CubicHermiteSpline",
                    "functionName": "getInitialControlVector",
                    "returnType": "wpimath.spline.Spline3.ControlVector",
                    "tooltip": "Returns the initial control vector that created this spline.\n\n:returns: The initial control vector that created this spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline3"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline3",
                    "functionName": "getPoint",
                    "returnType": "Optional[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]",
                    "tooltip": "Gets the pose and curvature at some point t on the spline.\n\n:param t: The point t\n\n:returns: The pose and curvature at that point."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.spline",
            "staticMethods": []
        },
        {
            "className": "wpimath.spline.QuinticHermiteSpline",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "xInitialControlVector",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "xFinalControlVector",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "yInitialControlVector",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "yFinalControlVector",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.QuinticHermiteSpline",
                    "functionName": "__init__",
                    "returnType": "wpimath.spline.QuinticHermiteSpline",
                    "tooltip": "Constructs a quintic hermite spline with the specified control vectors.\nEach control vector contains into about the location of the point, its\nfirst derivative, and its second derivative.\n\n:param xInitialControlVector: The control vector for the initial point in\n                              the x dimension.\n:param xFinalControlVector:   The control vector for the final point in\n                              the x dimension.\n:param yInitialControlVector: The control vector for the initial point in\n                              the y dimension.\n:param yFinalControlVector:   The control vector for the final point in\n                              the y dimension."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline5"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline5",
                    "functionName": "coefficients",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[6, 6]\"]",
                    "tooltip": "Returns the coefficients of the spline.\n\n:returns: The coefficients of the spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.QuinticHermiteSpline"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.QuinticHermiteSpline",
                    "functionName": "getFinalControlVector",
                    "returnType": "wpimath.spline.Spline5.ControlVector",
                    "tooltip": "Returns the final control vector that created this spline.\n\n:returns: The final control vector that created this spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.QuinticHermiteSpline"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.QuinticHermiteSpline",
                    "functionName": "getInitialControlVector",
                    "returnType": "wpimath.spline.Spline5.ControlVector",
                    "tooltip": "Returns the initial control vector that created this spline.\n\n:returns: The initial control vector that created this spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline5"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline5",
                    "functionName": "getPoint",
                    "returnType": "Optional[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]",
                    "tooltip": "Gets the pose and curvature at some point t on the spline.\n\n:param t: The point t\n\n:returns: The pose and curvature at that point."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.spline",
            "staticMethods": []
        },
        {
            "className": "wpimath.spline.Spline3",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.spline.Spline3",
                    "functionName": "__init__",
                    "returnType": "wpimath.spline.Spline3",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline3"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline3",
                    "functionName": "coefficients",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[6, 4]\"]",
                    "tooltip": "Returns the coefficients of the spline.\n\n:returns: The coefficients of the spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline3"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline3",
                    "functionName": "getFinalControlVector",
                    "returnType": "wpimath.spline.Spline3.ControlVector",
                    "tooltip": "Returns the final control vector that created this spline.\n\n:returns: The final control vector that created this spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline3"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline3",
                    "functionName": "getInitialControlVector",
                    "returnType": "wpimath.spline.Spline3.ControlVector",
                    "tooltip": "Returns the initial control vector that created this spline.\n\n:returns: The initial control vector that created this spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline3"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline3",
                    "functionName": "getPoint",
                    "returnType": "Optional[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]",
                    "tooltip": "Gets the pose and curvature at some point t on the spline.\n\n:param t: The point t\n\n:returns: The pose and curvature at that point."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.spline",
            "staticMethods": []
        },
        {
            "className": "wpimath.spline.Spline3.ControlVector",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline3.ControlVector",
                    "functionName": "__init__",
                    "returnType": "wpimath.spline.Spline3.ControlVector",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "x",
                    "tooltip": "The x components of the control vector.",
                    "type": "Tuple[float, float]",
                    "writable": true
                },
                {
                    "name": "y",
                    "tooltip": "The y components of the control vector.",
                    "type": "Tuple[float, float]",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.spline",
            "staticMethods": []
        },
        {
            "className": "wpimath.spline.Spline5",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.spline.Spline5",
                    "functionName": "__init__",
                    "returnType": "wpimath.spline.Spline5",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline5"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline5",
                    "functionName": "coefficients",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[6, 6]\"]",
                    "tooltip": "Returns the coefficients of the spline.\n\n:returns: The coefficients of the spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline5"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline5",
                    "functionName": "getFinalControlVector",
                    "returnType": "wpimath.spline.Spline5.ControlVector",
                    "tooltip": "Returns the final control vector that created this spline.\n\n:returns: The final control vector that created this spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline5"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline5",
                    "functionName": "getInitialControlVector",
                    "returnType": "wpimath.spline.Spline5.ControlVector",
                    "tooltip": "Returns the initial control vector that created this spline.\n\n:returns: The initial control vector that created this spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.spline.Spline5"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline5",
                    "functionName": "getPoint",
                    "returnType": "Optional[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]",
                    "tooltip": "Gets the pose and curvature at some point t on the spline.\n\n:param t: The point t\n\n:returns: The pose and curvature at that point."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.spline",
            "staticMethods": []
        },
        {
            "className": "wpimath.spline.Spline5.ControlVector",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "Tuple[typing.SupportsFloat, typing.SupportsFloat, typing.SupportsFloat]"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.Spline5.ControlVector",
                    "functionName": "__init__",
                    "returnType": "wpimath.spline.Spline5.ControlVector",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "x",
                    "tooltip": "The x components of the control vector.",
                    "type": "Tuple[float, float, float]",
                    "writable": true
                },
                {
                    "name": "y",
                    "tooltip": "The y components of the control vector.",
                    "type": "Tuple[float, float, float]",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.spline",
            "staticMethods": []
        },
        {
            "className": "wpimath.spline.SplineHelper",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.spline.SplineHelper",
                    "functionName": "__init__",
                    "returnType": "wpimath.spline.SplineHelper",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpimath.spline",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "interiorWaypoints",
                            "type": "list[wpimath.geometry.Translation2d]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.SplineHelper",
                    "functionName": "cubicControlVectorsFromWaypoints",
                    "returnType": "Tuple[wpimath.spline.Spline3.ControlVector, wpimath.spline.Spline3.ControlVector]",
                    "tooltip": "Returns 2 cubic control vectors from a set of exterior waypoints and\ninterior translations.\n\n:param start:             The starting pose.\n:param interiorWaypoints: The interior waypoints.\n:param end:               The ending pose.\n\n:returns: 2 cubic control vectors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.spline.Spline3.ControlVector"
                        },
                        {
                            "defaultValue": "",
                            "name": "waypoints",
                            "type": "list[wpimath.geometry.Translation2d]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.spline.Spline3.ControlVector"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.SplineHelper",
                    "functionName": "cubicSplinesFromControlVectors",
                    "returnType": "list[wpimath.spline.CubicHermiteSpline]",
                    "tooltip": "Returns a set of cubic splines corresponding to the provided control\nvectors. The user is free to set the direction of the start and end\npoint. The directions for the middle waypoints are determined\nautomatically to ensure continuous curvature throughout the path.\n\nThe derivation for the algorithm used can be found here:\n<https://www.uio.no/studier/emner/matnat/ifi/nedlagte-emner/INF-MAT4350/h08/undervisningsmateriale/chap7alecture.pdf>\n\n:param start:     The starting control vector.\n:param waypoints: The middle waypoints. This can be left blank if you\n                  only wish to create a path with two waypoints.\n:param end:       The ending control vector.\n\n:returns: A vector of cubic hermite splines that interpolate through the\n          provided waypoints."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "splines",
                            "type": "list[wpimath.spline.QuinticHermiteSpline]"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.SplineHelper",
                    "functionName": "optimizeCurvature",
                    "returnType": "list[wpimath.spline.QuinticHermiteSpline]",
                    "tooltip": "Optimizes the curvature of 2 or more quintic splines at knot points.\nOverall, this reduces the integral of the absolute value of the second\nderivative across the set of splines.\n\n:param splines: A vector of un-optimized quintic splines.\n\n:returns: A vector of optimized quintic splines."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controlVectors",
                            "type": "list[wpimath.spline.Spline5.ControlVector]"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.SplineHelper",
                    "functionName": "quinticSplinesFromControlVectors",
                    "returnType": "list[wpimath.spline.QuinticHermiteSpline]",
                    "tooltip": "Returns a set of quintic splines corresponding to the provided control\nvectors. The user is free to set the direction of all waypoints. Continuous\ncurvature is guaranteed throughout the path.\n\n:param controlVectors: The control vectors.\n\n:returns: A vector of quintic hermite splines that interpolate through the\n          provided waypoints."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "waypoints",
                            "type": "list[wpimath.geometry.Pose2d]"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.SplineHelper",
                    "functionName": "quinticSplinesFromWaypoints",
                    "returnType": "list[wpimath.spline.QuinticHermiteSpline]",
                    "tooltip": "Returns quintic splines from a set of waypoints.\n\n:param waypoints: The waypoints\n\n:returns: List of quintic splines."
                }
            ]
        },
        {
            "className": "wpimath.spline.SplineParameterizer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.SplineParameterizer",
                    "functionName": "__init__",
                    "returnType": "wpimath.spline.SplineParameterizer",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpimath.spline",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "spline",
                            "type": "wpimath.spline.Spline3"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "t0",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "1.0",
                            "name": "t1",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.SplineParameterizer",
                    "functionName": "parameterize",
                    "returnType": "list[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]",
                    "tooltip": "Parametrizes the spline. This method breaks up the spline into various\narcs until their dx, dy, and dtheta are within specific tolerances.\n\n:param spline: The spline to parameterize.\n:param t0:     Starting internal spline parameter. It is recommended to leave\n               this as default.\n:param t1:     Ending internal spline parameter. It is recommended to leave this\n               as default.\n\n:returns: A vector of poses and curvatures that represents various points on\n          the spline."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "spline",
                            "type": "wpimath.spline.Spline5"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "t0",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "1.0",
                            "name": "t1",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.spline.SplineParameterizer",
                    "functionName": "parameterize",
                    "returnType": "list[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]",
                    "tooltip": "Parametrizes the spline. This method breaks up the spline into various\narcs until their dx, dy, and dtheta are within specific tolerances.\n\n:param spline: The spline to parameterize.\n:param t0:     Starting internal spline parameter. It is recommended to leave\n               this as default.\n:param t1:     Ending internal spline parameter. It is recommended to leave this\n               as default.\n\n:returns: A vector of poses and curvatures that represents various points on\n          the spline."
                }
            ]
        },
        {
            "className": "wpimath.system.LinearSystemLoop_1_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_1_1_1",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:      State-space plant.\n:param controller: State-space controller.\n:param observer:   State-space observer.\n:param maxVoltage: The maximum voltage that can be applied. Commonly 12.\n:param dt:         The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_1_1_1",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:         State-space plant.\n:param controller:    State-space controller.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector.\n:param dt:            The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_1_1_1",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state.\n\n:param controller:  State-space controller.\n:param feedforward: Plant inversion feedforward.\n:param observer:    State-space observer.\n:param maxVoltage:  The maximum voltage that can be applied. Assumes\n                    that the inputs are voltages."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_1_1_1",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward,\nobserver and clamp function. By default, the initial reference is all\nzeros. Users should call reset with the initial system state.\n\n:param controller:    State-space controller.\n:param feedforward:   Plant-inversion feedforward.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the controller's calculated control input u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's calculated control input u.\n\n:param i: Row of u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "clampInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Clamps input vector between system's minimum and maximum allowable input.\n\n:param u: Input vector to clamp.\n\n:returns: Clamped input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "error",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns difference between reference r and current state x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "nextR",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the controller's next reference r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "nextR",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's next reference r.\n\n:param i: Row of r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Sets new controller output, projects model forward, and runs observer\nprediction.\n\nAfter calling this, the user should send the elements of u to the\nactuators.\n\n:param dt: Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Zeroes reference r and controller output u. The previous reference\nof the PlantInversionFeedforward and the initial state estimate of\nthe KalmanFilter are set to the initial state provided.\n\n:param initialState: The initial state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "setNextR",
                    "returnType": "None",
                    "tooltip": "Set the next reference r.\n\n:param nextR: Next reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set the initial state estimate x-hat.\n\n:param xHat: The initial state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the observer's state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_1_1_1",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the observer's state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystemLoop_2_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_1_1",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:      State-space plant.\n:param controller: State-space controller.\n:param observer:   State-space observer.\n:param maxVoltage: The maximum voltage that can be applied. Commonly 12.\n:param dt:         The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_1_1",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:         State-space plant.\n:param controller:    State-space controller.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector.\n:param dt:            The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_1_1",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state.\n\n:param controller:  State-space controller.\n:param feedforward: Plant inversion feedforward.\n:param observer:    State-space observer.\n:param maxVoltage:  The maximum voltage that can be applied. Assumes\n                    that the inputs are voltages."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_1_1",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward,\nobserver and clamp function. By default, the initial reference is all\nzeros. Users should call reset with the initial system state.\n\n:param controller:    State-space controller.\n:param feedforward:   Plant-inversion feedforward.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the controller's calculated control input u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's calculated control input u.\n\n:param i: Row of u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "clampInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Clamps input vector between system's minimum and maximum allowable input.\n\n:param u: Input vector to clamp.\n\n:returns: Clamped input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "error",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns difference between reference r and current state x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "nextR",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the controller's next reference r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "nextR",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's next reference r.\n\n:param i: Row of r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Sets new controller output, projects model forward, and runs observer\nprediction.\n\nAfter calling this, the user should send the elements of u to the\nactuators.\n\n:param dt: Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Zeroes reference r and controller output u. The previous reference\nof the PlantInversionFeedforward and the initial state estimate of\nthe KalmanFilter are set to the initial state provided.\n\n:param initialState: The initial state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "setNextR",
                    "returnType": "None",
                    "tooltip": "Set the next reference r.\n\n:param nextR: Next reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set the initial state estimate x-hat.\n\n:param xHat: The initial state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the observer's state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_1",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the observer's state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystemLoop_2_1_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_1_2",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:      State-space plant.\n:param controller: State-space controller.\n:param observer:   State-space observer.\n:param maxVoltage: The maximum voltage that can be applied. Commonly 12.\n:param dt:         The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_1_2",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:         State-space plant.\n:param controller:    State-space controller.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector.\n:param dt:            The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_1_2",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state.\n\n:param controller:  State-space controller.\n:param feedforward: Plant inversion feedforward.\n:param observer:    State-space observer.\n:param maxVoltage:  The maximum voltage that can be applied. Assumes\n                    that the inputs are voltages."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_1_2",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward,\nobserver and clamp function. By default, the initial reference is all\nzeros. Users should call reset with the initial system state.\n\n:param controller:    State-space controller.\n:param feedforward:   Plant-inversion feedforward.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the controller's calculated control input u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's calculated control input u.\n\n:param i: Row of u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "clampInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Clamps input vector between system's minimum and maximum allowable input.\n\n:param u: Input vector to clamp.\n\n:returns: Clamped input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "error",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns difference between reference r and current state x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "nextR",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the controller's next reference r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "nextR",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's next reference r.\n\n:param i: Row of r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Sets new controller output, projects model forward, and runs observer\nprediction.\n\nAfter calling this, the user should send the elements of u to the\nactuators.\n\n:param dt: Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Zeroes reference r and controller output u. The previous reference\nof the PlantInversionFeedforward and the initial state estimate of\nthe KalmanFilter are set to the initial state provided.\n\n:param initialState: The initial state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "setNextR",
                    "returnType": "None",
                    "tooltip": "Set the next reference r.\n\n:param nextR: Next reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set the initial state estimate x-hat.\n\n:param xHat: The initial state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the observer's state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_1_2",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the observer's state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystemLoop_2_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_2_2",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:      State-space plant.\n:param controller: State-space controller.\n:param observer:   State-space observer.\n:param maxVoltage: The maximum voltage that can be applied. Commonly 12.\n:param dt:         The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_2_2",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:         State-space plant.\n:param controller:    State-space controller.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector.\n:param dt:            The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_2_2",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state.\n\n:param controller:  State-space controller.\n:param feedforward: Plant inversion feedforward.\n:param observer:    State-space observer.\n:param maxVoltage:  The maximum voltage that can be applied. Assumes\n                    that the inputs are voltages."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_2_2_2",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward,\nobserver and clamp function. By default, the initial reference is all\nzeros. Users should call reset with the initial system state.\n\n:param controller:    State-space controller.\n:param feedforward:   Plant-inversion feedforward.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the controller's calculated control input u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's calculated control input u.\n\n:param i: Row of u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "clampInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Clamps input vector between system's minimum and maximum allowable input.\n\n:param u: Input vector to clamp.\n\n:returns: Clamped input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "error",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns difference between reference r and current state x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "nextR",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the controller's next reference r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "nextR",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's next reference r.\n\n:param i: Row of r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Sets new controller output, projects model forward, and runs observer\nprediction.\n\nAfter calling this, the user should send the elements of u to the\nactuators.\n\n:param dt: Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Zeroes reference r and controller output u. The previous reference\nof the PlantInversionFeedforward and the initial state estimate of\nthe KalmanFilter are set to the initial state provided.\n\n:param initialState: The initial state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "setNextR",
                    "returnType": "None",
                    "tooltip": "Set the next reference r.\n\n:param nextR: Next reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set the initial state estimate x-hat.\n\n:param xHat: The initial state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the observer's state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_2_2_2",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the observer's state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystemLoop_3_2_3",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_3_2_3",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:      State-space plant.\n:param controller: State-space controller.\n:param observer:   State-space observer.\n:param maxVoltage: The maximum voltage that can be applied. Commonly 12.\n:param dt:         The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "plant",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_3_2_3",
                    "tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:         State-space plant.\n:param controller:    State-space controller.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector.\n:param dt:            The nominal timestep."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_3_2_3",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state.\n\n:param controller:  State-space controller.\n:param feedforward: Plant inversion feedforward.\n:param observer:    State-space observer.\n:param maxVoltage:  The maximum voltage that can be applied. Assumes\n                    that the inputs are voltages."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controller",
                            "type": "wpimath.controller.LinearQuadraticRegulator_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.LinearPlantInversionFeedforward_3_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "observer",
                            "type": "wpimath.estimator.KalmanFilter_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampFunction",
                            "type": "Callable[[typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]], typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystemLoop_3_2_3",
                    "tooltip": "Constructs a state-space loop with the given controller, feedforward,\nobserver and clamp function. By default, the initial reference is all\nzeros. Users should call reset with the initial system state.\n\n:param controller:    State-space controller.\n:param feedforward:   Plant-inversion feedforward.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "U",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the controller's calculated control input u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "U",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's calculated control input u.\n\n:param i: Row of u."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "u",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "clampInput",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Clamps input vector between system's minimum and maximum allowable input.\n\n:param u: Input vector to clamp.\n\n:returns: Clamped input vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "correct",
                    "returnType": "None",
                    "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param y: Measurement vector."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "error",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns difference between reference r and current state x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "nextR",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the controller's next reference r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "nextR",
                    "returnType": "float",
                    "tooltip": "Returns an element of the controller's next reference r.\n\n:param i: Row of r."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "predict",
                    "returnType": "None",
                    "tooltip": "Sets new controller output, projects model forward, and runs observer\nprediction.\n\nAfter calling this, the user should send the elements of u to the\nactuators.\n\n:param dt: Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "initialState",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "reset",
                    "returnType": "None",
                    "tooltip": "Zeroes reference r and controller output u. The previous reference\nof the PlantInversionFeedforward and the initial state estimate of\nthe KalmanFilter are set to the initial state provided.\n\n:param initialState: The initial state."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "nextR",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "setNextR",
                    "returnType": "None",
                    "tooltip": "Set the next reference r.\n\n:param nextR: Next reference."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "xHat",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set the initial state estimate x-hat.\n\n:param xHat: The initial state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "setXhat",
                    "returnType": "None",
                    "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "xhat",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the observer's state estimate x-hat."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystemLoop_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystemLoop_3_2_3",
                    "functionName": "xhat",
                    "returnType": "float",
                    "tooltip": "Returns an element of the observer's state estimate x-hat.\n\n:param i: Row of x-hat."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_1_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_1_1_1",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_1",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_1_1_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_1_1_2",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_2",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_1_1_3",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_1_1_3",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_1_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_1_1_3",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_2_1_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_2_1_1",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 2]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_1",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_2_1_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_2_1_2",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_2",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_2_1_3",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_2_1_3",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 2]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_1_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_1_3",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_2_2_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_2_2_1",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 2]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 2]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_1",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_2_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_2_2_2",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_2",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_2_2_3",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_2_2_3",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 2]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 2]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_2_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_2_2_3",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_3_2_1",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[1, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_3_2_1",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 2]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 3]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 2]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_1"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_1",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[1, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_3_2_2",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_3_2_2",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 2]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 3]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 2]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_2"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_2",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[2, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.LinearSystem_3_2_3",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "A",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "B",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "C",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 3]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "D",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 2]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.LinearSystem_3_2_3",
                    "tooltip": "Constructs a discrete plant with the given continuous system coefficients.\n\n:param A: System matrix.\n:param B: Input matrix.\n:param C: Output matrix.\n:param D: Feedthrough matrix.\n          @throws std::domain_error if any matrix element isn't finite."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "A",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Returns the system matrix A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "A",
                    "returnType": "float",
                    "tooltip": "Returns an element of the system matrix A.\n\n:param i: Row of A.\n:param j: Column of A."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "B",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 2]\"]",
                    "tooltip": "Returns the input matrix B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "B",
                    "returnType": "float",
                    "tooltip": "Returns an element of the input matrix B.\n\n:param i: Row of B.\n:param j: Column of B."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "C",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Returns the output matrix C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "C",
                    "returnType": "float",
                    "tooltip": "Returns an element of the output matrix C.\n\n:param i: Row of C.\n:param j: Column of C."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "D",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 2]\"]",
                    "tooltip": "Returns the feedthrough matrix D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "j",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "D",
                    "returnType": "float",
                    "tooltip": "Returns an element of the feedthrough matrix D.\n\n:param i: Row of D.\n:param j: Column of D."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "calculateX",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Computes the new x given the old x and the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input.\n:param dt:       Timestep for model update."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.LinearSystem_3_2_3"
                        },
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        },
                        {
                            "defaultValue": "",
                            "name": "clampedU",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[2, 1]\"]"
                        }
                    ],
                    "declaringClassName": "wpimath.system.LinearSystem_3_2_3",
                    "functionName": "calculateY",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 1]\"]",
                    "tooltip": "Computes the new y given the control input.\n\nThis is used by state observers directly to run updates based on state\nestimate.\n\n:param x:        The current state.\n:param clampedU: The control input."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.system",
            "staticMethods": []
        },
        {
            "className": "wpimath.system.plant.DCMotor",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "nominalVoltage",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "stallTorque",
                            "type": "wpimath.units.newton_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "stallCurrent",
                            "type": "wpimath.units.amperes"
                        },
                        {
                            "defaultValue": "",
                            "name": "freeCurrent",
                            "type": "wpimath.units.amperes"
                        },
                        {
                            "defaultValue": "",
                            "name": "freeSpeed",
                            "type": "wpimath.units.radians_per_second"
                        },
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Constructs a DC motor.\n\n:param nominalVoltage: Voltage at which the motor constants were measured.\n:param stallTorque:    Torque when stalled.\n:param stallCurrent:   Current draw when stalled.\n:param freeCurrent:    Current draw under no load.\n:param freeSpeed:      Angular velocity under no load.\n:param numMotors:      Number of motors in a gearbox."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.radians_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "current",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns current drawn by motor with given speed and input voltage.\n\n:param speed:        The current angular velocity of the motor.\n:param inputVoltage: The voltage being applied to the motor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "torque",
                            "type": "wpimath.units.newton_meters"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "current",
                    "returnType": "wpimath.units.amperes",
                    "tooltip": "Returns current drawn by motor for a given torque.\n\n:param torque: The torque produced by the motor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "torque",
                            "type": "wpimath.units.newton_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "inputVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "speed",
                    "returnType": "wpimath.units.radians_per_second",
                    "tooltip": "Returns the angular speed produced by the motor at a given torque and input\nvoltage.\n\n:param torque:       The torque produced by the motor.\n:param inputVoltage: The input voltage provided to the motor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.units.amperes"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "torque",
                    "returnType": "wpimath.units.newton_meters",
                    "tooltip": "Returns torque produced by the motor with a given current.\n\n:param current: The current drawn by the motor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "torque",
                            "type": "wpimath.units.newton_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "voltage",
                    "returnType": "wpimath.units.volts",
                    "tooltip": "Returns the voltage provided to the motor for a given torque and\nangular velocity.\n\n:param torque: The torque produced by the motor.\n:param speed:  The current angular velocity of the motor."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearboxReduction",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "withReduction",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a copy of this motor with the given gearbox reduction applied.\n\n:param gearboxReduction: The gearbox reduction."
                }
            ],
            "instanceVariables": [
                {
                    "name": "Kt",
                    "tooltip": "Motor torque constant.",
                    "type": "wpimath.units.volt_seconds",
                    "writable": false
                },
                {
                    "name": "Kv",
                    "tooltip": "Motor velocity constant.",
                    "type": "wpimath.units.radians_per_second_per_volt",
                    "writable": false
                },
                {
                    "name": "R",
                    "tooltip": "Motor internal resistance.",
                    "type": "wpimath.units.ohms",
                    "writable": false
                },
                {
                    "name": "freeCurrent",
                    "tooltip": "Current draw under no load.",
                    "type": "wpimath.units.amperes",
                    "writable": false
                },
                {
                    "name": "freeSpeed",
                    "tooltip": "Angular velocity under no load.",
                    "type": "wpimath.units.radians_per_second",
                    "writable": false
                },
                {
                    "name": "nominalVoltage",
                    "tooltip": "Voltage at which the motor constants were measured.",
                    "type": "wpimath.units.volts",
                    "writable": false
                },
                {
                    "name": "stallCurrent",
                    "tooltip": "Current draw when stalled.",
                    "type": "wpimath.units.amperes",
                    "writable": false
                },
                {
                    "name": "stallTorque",
                    "tooltip": "Torque when stalled.",
                    "type": "wpimath.units.newton_meters",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.system.plant",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "CIM",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of CIM motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "NEO",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of NEO brushless motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "NEO550",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of NEO 550 brushless motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "RS775_125",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of Andymark RS 775-125 motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "andymark9015",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of Andymark 9015 motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "bag",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of Bag motor motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "banebotsRS550",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of Banebots RS 550 motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "banebotsRS775",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of Banebots RS 775 motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "falcon500",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of Falcon 500 brushless motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "falcon500FOC",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Return a gearbox of Falcon 500 motors with FOC (Field-Oriented Control)\nenabled."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "krakenX60",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Return a gearbox of Kraken X60 brushless motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "krakenX60FOC",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Return a gearbox of Kraken X60 brushless motors with FOC (Field-Oriented\nControl) enabled."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "miniCIM",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of MiniCIM motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "neoVortex",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Return a gearbox of Neo Vortex brushless motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "romiBuiltIn",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Return a gearbox of Romi/TI_RSLK MAX motors."
                },
                {
                    "args": [
                        {
                            "defaultValue": "1",
                            "name": "numMotors",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.DCMotor",
                    "functionName": "vex775Pro",
                    "returnType": "wpimath.system.plant.DCMotor",
                    "tooltip": "Returns a gearbox of Vex 775 Pro motors."
                }
            ]
        },
        {
            "className": "wpimath.system.plant.LinearSystemId",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "__init__",
                    "returnType": "wpimath.system.plant.LinearSystemId",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpimath.system.plant",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "motor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "J",
                            "type": "wpimath.units.kilogram_square_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "DCMotorSystem",
                    "returnType": "wpimath.system.LinearSystem_2_1_2",
                    "tooltip": "Create a state-space model of a DC motor system. The states of the system\nare [angular position, angular velocity]\u1d40, inputs are [voltage], and\noutputs are [angular position, angular velocity]\u1d40.\n\n:param motor:   The motor (or gearbox) attached to the system.\n:param J:       the moment of inertia J of the DC motor.\n:param gearing: Gear ratio from motor to output.\n                @throws std::domain_error if J <= 0 or gearing <= 0.\n                @see <a\n                href=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "DCMotorSystem",
                    "returnType": "wpimath.system.LinearSystem_2_1_2",
                    "tooltip": "Create a state-space model of a DC motor system from its kV\n(volts/(unit/sec)) and kA (volts/(unit/sec\u00b2)). These constants can be\nfound using SysId. the states of the system are [angular position, angular\nvelocity]\u1d40, inputs are [voltage], and outputs are [angular position,\nangular velocity]\u1d40.\n\nYou MUST use an SI unit (i.e. meters or radians) for the Distance template\nargument. You may still use non-SI units (such as feet or inches) for the\nactual method arguments; they will automatically be converted to SI\ninternally.\n\nThe parameters provided by the user are from this feedforward model:\n\nu = K_v v + K_a a\n\n@throws std::domain_error if kV < 0 or kA <= 0.\n\n:param kV: The velocity gain, in volts/(unit/sec).\n:param kA: The acceleration gain, in volts/(unit/sec\u00b2)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_radian"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_radian"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "DCMotorSystemRadians",
                    "returnType": "wpimath.system.LinearSystem_2_1_2",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "motor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "mass",
                            "type": "wpimath.units.kilograms"
                        },
                        {
                            "defaultValue": "",
                            "name": "r",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rb",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "J",
                            "type": "wpimath.units.kilogram_square_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "drivetrainVelocitySystem",
                    "returnType": "wpimath.system.LinearSystem_2_2_2",
                    "tooltip": "Create a state-space model of differential drive drivetrain. In this model,\nthe states are [left velocity, right velocity]\u1d40, the inputs are [left\nvoltage, right voltage], and the outputs are [left velocity, right\nvelocity]\u1d40.\n\n:param motor:   The motor (or gearbox) driving the drivetrain.\n:param mass:    The mass of the robot in kilograms.\n:param r:       The radius of the wheels in meters.\n:param rb:      The radius of the base (half of the trackwidth), in meters.\n:param J:       The moment of inertia of the robot.\n:param gearing: Gear ratio from motor to wheel.\n                @throws std::domain_error if mass <= 0, r <= 0, rb <= 0, J <= 0, or\n                gearing <= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "motor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "mass",
                            "type": "wpimath.units.kilograms"
                        },
                        {
                            "defaultValue": "",
                            "name": "radius",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "elevatorSystem",
                    "returnType": "wpimath.system.LinearSystem_2_1_2",
                    "tooltip": "Create a state-space model of the elevator system. The states of the system\nare [position, velocity]\u1d40, inputs are [voltage], and outputs are [position,\nvelocity]\u1d40.\n\n:param motor:   The motor (or gearbox) attached to the carriage.\n:param mass:    The mass of the elevator carriage, in kilograms.\n:param radius:  The radius of the elevator's driving drum, in meters.\n:param gearing: Gear ratio from motor to carriage.\n                @throws std::domain_error if mass <= 0, radius <= 0, or gearing <= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "motor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "J",
                            "type": "wpimath.units.kilogram_square_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "flywheelSystem",
                    "returnType": "wpimath.system.LinearSystem_1_1_1",
                    "tooltip": "Create a state-space model of a flywheel system, the states of the system\nare [angular velocity], inputs are [voltage], and outputs are [angular\nvelocity].\n\n:param motor:   The motor (or gearbox) attached to the flywheel.\n:param J:       The moment of inertia J of the flywheel.\n:param gearing: Gear ratio from motor to flywheel.\n                @throws std::domain_error if J <= 0 or gearing <= 0."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kVLinear",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kALinear",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kVAngular",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kAAngular",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "identifyDrivetrainSystem",
                    "returnType": "wpimath.system.LinearSystem_2_2_2",
                    "tooltip": "Identify a differential drive drivetrain given the drivetrain's kV and kA\nin both linear {(volts/(meter/sec), (volts/(meter/sec\u00b2))} and angular\n{(volts/(radian/sec), (volts/(radian/sec\u00b2))} cases. These constants can be\nfound using SysId.\n\nStates: [[left velocity], [right velocity]]\nInputs: [[left voltage], [right voltage]]\nOutputs: [[left velocity], [right velocity]]\n\n:param kVLinear:  The linear velocity gain in volts per (meters per second).\n:param kALinear:  The linear acceleration gain in volts per (meters per\n                  second squared).\n:param kVAngular: The angular velocity gain in volts per (meters per\n                  second).\n:param kAAngular: The angular acceleration gain in volts per (meters per\n                  second squared).\n                  @throws domain_error if kVLinear <= 0, kALinear <= 0, kVAngular <= 0,\n                  or kAAngular <= 0.\n                  @see <a\n                  href=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kVLinear",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kALinear",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kVAngular",
                            "type": "wpimath.units.volt_seconds_per_radian"
                        },
                        {
                            "defaultValue": "",
                            "name": "kAAngular",
                            "type": "wpimath.units.volt_seconds_squared_per_radian"
                        },
                        {
                            "defaultValue": "",
                            "name": "trackwidth",
                            "type": "wpimath.units.meters"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "identifyDrivetrainSystem",
                    "returnType": "wpimath.system.LinearSystem_2_2_2",
                    "tooltip": "Identify a differential drive drivetrain given the drivetrain's kV and kA\nin both linear {(volts/(meter/sec)), (volts/(meter/sec\u00b2))} and angular\n{(volts/(radian/sec)), (volts/(radian/sec\u00b2))} cases. This can be found\nusing SysId.\n\nStates: [[left velocity], [right velocity]]\nInputs: [[left voltage], [right voltage]]\nOutputs: [[left velocity], [right velocity]]\n\n:param kVLinear:   The linear velocity gain in volts per (meters per\n                   second).\n:param kALinear:   The linear acceleration gain in volts per (meters per\n                   second squared).\n:param kVAngular:  The angular velocity gain in volts per (radians per\n                   second).\n:param kAAngular:  The angular acceleration gain in volts per (radians per\n                   second squared).\n:param trackwidth: The distance between the differential drive's left and\n                   right wheels, in meters.\n                   @throws domain_error if kVLinear <= 0, kALinear <= 0, kVAngular <= 0,\n                   kAAngular <= 0, or trackwidth <= 0.\n                   @see <a\n                   href=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "identifyPositionSystemMeters",
                    "returnType": "wpimath.system.LinearSystem_2_1_2",
                    "tooltip": "Create a state-space model for a 1 DOF position system from its kV\n(volts/(unit/sec)) and kA (volts/(unit/sec\u00b2)). These constants can be\nfound using SysId. the states of the system are [position, velocity]\u1d40,\ninputs are [voltage], and outputs are [position, velocity]\u1d40.\n\nYou MUST use an SI unit (i.e. meters or radians) for the Distance template\nargument. You may still use non-SI units (such as feet or inches) for the\nactual method arguments; they will automatically be converted to SI\ninternally.\n\nThe parameters provided by the user are from this feedforward model:\n\nu = K_v v + K_a a\n\n@throws std::domain_error if kV < 0 or kA <= 0.\n@see <a\nhref=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>\n\n:param kV: The velocity gain, in volts/(unit/sec).\n:param kA: The acceleration gain, in volts/(unit/sec\u00b2)."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_radian"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_radian"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "identifyPositionSystemRadians",
                    "returnType": "wpimath.system.LinearSystem_2_1_2",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "identifyVelocitySystemMeters",
                    "returnType": "wpimath.system.LinearSystem_1_1_1",
                    "tooltip": "Create a state-space model for a 1 DOF velocity system from its kV\n(volts/(unit/sec)) and kA (volts/(unit/sec\u00b2)). These constants can be\nfound using SysId. The states of the system are [velocity], inputs are\n[voltage], and outputs are [velocity].\n\nYou MUST use an SI unit (i.e. meters or radians) for the Distance template\nargument. You may still use non-SI units (such as feet or inches) for the\nactual method arguments; they will automatically be converted to SI\ninternally.\n\nThe parameters provided by the user are from this feedforward model:\n\nu = K_v v + K_a a\n\n:param kV: The velocity gain, in volts/(unit/sec).\n:param kA: The acceleration gain, in volts/(unit/sec\u00b2).\n           @throws std::domain_error if kV < 0 or kA <= 0.\n           @see <a\n           href=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_radian"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_radian"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "identifyVelocitySystemRadians",
                    "returnType": "wpimath.system.LinearSystem_1_1_1",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "motor",
                            "type": "wpimath.system.plant.DCMotor"
                        },
                        {
                            "defaultValue": "",
                            "name": "J",
                            "type": "wpimath.units.kilogram_square_meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "gearing",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.system.plant.LinearSystemId",
                    "functionName": "singleJointedArmSystem",
                    "returnType": "wpimath.system.LinearSystem_2_1_2",
                    "tooltip": "Create a state-space model of a single-jointed arm system.The states of the\nsystem are [angle, angular velocity]\u1d40, inputs are [voltage], and outputs\nare [angle, angular velocity]\u1d40.\n\n:param motor:   The motor (or gearbox) attached to the arm.\n:param J:       The moment of inertia J of the arm.\n:param gearing: Gear ratio from motor to arm.\n                @throws std::domain_error if J <= 0 or gearing <= 0."
                }
            ]
        },
        {
            "className": "wpimath.trajectory.ExponentialProfileMeterVolts",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts",
                    "tooltip": "Constructs a ExponentialProfile.\n\n:param constraints: The constraints on the profile, like maximum input."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts",
                    "functionName": "calculate",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.State",
                    "tooltip": "Calculates the position and velocity for the profile at a time t where the\ncurrent state is at time t = 0.\n\n:param t:       How long to advance from the current state toward the desired\n                state.\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The position and velocity of the profile at time t."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts",
                    "functionName": "calculateInflectionPoint",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.State",
                    "tooltip": "Calculates the point after which the fastest way to reach the goal state is\nto apply input in the opposite direction.\n\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The position and velocity of the profile at the inflection point."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts",
                    "functionName": "calculateProfileTiming",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.ProfileTiming",
                    "tooltip": "Calculates the time it will take for this profile to reach the inflection\npoint, and the time it will take for this profile to reach the goal state.\n\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The timing information for this profile."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts",
                    "functionName": "timeLeftUntil",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Calculates the time it will take for this profile to reach the goal state.\n\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The total duration of this profile."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "args",
                            "type": "tuple"
                        },
                        {
                            "defaultValue": "",
                            "name": "kwargs",
                            "type": "dict"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints",
                    "tooltip": "Initialize self.  See help(type(self)) for accurate signature."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Computes the max achievable velocity for an Exponential Profile.\n\n:returns: The steady-state velocity achieved by this profile."
                }
            ],
            "instanceVariables": [
                {
                    "name": "A",
                    "tooltip": "The State-Space 1x1 system matrix.",
                    "type": "wpimath.units.units_per_second",
                    "writable": false
                },
                {
                    "name": "B",
                    "tooltip": "The State-Space 1x1 input matrix.",
                    "type": "wpimath.units.meters_per_second_squared_per_volt",
                    "writable": false
                },
                {
                    "name": "maxInput",
                    "tooltip": "Maximum unsigned input voltage.",
                    "type": "wpimath.units.volts",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.trajectory",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "maxInput",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "kV",
                            "type": "wpimath.units.volt_seconds_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "kA",
                            "type": "wpimath.units.volt_seconds_squared_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints",
                    "functionName": "fromCharacteristics",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "maxInput",
                            "type": "wpimath.units.volts"
                        },
                        {
                            "defaultValue": "",
                            "name": "a",
                            "type": "wpimath.units.units_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "b",
                            "type": "wpimath.units.meters_per_second_squared_per_volt"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints",
                    "functionName": "fromStateSpace",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.ExponentialProfileMeterVolts.ProfileTiming",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts.ProfileTiming",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.ProfileTiming",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.ExponentialProfileMeterVolts.ProfileTiming"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts.ProfileTiming",
                    "functionName": "isFinished",
                    "returnType": "bool",
                    "tooltip": "Decides if the profile is finished by time t.\n\n:param t: The time since the beginning of the profile.\n\n:returns: if the profile is finished at time t."
                }
            ],
            "instanceVariables": [
                {
                    "name": "inflectionTime",
                    "tooltip": "Profile inflection time.",
                    "type": "wpimath.units.seconds",
                    "writable": false
                },
                {
                    "name": "totalTime",
                    "tooltip": "Total profile time.",
                    "type": "wpimath.units.seconds",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.ExponentialProfileMeterVolts.State",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "arg0",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "arg1",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.ExponentialProfileMeterVolts.State",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.State",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "position",
                    "tooltip": "The position at this state.",
                    "type": "wpimath.units.meters",
                    "writable": false
                },
                {
                    "name": "velocity",
                    "tooltip": "The velocity at this state.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.Trajectory",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.trajectory.Trajectory",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "states",
                            "type": "list[wpimath.trajectory.Trajectory.State]"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": "Constructs a trajectory from a vector of states.\n\n@throws std::invalid_argument if the vector of states is empty."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.Trajectory"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory",
                    "functionName": "initialPose",
                    "returnType": "wpimath.geometry.Pose2d",
                    "tooltip": "Returns the initial pose of the trajectory.\n\n:returns: The initial pose of the trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.Trajectory"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory",
                    "functionName": "relativeTo",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": "Transforms all poses in the trajectory so that they are relative to the\ngiven pose. This is useful for converting a field-relative trajectory\ninto a robot-relative trajectory.\n\n:param pose: The pose that is the origin of the coordinate frame that\n             the current trajectory will be transformed into.\n\n:returns: The transformed trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.Trajectory"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory",
                    "functionName": "sample",
                    "returnType": "wpimath.trajectory.Trajectory.State",
                    "tooltip": "Sample the trajectory at a point in time.\n\n:param t: The point in time since the beginning of the trajectory to sample.\n\n:returns: The state at that point in time.\n          @throws std::runtime_error if the trajectory has no states."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.Trajectory"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory",
                    "functionName": "states",
                    "returnType": "list[wpimath.trajectory.Trajectory.State]",
                    "tooltip": "Return the states of the trajectory.\n\n:returns: The states of the trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.Trajectory"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory",
                    "functionName": "totalTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the overall duration of the trajectory.\n\n:returns: The duration of the trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.Trajectory"
                        },
                        {
                            "defaultValue": "",
                            "name": "transform",
                            "type": "wpimath.geometry.Transform2d"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory",
                    "functionName": "transformBy",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": "Transforms all poses in the trajectory by the given transform. This is\nuseful for converting a robot-relative trajectory into a field-relative\ntrajectory. This works with respect to the first pose in the trajectory.\n\n:param transform: The transform to transform the trajectory by.\n\n:returns: The transformed trajectory."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.Trajectory.State",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0.0",
                            "name": "t",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "acceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        },
                        {
                            "defaultValue": "Pose2d(Translation2d(x=0.000000, y=0.000000), Rotation2d(0.000000))",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "0.0",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory.State",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.Trajectory.State",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.Trajectory.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "endValue",
                            "type": "wpimath.trajectory.Trajectory.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.Trajectory.State",
                    "functionName": "interpolate",
                    "returnType": "wpimath.trajectory.Trajectory.State",
                    "tooltip": "Interpolates between two States.\n\n:param endValue: The end value for the interpolation.\n:param i:        The interpolant (fraction).\n\n:returns: The interpolated state."
                }
            ],
            "instanceVariables": [
                {
                    "name": "acceleration",
                    "tooltip": "The acceleration at that point of the trajectory.",
                    "type": "wpimath.units.meters_per_second_squared",
                    "writable": true
                },
                {
                    "name": "acceleration_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second_squared",
                    "writable": false
                },
                {
                    "name": "curvature",
                    "tooltip": "",
                    "type": "wpimath.units.radians_per_meter",
                    "writable": true
                },
                {
                    "name": "pose",
                    "tooltip": "The pose at that point of the trajectory.",
                    "type": "wpimath.geometry.Pose2d",
                    "writable": true
                },
                {
                    "name": "t",
                    "tooltip": "The time elapsed since the beginning of the trajectory.",
                    "type": "wpimath.units.seconds",
                    "writable": true
                },
                {
                    "name": "velocity",
                    "tooltip": "The speed at that point of the trajectory.",
                    "type": "wpimath.units.meters_per_second",
                    "writable": true
                },
                {
                    "name": "velocity_fps",
                    "tooltip": "",
                    "type": "wpimath.units.feet_per_second",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.TrajectoryConfig",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "maxVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxAcceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrajectoryConfig",
                    "tooltip": "Constructs a config object.\n\n:param maxVelocity:     The max velocity of the trajectory.\n:param maxAcceleration: The max acceleration of the trajectory."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraint",
                            "type": "wpimath.trajectory.constraint.TrajectoryConstraint"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "addConstraint",
                    "returnType": "None",
                    "tooltip": "Adds a user-defined constraint to the trajectory.\n\n:param constraint: The user-defined constraint."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "endVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Returns the ending velocity of the trajectory.\n\n:returns: The ending velocity of the trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "isReversed",
                    "returnType": "bool",
                    "tooltip": "Returns whether the trajectory is reversed or not.\n\n:returns: whether the trajectory is reversed or not."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "maxAcceleration",
                    "returnType": "wpimath.units.meters_per_second_squared",
                    "tooltip": "Returns the maximum acceleration of the trajectory.\n\n:returns: The maximum acceleration of the trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Returns the maximum velocity of the trajectory.\n\n:returns: The maximum velocity of the trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "endVelocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setEndVelocity",
                    "returnType": "None",
                    "tooltip": "Sets the end velocity of the trajectory.\n\n:param endVelocity: The end velocity of the trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setKinematics",
                    "returnType": "None",
                    "tooltip": "Adds a differential drive kinematics constraint to ensure that\nno wheel velocity of a differential drive goes above the max velocity.\n\n:param kinematics: The differential drive kinematics."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setKinematics",
                    "returnType": "None",
                    "tooltip": "Adds a mecanum drive kinematics constraint to ensure that\nno wheel velocity of a mecanum drive goes above the max velocity.\n\n:param kinematics: The mecanum drive kinematics."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setKinematics",
                    "returnType": "None",
                    "tooltip": "Adds a swerve drive kinematics constraint to ensure that\nno wheel velocity of a swerve drive goes above the max velocity.\n\n:param kinematics: The swerve drive kinematics."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setKinematics",
                    "returnType": "None",
                    "tooltip": "Adds a swerve drive kinematics constraint to ensure that\nno wheel velocity of a swerve drive goes above the max velocity.\n\n:param kinematics: The swerve drive kinematics."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setKinematics",
                    "returnType": "None",
                    "tooltip": "Adds a swerve drive kinematics constraint to ensure that\nno wheel velocity of a swerve drive goes above the max velocity.\n\n:param kinematics: The swerve drive kinematics."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setKinematics",
                    "returnType": "None",
                    "tooltip": "Adds a swerve drive kinematics constraint to ensure that\nno wheel velocity of a swerve drive goes above the max velocity.\n\n:param kinematics: The swerve drive kinematics."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "reversed",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setReversed",
                    "returnType": "None",
                    "tooltip": "Sets the reversed flag of the trajectory.\n\n:param reversed: Whether the trajectory should be reversed or not."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        },
                        {
                            "defaultValue": "",
                            "name": "startVelocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "setStartVelocity",
                    "returnType": "None",
                    "tooltip": "Sets the start velocity of the trajectory.\n\n:param startVelocity: The start velocity of the trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "startVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Returns the starting velocity of the trajectory.\n\n:returns: The starting velocity of the trajectory."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "maxVelocity",
                            "type": "wpimath.units.feet_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxAcceleration",
                            "type": "wpimath.units.feet_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryConfig",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.TrajectoryConfig",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.TrajectoryGenerator",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.trajectory.TrajectoryGenerator",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrajectoryGenerator",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "initial",
                            "type": "wpimath.spline.Spline3.ControlVector"
                        },
                        {
                            "defaultValue": "",
                            "name": "interiorWaypoints",
                            "type": "list[wpimath.geometry.Translation2d]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.spline.Spline3.ControlVector"
                        },
                        {
                            "defaultValue": "",
                            "name": "config",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryGenerator",
                    "functionName": "generateTrajectory",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": "Generates a trajectory from the given control vectors and config. This\nmethod uses clamped cubic splines -- a method in which the exterior control\nvectors and interior waypoints are provided. The headings are automatically\ndetermined at the interior points to ensure continuous curvature.\n\n:param initial:           The initial control vector.\n:param interiorWaypoints: The interior waypoints.\n:param end:               The ending control vector.\n:param config:            The configuration for the trajectory.\n\n:returns: The generated trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "start",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "interiorWaypoints",
                            "type": "list[wpimath.geometry.Translation2d]"
                        },
                        {
                            "defaultValue": "",
                            "name": "end",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "config",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryGenerator",
                    "functionName": "generateTrajectory",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": "Generates a trajectory from the given waypoints and config. This method\nuses clamped cubic splines -- a method in which the initial pose, final\npose, and interior waypoints are provided.  The headings are automatically\ndetermined at the interior points to ensure continuous curvature.\n\n:param start:             The starting pose.\n:param interiorWaypoints: The interior waypoints.\n:param end:               The ending pose.\n:param config:            The configuration for the trajectory.\n\n:returns: The generated trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "controlVectors",
                            "type": "list[wpimath.spline.Spline5.ControlVector]"
                        },
                        {
                            "defaultValue": "",
                            "name": "config",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryGenerator",
                    "functionName": "generateTrajectory",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": "Generates a trajectory from the given quintic control vectors and config.\nThis method uses quintic hermite splines -- therefore, all points must be\nrepresented by control vectors. Continuous curvature is guaranteed in this\nmethod.\n\n:param controlVectors: List of quintic control vectors.\n:param config:         The configuration for the trajectory.\n\n:returns: The generated trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "waypoints",
                            "type": "list[wpimath.geometry.Pose2d]"
                        },
                        {
                            "defaultValue": "",
                            "name": "config",
                            "type": "wpimath.trajectory.TrajectoryConfig"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryGenerator",
                    "functionName": "generateTrajectory",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": "Generates a trajectory from the given waypoints and config. This method\nuses quintic hermite splines -- therefore, all points must be represented\nby Pose2d objects. Continuous curvature is guaranteed in this method.\n\n:param waypoints: List of waypoints..\n:param config:    The configuration for the trajectory.\n\n:returns: The generated trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "func",
                            "type": "Callable[[str], None]"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryGenerator",
                    "functionName": "setErrorHandler",
                    "returnType": "None",
                    "tooltip": "Set error reporting function. By default, it is output to stderr.\n\n:param func: Error reporting function."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "splines",
                            "type": "list[wpimath.spline.CubicHermiteSpline]"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryGenerator",
                    "functionName": "splinePointsFromSplines",
                    "returnType": "list[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]",
                    "tooltip": "Generate spline points from a vector of splines by parameterizing the\nsplines.\n\n:param splines: The splines to parameterize.\n\n:returns: The spline points for use in time parameterization of a trajectory."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "splines",
                            "type": "list[wpimath.spline.QuinticHermiteSpline]"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryGenerator",
                    "functionName": "splinePointsFromSplines",
                    "returnType": "list[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]",
                    "tooltip": "Generate spline points from a vector of splines by parameterizing the\nsplines.\n\n:param splines: The splines to parameterize.\n\n:returns: The spline points for use in time parameterization of a trajectory."
                }
            ]
        },
        {
            "className": "wpimath.trajectory.TrajectoryParameterizer",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.trajectory.TrajectoryParameterizer",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrajectoryParameterizer",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "points",
                            "type": "list[tuple[wpimath.geometry.Pose2d, wpimath.units.radians_per_meter]]"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "list[wpimath.trajectory.constraint.TrajectoryConstraint]"
                        },
                        {
                            "defaultValue": "",
                            "name": "startVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "endVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVelocity",
                            "type": "wpimath.units.meters_per_second"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxAcceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        },
                        {
                            "defaultValue": "",
                            "name": "reversed",
                            "type": "bool"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrajectoryParameterizer",
                    "functionName": "timeParameterizeTrajectory",
                    "returnType": "wpimath.trajectory.Trajectory",
                    "tooltip": "Parameterize the trajectory by time. This is where the velocity profile is\ngenerated.\n\nThe derivation of the algorithm used can be found here:\n<http://www2.informatik.uni-freiburg.de/~lau/students/Sprunk2008.pdf>\n\n:param points:          Reference to the spline points.\n:param constraints:     A vector of various velocity and acceleration\n                        constraints.\n:param startVelocity:   The start velocity for the trajectory.\n:param endVelocity:     The end velocity for the trajectory.\n:param maxVelocity:     The max velocity for the trajectory.\n:param maxAcceleration: The max acceleration for the trajectory.\n:param reversed:        Whether the robot should move backwards. Note that the\n                        robot will still move from a -> b -> ... -> z as defined in the waypoints.\n\n:returns: The trajectory."
                }
            ]
        },
        {
            "className": "wpimath.trajectory.TrapezoidProfile",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.TrapezoidProfile.Constraints"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfile",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrapezoidProfile",
                    "tooltip": "Constructs a TrapezoidProfile.\n\n:param constraints: The constraints on the profile, like maximum velocity."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrapezoidProfile"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.trajectory.TrapezoidProfile.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.TrapezoidProfile.State"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfile",
                    "functionName": "calculate",
                    "returnType": "wpimath.trajectory.TrapezoidProfile.State",
                    "tooltip": "Calculates the position and velocity for the profile at a time t where the\ncurrent state is at time t = 0.\n\n:param t:       How long to advance from the current state toward the desired\n                state.\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The position and velocity of the profile at time t."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrapezoidProfile"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfile",
                    "functionName": "isFinished",
                    "returnType": "bool",
                    "tooltip": "Returns true if the profile has reached the goal.\n\nThe profile has reached the goal if the time since the profile started has\nexceeded the profile's total time.\n\n:param t: The time since the beginning of the profile.\n\n:returns: True if the profile has reached the goal."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrapezoidProfile"
                        },
                        {
                            "defaultValue": "",
                            "name": "target",
                            "type": "float"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfile",
                    "functionName": "timeLeftUntil",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the time left until a target distance in the profile is reached.\n\n:param target: The target distance.\n\n:returns: The time left until a target distance in the profile is reached, or\n          zero if no goal was set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrapezoidProfile"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfile",
                    "functionName": "totalTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the total time the profile takes to reach the goal.\n\n:returns: The total time the profile takes to reach the goal, or zero if no\n          goal was set."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.TrapezoidProfile.Constraints",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "maxVelocity",
                            "type": "wpimath.units.units_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "maxAcceleration",
                            "type": "wpimath.units.units_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfile.Constraints",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrapezoidProfile.Constraints",
                    "tooltip": "Constructs constraints for a Trapezoid Profile.\n\n:param maxVelocity:     Maximum velocity, must be non-negative.\n:param maxAcceleration: Maximum acceleration, must be non-negative."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "maxAcceleration",
                    "tooltip": "Maximum acceleration.",
                    "type": "wpimath.units.units_per_second_squared",
                    "writable": false
                },
                {
                    "name": "maxVelocity",
                    "tooltip": "Maximum velocity.",
                    "type": "wpimath.units.units_per_second",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.TrapezoidProfile.State",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "position",
                            "type": "float"
                        },
                        {
                            "defaultValue": "0",
                            "name": "velocity",
                            "type": "wpimath.units.units_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfile.State",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrapezoidProfile.State",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "position",
                    "tooltip": "The position at this state.",
                    "type": "float",
                    "writable": false
                },
                {
                    "name": "velocity",
                    "tooltip": "The velocity at this state.",
                    "type": "wpimath.units.units_per_second",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.TrapezoidProfileRadians",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "constraints",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.Constraints"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfileRadians",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrapezoidProfileRadians",
                    "tooltip": "Constructs a TrapezoidProfile.\n\n:param constraints: The constraints on the profile, like maximum velocity."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.State"
                        },
                        {
                            "defaultValue": "",
                            "name": "goal",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians.State"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfileRadians",
                    "functionName": "calculate",
                    "returnType": "wpimath.trajectory.TrapezoidProfileRadians.State",
                    "tooltip": "Calculates the position and velocity for the profile at a time t where the\ncurrent state is at time t = 0.\n\n:param t:       How long to advance from the current state toward the desired\n                state.\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The position and velocity of the profile at time t."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "t",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfileRadians",
                    "functionName": "isFinished",
                    "returnType": "bool",
                    "tooltip": "Returns true if the profile has reached the goal.\n\nThe profile has reached the goal if the time since the profile started has\nexceeded the profile's total time.\n\n:param t: The time since the beginning of the profile.\n\n:returns: True if the profile has reached the goal."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians"
                        },
                        {
                            "defaultValue": "",
                            "name": "target",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfileRadians",
                    "functionName": "timeLeftUntil",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the time left until a target distance in the profile is reached.\n\n:param target: The target distance.\n\n:returns: The time left until a target distance in the profile is reached, or\n          zero if no goal was set."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.TrapezoidProfileRadians"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfileRadians",
                    "functionName": "totalTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Returns the total time the profile takes to reach the goal.\n\n:returns: The total time the profile takes to reach the goal, or zero if no\n          goal was set."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.TrapezoidProfileRadians.Constraints",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "maxVelocity",
                            "type": "wpimath.units.radians_per_second"
                        },
                        {
                            "defaultValue": "0",
                            "name": "maxAcceleration",
                            "type": "wpimath.units.radians_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfileRadians.Constraints",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrapezoidProfileRadians.Constraints",
                    "tooltip": "Constructs constraints for a Trapezoid Profile.\n\n:param maxVelocity:     Maximum velocity, must be non-negative.\n:param maxAcceleration: Maximum acceleration, must be non-negative."
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "maxAcceleration",
                    "tooltip": "Maximum acceleration.",
                    "type": "wpimath.units.radians_per_second_squared",
                    "writable": false
                },
                {
                    "name": "maxVelocity",
                    "tooltip": "Maximum velocity.",
                    "type": "wpimath.units.radians_per_second",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.TrapezoidProfileRadians.State",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "0",
                            "name": "position",
                            "type": "wpimath.units.radians"
                        },
                        {
                            "defaultValue": "0",
                            "name": "velocity",
                            "type": "wpimath.units.radians_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.TrapezoidProfileRadians.State",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.TrapezoidProfileRadians.State",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "position",
                    "tooltip": "The position at this state.",
                    "type": "wpimath.units.radians",
                    "writable": false
                },
                {
                    "name": "velocity",
                    "tooltip": "The velocity at this state.",
                    "type": "wpimath.units.radians_per_second",
                    "writable": false
                }
            ],
            "moduleName": "wpimath.trajectory",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "maxCentripetalAcceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "maxCentripetalAcceleration",
                            "type": "wpimath.units.feet_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.constraint.CentripetalAccelerationConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.DifferentialDriveVoltageConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "feedforward",
                            "type": "wpimath.controller.SimpleMotorFeedforwardMeters"
                        },
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.DifferentialDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVoltage",
                            "type": "wpimath.units.volts"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.DifferentialDriveVoltageConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.DifferentialDriveVoltageConstraint",
                    "tooltip": "Creates a new DifferentialDriveVoltageConstraint.\n\n:param feedforward: A feedforward component describing the behavior of the\n                    drive.\n:param kinematics:  A kinematics component describing the drive geometry.\n:param maxVoltage:  The maximum voltage available to the motors while\n                    following the path. Should be somewhat less than the nominal battery\n                    voltage (12V) to account for \"voltage sag\" due to current draw."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.DifferentialDriveVoltageConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.DifferentialDriveVoltageConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.DifferentialDriveVoltageConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.DifferentialDriveVoltageConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "xWidth",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "yWidth",
                            "type": "wpimath.units.meters"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraint",
                            "type": "wpimath.trajectory.constraint.TrajectoryConstraint"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
                    "tooltip": "Constructs a new EllipticalRegionConstraint.\n\n:deprecated: Use constructor taking Ellipse2d instead.\n\n:param center:     The center of the ellipse in which to enforce the constraint.\n:param xWidth:     The width of the ellipse in which to enforce the constraint.\n:param yWidth:     The height of the ellipse in which to enforce the constraint.\n:param rotation:   The rotation to apply to all radii around the origin.\n:param constraint: The constraint to enforce when the robot is within the\n                   region."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "ellipse",
                            "type": "wpimath.geometry.Ellipse2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraint",
                            "type": "wpimath.trajectory.constraint.TrajectoryConstraint"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
                    "tooltip": "Constructs a new EllipticalRegionConstraint.\n\n:param ellipse:    The ellipse in which to enforce the constraint.\n:param constraint: The constraint to enforce when the robot is within the\n                   region."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.EllipticalRegionConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.EllipticalRegionConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "center",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "xWidth",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "yWidth",
                            "type": "wpimath.units.feet"
                        },
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "wpimath.geometry.Rotation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraint",
                            "type": "wpimath.trajectory.constraint.TrajectoryConstraint"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
                    "functionName": "fromFeet",
                    "returnType": "wpimath.trajectory.constraint.EllipticalRegionConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.MaxVelocityConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "maxVelocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.MaxVelocityConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.MaxVelocityConstraint",
                    "tooltip": "Constructs a new MaxVelocityConstraint.\n\n:param maxVelocity: The max velocity."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.MaxVelocityConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.MaxVelocityConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.MaxVelocityConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.MaxVelocityConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "maxVelocity",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.MaxVelocityConstraint",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.constraint.MaxVelocityConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.MecanumDriveKinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.RectangularRegionConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "bottomLeftPoint",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "topRightPoint",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraint",
                            "type": "wpimath.trajectory.constraint.TrajectoryConstraint"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.RectangularRegionConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.RectangularRegionConstraint",
                    "tooltip": "Constructs a new RectangularRegionConstraint.\n\n:deprecated: Use constructor taking Rectangle2d instead.\n\n:param bottomLeftPoint: The bottom left point of the rectangular region in\n                        which to enforce the constraint.\n:param topRightPoint:   The top right point of the rectangular region in which\n                        to enforce the constraint.\n:param constraint:      The constraint to enforce when the robot is within the\n                        region."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rectangle",
                            "type": "wpimath.geometry.Rectangle2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "constraint",
                            "type": "wpimath.trajectory.constraint.TrajectoryConstraint"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.RectangularRegionConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.RectangularRegionConstraint",
                    "tooltip": "Constructs a new RectangularRegionConstraint.\n\n:param rectangle:  The rectangular region in which to enforce the constraint.\n:param constraint: The constraint to enforce when the robot is within the\n                   region."
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.RectangularRegionConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.RectangularRegionConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.RectangularRegionConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.RectangularRegionConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive2Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive3Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive4Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kinematics",
                            "type": "wpimath.kinematics.SwerveDrive6Kinematics"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxSpeed",
                            "type": "wpimath.units.feet_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint",
                    "functionName": "fromFps",
                    "returnType": "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint",
                    "tooltip": ""
                }
            ]
        },
        {
            "className": "wpimath.trajectory.constraint.TrajectoryConstraint",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.trajectory.constraint.TrajectoryConstraint",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.TrajectoryConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "velocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.TrajectoryConstraint",
                    "functionName": "maxVelocity",
                    "returnType": "wpimath.units.meters_per_second",
                    "tooltip": "Returns the max velocity given the current pose and curvature.\n\n:param pose:      The pose at the current point in the trajectory.\n:param curvature: The curvature at the current point in the trajectory.\n:param velocity:  The velocity at the current point in the trajectory before\n                  constraints are applied.\n\n:returns: The absolute maximum velocity."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "self",
                            "type": "wpimath.trajectory.constraint.TrajectoryConstraint"
                        },
                        {
                            "defaultValue": "",
                            "name": "pose",
                            "type": "wpimath.geometry.Pose2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "curvature",
                            "type": "wpimath.units.radians_per_meter"
                        },
                        {
                            "defaultValue": "",
                            "name": "speed",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.TrajectoryConstraint",
                    "functionName": "minMaxAcceleration",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": "Returns the minimum and maximum allowable acceleration for the trajectory\ngiven pose, curvature, and speed.\n\n:param pose:      The pose at the current point in the trajectory.\n:param curvature: The curvature at the current point in the trajectory.\n:param speed:     The speed at the current point in the trajectory.\n\n:returns: The min and max acceleration bounds."
                }
            ],
            "instanceVariables": [],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": []
        },
        {
            "className": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
            "classVariables": [],
            "constructors": [
                {
                    "args": [],
                    "declaringClassName": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "minAcceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxAcceleration",
                            "type": "wpimath.units.meters_per_second_squared"
                        }
                    ],
                    "declaringClassName": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "functionName": "__init__",
                    "returnType": "wpimath.trajectory.constraint.TrajectoryConstraint.MinMax",
                    "tooltip": ""
                }
            ],
            "enums": [],
            "instanceMethods": [],
            "instanceVariables": [
                {
                    "name": "maxAcceleration",
                    "tooltip": "The maximum acceleration.",
                    "type": "wpimath.units.meters_per_second_squared",
                    "writable": true
                },
                {
                    "name": "minAcceleration",
                    "tooltip": "The minimum acceleration.",
                    "type": "wpimath.units.meters_per_second_squared",
                    "writable": true
                }
            ],
            "moduleName": "wpimath.trajectory.constraint",
            "staticMethods": []
        }
    ],
    "modules": [
        {
            "enums": [],
            "functions": [],
            "moduleName": "expansion_hub",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [
                {
                    "args": [],
                    "functionName": "getCurrentThreadPriority",
                    "returnType": "tuple[int, bool]",
                    "tooltip": "Get the thread priority for the current thread.\n\n:param isRealTime: Set to true if thread is real-time, otherwise false.\n\n:returns: The current thread priority. For real-time, this is 1-99\n          with 99 being highest. For non-real-time, this is 0. See\n          \"man 7 sched\" for details."
                },
                {
                    "args": [],
                    "functionName": "getDeployDirectory",
                    "returnType": "str",
                    "tooltip": "Obtains the deploy directory of the program, which is the remote location\nthe deploy directory is deployed to by default. On the robot, this is\n/home/systemcore/py/deploy. In simulation, it is where the simulation was launched\nfrom, in the subdirectory \"deploy\" (`dirname(robot.py)`/deploy).\n\n:returns: The result of the operating directory lookup"
                },
                {
                    "args": [],
                    "functionName": "getErrorMessage",
                    "returnType": "tuple[str, int]",
                    "tooltip": "Gets error message string for an error code."
                },
                {
                    "args": [],
                    "functionName": "getOperatingDirectory",
                    "returnType": "str",
                    "tooltip": "Obtains the operating directory of the program. On the robot, this\nis /home/systemcore/py. In simulation, it is the location of robot.py\n\n:returns: The result of the operating directory lookup."
                },
                {
                    "args": [],
                    "functionName": "getTime",
                    "returnType": "wpimath.units.seconds",
                    "tooltip": "Gives real-time clock system time with nanosecond resolution\n\n:returns: The time, just in case you want the robot to start autonomous at 8pm\n          on Saturday."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "error",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "printTrace",
                            "type": "bool"
                        }
                    ],
                    "functionName": "reportError",
                    "returnType": "None",
                    "tooltip": "\n    Report error to Driver Station, and also prints error to ``sys.stderr``.\n    Optionally appends stack trace to error message.\n\n    :param error: message to show\n    :param printTrace: If True, appends stack trace to error string\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "error",
                            "type": "str"
                        },
                        {
                            "defaultValue": "",
                            "name": "printTrace",
                            "type": "bool"
                        }
                    ],
                    "functionName": "reportWarning",
                    "returnType": "None",
                    "tooltip": "\n    Report warning to Driver Station, and also prints error to ``sys.stderr``.\n    Optionally appends stack trace to error message.\n\n    :param error: message to show\n    :param printTrace: If True, appends stack trace to error string\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "realTime",
                            "type": "bool"
                        },
                        {
                            "defaultValue": "",
                            "name": "priority",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "functionName": "setCurrentThreadPriority",
                    "returnType": "bool",
                    "tooltip": "Sets the thread priority for the current thread.\n\n:param realTime: Set to true to set a real-time priority, false for standard\n                 priority.\n:param priority: Priority to set the thread to. For real-time, this is 1-99\n                 with 99 being highest. For non-real-time, this is forced to\n                 0. See \"man 7 sched\" for more details.\n\n:returns: True on success."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "seconds",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "functionName": "wait",
                    "returnType": "None",
                    "tooltip": "Pause the task for a specified time.\n\nPause the execution of the program for a specified period of time given in\nseconds. Motors will continue to run at their last assigned values, and\nsensors will continue to update. Only the task containing the wait will pause\nuntil the wait time is expired.\n\n:param seconds: Length of time to pause, in seconds."
                }
            ],
            "moduleName": "wpilib",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpilib.cameraserver",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpilib.counter",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpilib.drive",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpilib.event",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpilib.interfaces",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [
                {
                    "args": [],
                    "functionName": "getProgramStarted",
                    "returnType": "bool",
                    "tooltip": ""
                },
                {
                    "args": [],
                    "functionName": "isTimingPaused",
                    "returnType": "bool",
                    "tooltip": "Check if the simulator time is paused.\n\n:returns: true if paused"
                },
                {
                    "args": [],
                    "functionName": "pauseTiming",
                    "returnType": "None",
                    "tooltip": "Pause the simulator time."
                },
                {
                    "args": [],
                    "functionName": "restartTiming",
                    "returnType": "None",
                    "tooltip": "Restart the simulator time."
                },
                {
                    "args": [],
                    "functionName": "resumeTiming",
                    "returnType": "None",
                    "tooltip": "Resume the simulator time."
                },
                {
                    "args": [],
                    "functionName": "setProgramStarted",
                    "returnType": "None",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "type",
                            "type": "hal._wpiHal.RuntimeType"
                        }
                    ],
                    "functionName": "setRuntimeType",
                    "returnType": "None",
                    "tooltip": "Override the HAL runtime type (simulated/real).\n\n:param type: runtime type"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "delta",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "functionName": "stepTiming",
                    "returnType": "None",
                    "tooltip": "Advance the simulator time and wait for all notifiers to run.\n\n:param delta: the amount to advance (in seconds)"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "delta",
                            "type": "wpimath.units.seconds"
                        }
                    ],
                    "functionName": "stepTimingAsync",
                    "returnType": "None",
                    "tooltip": "Advance the simulator time and return immediately.\n\n:param delta: the amount to advance (in seconds)"
                },
                {
                    "args": [],
                    "functionName": "waitForProgramStart",
                    "returnType": "None",
                    "tooltip": ""
                }
            ],
            "moduleName": "wpilib.simulation",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpilib.sysid",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "angle",
                            "type": "wpimath.units.radians"
                        }
                    ],
                    "functionName": "angleModulus",
                    "returnType": "wpimath.units.radians",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "value",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "deadband",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "1.0",
                            "name": "maxMagnitude",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "functionName": "applyDeadband",
                    "returnType": "float",
                    "tooltip": "Returns 0.0 if the given value is within the specified range around zero. The\nremaining range between the deadband and the maximum magnitude is scaled from\n0.0 to the maximum magnitude.\n\n:param value:        Value to clip.\n:param deadband:     Range around zero.\n:param maxMagnitude: The maximum magnitude of the input (defaults to 1). Can\n                     be infinite.\n\n:returns: The value after the deadband is applied."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "functionName": "floorDiv",
                    "returnType": "int",
                    "tooltip": "Returns the largest (closest to positive infinity)\n``int`` value that is less than or equal to the algebraic quotient.\n\n:param x: the dividend\n:param y: the divisor\n\n:returns: the largest (closest to positive infinity)\n          ``int`` value that is less than or equal to the algebraic quotient."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "x",
                            "type": "typing.SupportsInt"
                        },
                        {
                            "defaultValue": "",
                            "name": "y",
                            "type": "typing.SupportsInt"
                        }
                    ],
                    "functionName": "floorMod",
                    "returnType": "int",
                    "tooltip": "Returns the floor modulus of the ``int`` arguments.\n\nThe floor modulus is ``r = x - (floorDiv(x, y) * y)``,\nhas the same sign as the divisor ``y`` or is zero, and\nis in the range of ``-std::abs(y) < r < +std::abs(y)``.\n\n:param x: the dividend\n:param y: the divisor\n\n:returns: the floor modulus ``x - (floorDiv(x, y) * y)``"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "input",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "minimumInput",
                            "type": "typing.SupportsFloat"
                        },
                        {
                            "defaultValue": "",
                            "name": "maximumInput",
                            "type": "typing.SupportsFloat"
                        }
                    ],
                    "functionName": "inputModulus",
                    "returnType": "float",
                    "tooltip": "Returns modulus of input.\n\n:param input:        Input value to wrap.\n:param minimumInput: The minimum value expected from the input.\n:param maximumInput: The maximum value expected from the input."
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "objectInField",
                            "type": "wpimath.geometry.Pose3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "cameraToObject",
                            "type": "wpimath.geometry.Transform3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "robotToCamera",
                            "type": "wpimath.geometry.Transform3d"
                        }
                    ],
                    "functionName": "objectToRobotPose",
                    "returnType": "wpimath.geometry.Pose3d",
                    "tooltip": ""
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "next",
                            "type": "wpimath.geometry.Translation2d"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVelocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "functionName": "slewRateLimit",
                    "returnType": "wpimath.geometry.Translation2d",
                    "tooltip": "Limits translation velocity.\n\n:param current:     Translation at current timestep.\n:param next:        Translation at next timestep.\n:param dt:          Timestep duration.\n:param maxVelocity: Maximum translation velocity.\n\n:returns: Returns the next Translation2d limited to maxVelocity"
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "current",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "next",
                            "type": "wpimath.geometry.Translation3d"
                        },
                        {
                            "defaultValue": "",
                            "name": "dt",
                            "type": "wpimath.units.seconds"
                        },
                        {
                            "defaultValue": "",
                            "name": "maxVelocity",
                            "type": "wpimath.units.meters_per_second"
                        }
                    ],
                    "functionName": "slewRateLimit",
                    "returnType": "wpimath.geometry.Translation3d",
                    "tooltip": "Limits translation velocity.\n\n:param current:     Translation at current timestep.\n:param next:        Translation at next timestep.\n:param dt:          Timestep duration.\n:param maxVelocity: Maximum translation velocity.\n\n:returns: Returns the next Translation3d limited to maxVelocity"
                }
            ],
            "moduleName": "wpimath",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.controller",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.estimator",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.filter",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rotation",
                            "type": "typing.Annotated[numpy.typing.ArrayLike, numpy.float64, \"[3, 1]\"]"
                        }
                    ],
                    "functionName": "rotationVectorToMatrix",
                    "returnType": "typing.Annotated[numpy.typing.NDArray[numpy.float64], \"[3, 3]\"]",
                    "tooltip": "Applies the hat operator to a rotation vector.\n\nIt takes a rotation vector and returns the corresponding matrix\nrepresentation of the Lie algebra element (a 3x3 rotation matrix).\n\n:param rotation: The rotation vector.\n\n:returns: The rotation vector as a 3x3 rotation matrix."
                }
            ],
            "moduleName": "wpimath.geometry",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.interpolation",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.kinematics",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.optimization",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.path",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.spline",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.system",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.system.plant",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.trajectory",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [],
            "moduleName": "wpimath.trajectory.constraint",
            "moduleVariables": []
        },
        {
            "enums": [],
            "functions": [
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "deg",
                            "type": "degrees"
                        }
                    ],
                    "functionName": "degreesToRotations",
                    "returnType": "float",
                    "tooltip": "Converts given degrees to rotations.\n\n    :param deg: The degrees to convert.\n\n    :returns: rotations Converted from degrees.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "ft",
                            "type": "feet"
                        }
                    ],
                    "functionName": "feetToMeters",
                    "returnType": "meters",
                    "tooltip": "Converts given feet to meters.\n\n    :param ft: The feet to convert to meters.\n\n    :returns: Meters converted from feet.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "i",
                            "type": "inches"
                        }
                    ],
                    "functionName": "inchesToMeters",
                    "returnType": "meters",
                    "tooltip": "Converts given inches to meters.\n\n    :param i: The inches to convert to meters.\n\n    :returns: Meters converted from inches.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "kg",
                            "type": "kilograms"
                        }
                    ],
                    "functionName": "kilogramsToLbs",
                    "returnType": "pounds",
                    "tooltip": "Converts kilograms into lbs (pound-mass).\n\n    :param kg: The kilograms to convert to lbs (pound-mass).\n\n    :returns: Lbs (pound-mass) converted from kilograms.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "lbs",
                            "type": "pounds"
                        }
                    ],
                    "functionName": "lbsToKilograms",
                    "returnType": "kilograms",
                    "tooltip": "Converts lbs (pound-mass) into kilograms.\n\n    :param lbs: The lbs (pound-mass) to convert to kilograms.\n\n    :returns: Kilograms converted from lbs (pound-mass).\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "m",
                            "type": "meters"
                        }
                    ],
                    "functionName": "metersToFeet",
                    "returnType": "feet",
                    "tooltip": "Converts given meters to feet.\n\n    :param m: The meters to convert to feet.\n\n    :returns: Feet converted from meters.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "m",
                            "type": "meters"
                        }
                    ],
                    "functionName": "metersToInches",
                    "returnType": "inches",
                    "tooltip": "Converts given meters to inches.\n\n    :param m: The meters to convert to inches.\n\n    :returns: Inches converted from meters.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "ms",
                            "type": "milliseconds"
                        }
                    ],
                    "functionName": "millisecondsToSeconds",
                    "returnType": "seconds",
                    "tooltip": "Converts given milliseconds to seconds.\n\n    :param ms: The milliseconds to convert to seconds.\n\n    :returns: Seconds converted from milliseconds.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rps",
                            "type": "radians_per_second"
                        }
                    ],
                    "functionName": "radiansPerSecondToRotationsPerMinute",
                    "returnType": "revolutions_per_minute",
                    "tooltip": "Converts radians per second to rotations per minute.\n\n    :param rps: The radians per second to convert to from rotations per minute.\n\n    :returns: Rotations per minute converted from radians per second.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rad",
                            "type": "radians"
                        }
                    ],
                    "functionName": "radiansToRotations",
                    "returnType": "float",
                    "tooltip": "Converts given radians to rotations.\n\n    :param rad: The radians to convert.\n\n    :returns: rotations Converted from radians.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rpm",
                            "type": "revolutions_per_minute"
                        }
                    ],
                    "functionName": "rotationsPerMinuteToRadiansPerSecond",
                    "returnType": "radians_per_second",
                    "tooltip": "Converts rotations per minute to radians per second.\n\n    :param rpm: The rotations per minute to convert to radians per second.\n\n    :returns: Radians per second converted from rotations per minute.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rotations",
                            "type": "float"
                        }
                    ],
                    "functionName": "rotationsToDegrees",
                    "returnType": "degrees",
                    "tooltip": "Converts given rotations to degrees.\n\n    :param rotations: The rotations to convert.\n\n    :returns: degrees Converted from rotations.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "rotations",
                            "type": "float"
                        }
                    ],
                    "functionName": "rotationsToRadians",
                    "returnType": "float",
                    "tooltip": "Converts given rotations to radians.\n\n    :param rotations: The rotations to convert.\n\n    :returns: radians Converted from rotations.\n    "
                },
                {
                    "args": [
                        {
                            "defaultValue": "",
                            "name": "s",
                            "type": "seconds"
                        }
                    ],
                    "functionName": "secondsToMilliseconds",
                    "returnType": "milliseconds",
                    "tooltip": "Converts given seconds to milliseconds.\n\n    :param s: The seconds to convert to milliseconds.\n\n    :returns: Milliseconds converted from seconds.\n    "
                }
            ],
            "moduleName": "wpimath.units",
            "moduleVariables": [
                {
                    "name": "kInchesPerFoot",
                    "tooltip": "",
                    "type": "float",
                    "writable": false
                },
                {
                    "name": "kKilogramsPerLb",
                    "tooltip": "",
                    "type": "float",
                    "writable": false
                },
                {
                    "name": "kMetersPerInch",
                    "tooltip": "",
                    "type": "float",
                    "writable": false
                },
                {
                    "name": "kMillisecondsPerSecond",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                },
                {
                    "name": "kSecondsPerMinute",
                    "tooltip": "",
                    "type": "int",
                    "writable": false
                }
            ]
        }
    ],
    "subclasses": {
        "hal._wpiHal.AddressableLEDData": [
            "wpilib.AddressableLED.LEDData"
        ],
        "hal._wpiHal.SimValue": [
            "hal._wpiHal.SimBoolean",
            "hal._wpiHal.SimDouble",
            "hal._wpiHal.SimEnum",
            "hal._wpiHal.SimInt",
            "hal._wpiHal.SimLong"
        ],
        "ntcore.BooleanArrayPublisher": [
            "ntcore.BooleanArrayEntry"
        ],
        "ntcore.BooleanArraySubscriber": [
            "ntcore.BooleanArrayEntry"
        ],
        "ntcore.BooleanPublisher": [
            "ntcore.BooleanEntry"
        ],
        "ntcore.BooleanSubscriber": [
            "ntcore.BooleanEntry"
        ],
        "ntcore.DoubleArrayPublisher": [
            "ntcore.DoubleArrayEntry"
        ],
        "ntcore.DoubleArraySubscriber": [
            "ntcore.DoubleArrayEntry"
        ],
        "ntcore.DoublePublisher": [
            "ntcore.DoubleEntry"
        ],
        "ntcore.DoubleSubscriber": [
            "ntcore.DoubleEntry"
        ],
        "ntcore.FloatArrayPublisher": [
            "ntcore.FloatArrayEntry"
        ],
        "ntcore.FloatArraySubscriber": [
            "ntcore.FloatArrayEntry"
        ],
        "ntcore.FloatPublisher": [
            "ntcore.FloatEntry"
        ],
        "ntcore.FloatSubscriber": [
            "ntcore.FloatEntry"
        ],
        "ntcore.GenericPublisher": [
            "ntcore.GenericEntry"
        ],
        "ntcore.GenericSubscriber": [
            "ntcore.GenericEntry"
        ],
        "ntcore.IntegerArrayPublisher": [
            "ntcore.IntegerArrayEntry"
        ],
        "ntcore.IntegerArraySubscriber": [
            "ntcore.IntegerArrayEntry"
        ],
        "ntcore.IntegerPublisher": [
            "ntcore.IntegerEntry"
        ],
        "ntcore.IntegerSubscriber": [
            "ntcore.IntegerEntry"
        ],
        "ntcore.NTSendable": [
            "wpilib.ADXL345_I2C",
            "wpilib.Field2d",
            "wpilib.Mechanism2d"
        ],
        "ntcore.NTSendableBuilder": [
            "wpilib.SendableBuilderImpl"
        ],
        "ntcore.Publisher": [
            "ntcore.BooleanArrayPublisher",
            "ntcore.BooleanPublisher",
            "ntcore.DoubleArrayPublisher",
            "ntcore.DoublePublisher",
            "ntcore.FloatArrayPublisher",
            "ntcore.FloatPublisher",
            "ntcore.GenericPublisher",
            "ntcore.IntegerArrayPublisher",
            "ntcore.IntegerPublisher",
            "ntcore.RawPublisher",
            "ntcore.StringArrayPublisher",
            "ntcore.StringPublisher",
            "ntcore.StructArrayPublisher",
            "ntcore.StructPublisher"
        ],
        "ntcore.RawPublisher": [
            "ntcore.RawEntry"
        ],
        "ntcore.RawSubscriber": [
            "ntcore.RawEntry"
        ],
        "ntcore.StringArrayPublisher": [
            "ntcore.StringArrayEntry"
        ],
        "ntcore.StringArraySubscriber": [
            "ntcore.StringArrayEntry"
        ],
        "ntcore.StringPublisher": [
            "ntcore.StringEntry"
        ],
        "ntcore.StringSubscriber": [
            "ntcore.StringEntry"
        ],
        "ntcore.StructArrayPublisher": [
            "ntcore.StructArrayEntry"
        ],
        "ntcore.StructArraySubscriber": [
            "ntcore.StructArrayEntry"
        ],
        "ntcore.StructPublisher": [
            "ntcore.StructEntry"
        ],
        "ntcore.StructSubscriber": [
            "ntcore.StructEntry"
        ],
        "ntcore.Subscriber": [
            "ntcore.BooleanArraySubscriber",
            "ntcore.BooleanSubscriber",
            "ntcore.DoubleArraySubscriber",
            "ntcore.DoubleSubscriber",
            "ntcore.FloatArraySubscriber",
            "ntcore.FloatSubscriber",
            "ntcore.GenericSubscriber",
            "ntcore.IntegerArraySubscriber",
            "ntcore.IntegerSubscriber",
            "ntcore.RawSubscriber",
            "ntcore.StringArraySubscriber",
            "ntcore.StringSubscriber",
            "ntcore.StructArraySubscriber",
            "ntcore.StructSubscriber"
        ],
        "ntcore.Topic": [
            "ntcore.BooleanArrayTopic",
            "ntcore.BooleanTopic",
            "ntcore.DoubleArrayTopic",
            "ntcore.DoubleTopic",
            "ntcore.FloatArrayTopic",
            "ntcore.FloatTopic",
            "ntcore.IntegerArrayTopic",
            "ntcore.IntegerTopic",
            "ntcore.RawTopic",
            "ntcore.StringArrayTopic",
            "ntcore.StringTopic",
            "ntcore.StructArrayTopic",
            "ntcore.StructTopic"
        ],
        "wpilib.IterativeRobotBase": [
            "wpilib.TimedRobot"
        ],
        "wpilib.MechanismObject2d": [
            "wpilib.MechanismLigament2d"
        ],
        "wpilib.MotorSafety": [
            "wpilib.PWMMotorController",
            "wpilib.drive.RobotDriveBase"
        ],
        "wpilib.PWMMotorController": [
            "wpilib.DMC60",
            "wpilib.Jaguar",
            "wpilib.Koors40",
            "wpilib.PWMSparkFlex",
            "wpilib.PWMSparkMax",
            "wpilib.PWMTalonFX",
            "wpilib.PWMTalonSRX",
            "wpilib.PWMVenom",
            "wpilib.PWMVictorSPX",
            "wpilib.SD540",
            "wpilib.Spark",
            "wpilib.SparkMini",
            "wpilib.Talon",
            "wpilib.Victor",
            "wpilib.VictorSP"
        ],
        "wpilib.PneumaticsBase": [
            "wpilib.PneumaticHub",
            "wpilib.PneumaticsControlModule"
        ],
        "wpilib.RobotBase": [
            "wpilib.IterativeRobotBase"
        ],
        "wpilib.SendableChooserBase": [
            "wpilib.SendableChooser"
        ],
        "wpilib.TimedRobot": [
            "wpilib.TimesliceRobot"
        ],
        "wpilib.drive.RobotDriveBase": [
            "wpilib.drive.DifferentialDrive",
            "wpilib.drive.MecanumDrive"
        ],
        "wpilib.event.BooleanEvent": [
            "wpilib.event.NetworkBooleanEvent"
        ],
        "wpilib.interfaces.CounterBase": [
            "wpilib.Encoder"
        ],
        "wpilib.interfaces.GenericHID": [
            "wpilib.Joystick",
            "wpilib.PS4Controller",
            "wpilib.PS5Controller",
            "wpilib.StadiaController",
            "wpilib.XboxController"
        ],
        "wpilib.interfaces.MotorController": [
            "wpilib.MotorControllerGroup",
            "wpilib.PWMMotorController"
        ],
        "wpilib.simulation.GenericHIDSim": [
            "wpilib.simulation.JoystickSim",
            "wpilib.simulation.PS4ControllerSim",
            "wpilib.simulation.PS5ControllerSim",
            "wpilib.simulation.StadiaControllerSim",
            "wpilib.simulation.XboxControllerSim"
        ],
        "wpilib.simulation.LinearSystemSim_1_1_1": [
            "wpilib.simulation.FlywheelSim"
        ],
        "wpilib.simulation.LinearSystemSim_2_1_2": [
            "wpilib.simulation.DCMotorSim",
            "wpilib.simulation.ElevatorSim",
            "wpilib.simulation.SingleJointedArmSim"
        ],
        "wpilib.simulation.PneumaticsBaseSim": [
            "wpilib.simulation.CTREPCMSim",
            "wpilib.simulation.REVPHSim"
        ],
        "wpimath.estimator.DifferentialDrivePoseEstimator3dBase": [
            "wpimath.estimator.DifferentialDrivePoseEstimator3d"
        ],
        "wpimath.estimator.DifferentialDrivePoseEstimatorBase": [
            "wpimath.estimator.DifferentialDrivePoseEstimator"
        ],
        "wpimath.estimator.MecanumDrivePoseEstimator3dBase": [
            "wpimath.estimator.MecanumDrivePoseEstimator3d"
        ],
        "wpimath.estimator.MecanumDrivePoseEstimatorBase": [
            "wpimath.estimator.MecanumDrivePoseEstimator"
        ],
        "wpimath.estimator.SwerveDrive2PoseEstimator3dBase": [
            "wpimath.estimator.SwerveDrive2PoseEstimator3d"
        ],
        "wpimath.estimator.SwerveDrive2PoseEstimatorBase": [
            "wpimath.estimator.SwerveDrive2PoseEstimator"
        ],
        "wpimath.estimator.SwerveDrive3PoseEstimator3dBase": [
            "wpimath.estimator.SwerveDrive3PoseEstimator3d"
        ],
        "wpimath.estimator.SwerveDrive3PoseEstimatorBase": [
            "wpimath.estimator.SwerveDrive3PoseEstimator"
        ],
        "wpimath.estimator.SwerveDrive4PoseEstimator3dBase": [
            "wpimath.estimator.SwerveDrive4PoseEstimator3d"
        ],
        "wpimath.estimator.SwerveDrive4PoseEstimatorBase": [
            "wpimath.estimator.SwerveDrive4PoseEstimator"
        ],
        "wpimath.estimator.SwerveDrive6PoseEstimator3dBase": [
            "wpimath.estimator.SwerveDrive6PoseEstimator3d"
        ],
        "wpimath.estimator.SwerveDrive6PoseEstimatorBase": [
            "wpimath.estimator.SwerveDrive6PoseEstimator"
        ],
        "wpimath.kinematics.DifferentialDriveKinematicsBase": [
            "wpimath.kinematics.DifferentialDriveKinematics"
        ],
        "wpimath.kinematics.DifferentialDriveOdometryBase": [
            "wpimath.kinematics.DifferentialDriveOdometry"
        ],
        "wpimath.kinematics.MecanumDriveKinematicsBase": [
            "wpimath.kinematics.MecanumDriveKinematics"
        ],
        "wpimath.kinematics.MecanumDriveOdometryBase": [
            "wpimath.kinematics.MecanumDriveOdometry"
        ],
        "wpimath.kinematics.SwerveDrive2KinematicsBase": [
            "wpimath.kinematics.SwerveDrive2Kinematics"
        ],
        "wpimath.kinematics.SwerveDrive2OdometryBase": [
            "wpimath.kinematics.SwerveDrive2Odometry"
        ],
        "wpimath.kinematics.SwerveDrive3KinematicsBase": [
            "wpimath.kinematics.SwerveDrive3Kinematics"
        ],
        "wpimath.kinematics.SwerveDrive3OdometryBase": [
            "wpimath.kinematics.SwerveDrive3Odometry"
        ],
        "wpimath.kinematics.SwerveDrive4KinematicsBase": [
            "wpimath.kinematics.SwerveDrive4Kinematics"
        ],
        "wpimath.kinematics.SwerveDrive4OdometryBase": [
            "wpimath.kinematics.SwerveDrive4Odometry"
        ],
        "wpimath.kinematics.SwerveDrive6KinematicsBase": [
            "wpimath.kinematics.SwerveDrive6Kinematics"
        ],
        "wpimath.kinematics.SwerveDrive6OdometryBase": [
            "wpimath.kinematics.SwerveDrive6Odometry"
        ],
        "wpimath.kinematics._kinematics.DifferentialDriveOdometry3dBase": [
            "wpimath.kinematics._kinematics.DifferentialDriveOdometry3d"
        ],
        "wpimath.kinematics._kinematics.MecanumDriveOdometry3dBase": [
            "wpimath.kinematics._kinematics.MecanumDriveOdometry3d"
        ],
        "wpimath.kinematics._kinematics.SwerveDrive2Odometry3dBase": [
            "wpimath.kinematics._kinematics.SwerveDrive2Odometry3d"
        ],
        "wpimath.kinematics._kinematics.SwerveDrive3Odometry3dBase": [
            "wpimath.kinematics._kinematics.SwerveDrive3Odometry3d"
        ],
        "wpimath.kinematics._kinematics.SwerveDrive4Odometry3dBase": [
            "wpimath.kinematics._kinematics.SwerveDrive4Odometry3d"
        ],
        "wpimath.kinematics._kinematics.SwerveDrive6Odometry3dBase": [
            "wpimath.kinematics._kinematics.SwerveDrive6Odometry3d"
        ],
        "wpimath.spline.Spline3": [
            "wpimath.spline.CubicHermiteSpline"
        ],
        "wpimath.spline.Spline5": [
            "wpimath.spline.QuinticHermiteSpline"
        ],
        "wpimath.trajectory.constraint.TrajectoryConstraint": [
            "wpimath.trajectory.constraint.CentripetalAccelerationConstraint",
            "wpimath.trajectory.constraint.DifferentialDriveKinematicsConstraint",
            "wpimath.trajectory.constraint.DifferentialDriveVoltageConstraint",
            "wpimath.trajectory.constraint.EllipticalRegionConstraint",
            "wpimath.trajectory.constraint.MaxVelocityConstraint",
            "wpimath.trajectory.constraint.MecanumDriveKinematicsConstraint",
            "wpimath.trajectory.constraint.RectangularRegionConstraint",
            "wpimath.trajectory.constraint.SwerveDrive2KinematicsConstraint",
            "wpimath.trajectory.constraint.SwerveDrive3KinematicsConstraint",
            "wpimath.trajectory.constraint.SwerveDrive4KinematicsConstraint",
            "wpimath.trajectory.constraint.SwerveDrive6KinematicsConstraint"
        ],
        "wpiutil.Sendable": [
            "ntcore.NTSendable",
            "wpilib.AnalogAccelerometer",
            "wpilib.AnalogEncoder",
            "wpilib.AnalogGyro",
            "wpilib.AnalogInput",
            "wpilib.AnalogPotentiometer",
            "wpilib.Compressor",
            "wpilib.DigitalInput",
            "wpilib.DigitalOutput",
            "wpilib.DoubleSolenoid",
            "wpilib.DutyCycle",
            "wpilib.DutyCycleEncoder",
            "wpilib.Encoder",
            "wpilib.MotorControllerGroup",
            "wpilib.PS4Controller",
            "wpilib.PS5Controller",
            "wpilib.PWM",
            "wpilib.PWMMotorController",
            "wpilib.PowerDistribution",
            "wpilib.SendableChooserBase",
            "wpilib.Servo",
            "wpilib.SharpIR",
            "wpilib.Solenoid",
            "wpilib.StadiaController",
            "wpilib.XboxController",
            "wpilib.counter.Tachometer",
            "wpilib.counter.UpDownCounter",
            "wpilib.drive.DifferentialDrive",
            "wpilib.drive.MecanumDrive",
            "wpimath.controller.BangBangController",
            "wpimath.controller.PIDController",
            "wpimath.controller.ProfiledPIDController",
            "wpimath.controller.ProfiledPIDControllerRadians"
        ],
        "wpiutil.SendableBuilder": [
            "ntcore.NTSendableBuilder"
        ]
    }
}
