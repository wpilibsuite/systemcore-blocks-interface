/**
 * @license
 * Copyright 2025 Porpoiseful LLC
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Exposes translatable strings for use as Blockly.Msg tokens.
 * @author alan@porpoiseful.com (Alan Smith)
 */

import * as Blockly from 'blockly/core';

/**
 * Creates custom translation tokens for Blockly messages.
 * @param t Translation function that takes a key and returns translated string.
 * @return Object containing translated Blockly message tokens.
 */
export function customTokens(t: (key: string) => string): typeof Blockly.Msg {
  return {
    OF_TYPE: t('BLOCKLY.OF_TYPE'),
    WITH: t('BLOCKLY.WITH'),
    WHEN: t('BLOCKLY.WHEN'),
    PARAMETER: t('BLOCKLY.PARAMETER'),
    PARAMETERS_CAN_ONLY_GO_IN_THEIR_METHODS_BLOCK:
      t('BLOCKLY.PARAMETERS_CAN_ONLY_GO_IN_THEIR_METHODS_BLOCK'),
    EVENT_HANDLER_ALREADY_ON_WORKSPACE:
      t('BLOCKLY.EVENT_HANDLER_ALREADY_ON_WORKSPACE'),
    EVENT_HANDLER_ROBOT_EVENT_NOT_FOUND:
      t('BLOCKLY.EVENT_HANDLER_ROBOT_EVENT_NOT_FOUND'),
    EVENT_HANDLER_MECHANISM_EVENT_NOT_FOUND:
      t('BLOCKLY.EVENT_HANDLER_MECHANISM_EVENT_NOT_FOUND'),
    EVENT_HANDLER_MECHANISM_NOT_FOUND:
      t('BLOCKLY.EVENT_HANDLER_MECHANISM_NOT_FOUND'),
    MECHANISMS: t('MECHANISMS'),
    OPMODES: t('OPMODES'),
    COMPONENTS: t('BLOCKLY.COMPONENTS'),
    COMPONENTS_TOOLTIP: t('BLOCKLY.TOOLTIP.COMPONENTS'),
    PRIVATE_COMPONENTS: t('BLOCKLY.PRIVATE_COMPONENTS'),
    PRIVATE_COMPONENTS_TOOLTIP: t('BLOCKLY.TOOLTIP.PRIVATE_COMPONENTS'),
    EVENTS: t('BLOCKLY.EVENTS'),
    EVALUATE_BUT_IGNORE_RESULT: t('BLOCKLY.EVALUATE_BUT_IGNORE_RESULT'),
    EVALUATE_BUT_IGNORE_RESULT_TOOLTIP:
      t('BLOCKLY.TOOLTIP.EVALUATE_BUT_IGNORE_RESULT'),
    NONE: t('BLOCKLY.NONE'),
    NONE_TOOLTIP: t('BLOCKLY.TOOLTIP.NONE'),
    AUTO: t('BLOCKLY.AUTO'),
    TELEOP: t('BLOCKLY.TELEOP'),
    TEST: t('BLOCKLY.TEST'),
    TYPE: t('BLOCKLY.TYPE'),
    ENABLED: t('BLOCKLY.ENABLED'),
    DISPLAY_NAME: t('BLOCKLY.DISPLAY_NAME'),
    DISPLAY_GROUP: t('BLOCKLY.DISPLAY_GROUP'),
    NO_MECHANISM_CONTENTS: t('BLOCKLY.NO_MECHANISM_CONTENTS'),
    OPMODE_TYPE_TOOLTIP: t('BLOCKLY.TOOLTIP.OPMODE_TYPE'),
    OPMODE_ENABLED_TOOLTIP: t('BLOCKLY.TOOLTIP.OPMODE_ENABLED'),
    OPMODE_NAME_TOOLTIP: t('BLOCKLY.TOOLTIP.OPMODE_NAME'),
    OPMODE_GROUP_TOOLTIP: t('BLOCKLY.TOOLTIP.OPMODE_GROUP'),
    CALL: t('BLOCKLY.CALL'),
    ROBOT_LOWER_CASE: t('BLOCKLY.ROBOT_LOWER_CASE'),
    CREATE: t('BLOCKLY.CREATE'),
    FIRE: t('BLOCKLY.FIRE'),
    GET: t('BLOCKLY.GET'),
    GET_MODULE_VARIABLE_TOOLTIP: t('BLOCKLY.TOOLTIP.GET_MODULE_VARIABLE'),
    GET_CLASS_VARIABLE_TOOLTIP: t('BLOCKLY.TOOLTIP.GET_CLASS_VARIABLE'),
    GET_INSTANCE_VARIABLE_TOOLTIP: t('BLOCKLY.TOOLTIP.GET_INSTANCE_VARIABLE'),
    GET_ENUM_VALUE_TOOLTIP: t('BLOCKLY.TOOLTIP.GET_ENUM_VALUE'),
    SET: t('BLOCKLY.SET'),
    TO: t('BLOCKLY.TO'),
    SET_MODULE_VARIABLE_TOOLTIP: t('BLOCKLY.TOOLTIP.SET_MODULE_VARIABLE'),
    SET_CLASS_VARIABLE_TOOLTIP: t('BLOCKLY.TOOLTIP.SET_CLASS_VARIABLE'),
    SET_INSTANCE_VARIABLE_TOOLTIP: t('BLOCKLY.TOOLTIP.SET_INSTANCE_VARIABLE'),
    VAR_KIND_MUST_BE_MODULE_CLASS_OR_INSTANCE: t('BLOCKLY.ERROR.VAR_KIND_MUST_BE_MODULE_CLASS_OR_INSTANCE'),
    MECHANISM_NOT_FOUND_WARNING: t('BLOCKLY.WARNING.MECHANISM_NOT_FOUND'),
    WARNING_CALL_COMPONENT_INSTANCE_METHOD_PRIVATE_COMPONENT: t('BLOCKLY.WARNING.CALL_COMPONENT_INSTANCE_METHOD_PRIVATE_COMPONENT'),
    WARNING_CALL_COMPONENT_INSTANCE_METHOD_MISSING_COMPONENT: t('BLOCKLY.WARNING.CALL_COMPONENT_INSTANCE_METHOD_MISSING_COMPONENT'),
    WARNING_CALL_MECHANISM_COMPONENT_INSTANCE_METHOD_MISSING_MECHANISM: t('BLOCKLY.WARNING.CALL_MECHANISM_COMPONENT_INSTANCE_METHOD_MISSING_MECHANISM'),
    WARNING_CALL_ROBOT_INSTANCE_METHOD_INSIDE_MECHANISM: t('BLOCKLY.WARNING.CALL_ROBOT_INSTANCE_METHOD_INSIDE_MECHANISM'),
    WARNING_CALL_ROBOT_INSTANCE_METHOD_MISSING_METHOD: t('BLOCKLY.WARNING.CALL_ROBOT_INSTANCE_METHOD_MISSING_METHOD'),
    WARNING_CALL_MECHANISM_INSTANCE_METHOD_INSIDE_MECHANISM: t('BLOCKLY.WARNING.CALL_MECHANISM_INSTANCE_METHOD_INSIDE_MECHANISM'),
    WARNING_CALL_MECHANISM_INSTANCE_METHOD_MISSING_METHOD: t('BLOCKLY.WARNING.CALL_MECHANISM_INSTANCE_METHOD_MISSING_METHOD'),
    WARNING_CALL_MECHANISM_INSTANCE_METHOD_MISSING_MECHANISM: t('BLOCKLY.WARNING.CALL_MECHANISM_INSTANCE_METHOD_MISSING_MECHANISM'),
    CALL_BUILTIN_FUNCTION_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_BUILTIN_FUNCTION'),
    CALL_MODULE_FUNCTION_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_MODULE_FUNCTION'),
    CALL_STATIC_METHOD_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_STATIC_METHOD'),
    CALL_CONSTRUCTOR_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_CONSTRUCTOR'),
    CALL_INSTANCE_METHOD_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_INSTANCE_METHOD'),
    CALL_INSTANCE_METHOD_WITHIN_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_INSTANCE_METHOD_WITHIN'),
    FIRE_EVENT_TOOLTIP: t('BLOCKLY.TOOLTIP.FIRE_EVENT'),
    CALL_MECHANISM_COMPONENT_INSTANCE_METHOD_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_MECHANISM_COMPONENT_INSTANCE_METHOD'),
    CALL_COMPONENT_INSTANCE_METHOD_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_COMPONENT_INSTANCE_METHOD'),
    CALL_ROBOT_INSTANCE_METHOD_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_ROBOT_INSTANCE_METHOD'),
    CALL_MECHANISM_INSTANCE_METHOD_TOOLTIP: t('BLOCKLY.TOOLTIP.CALL_MECHANISM_INSTANCE_METHOD'),
    WARNING_EVENT_NOT_IN_HOLDER: t('BLOCKLY.WARNING.EVENT_NOT_IN_HOLDER'),
    WARNING_COMPONENT_NOT_IN_HOLDER: t('BLOCKLY.WARNING.COMPONENT_NOT_IN_HOLDER'),
    WARNING_MECHANISM_NOT_IN_HOLDER: t('BLOCKLY.WARNING.MECHANISM_NOT_IN_HOLDER'),
    MRC_CATEGORY_HARDWARE: t('BLOCKLY.CATEGORY.HARDWARE'),
    MRC_CATEGORY_ROBOT: t('BLOCKLY.CATEGORY.ROBOT'),
    MRC_CATEGORY_COMPONENTS: t('BLOCKLY.CATEGORY.COMPONENTS'),
    MRC_CATEGORY_MECHANISMS: t('BLOCKLY.CATEGORY.MECHANISMS'),
    MRC_CATEGORY_LOGIC: t('BLOCKLY.CATEGORY.LOGIC'),
    MRC_CATEGORY_LOOPS: t('BLOCKLY.CATEGORY.LOOPS'),
    MRC_CATEGORY_LISTS: t('BLOCKLY.CATEGORY.LISTS'),
    MRC_CATEGORY_MATH: t('BLOCKLY.CATEGORY.MATH'),
    MRC_CATEGORY_TEXT: t('BLOCKLY.CATEGORY.TEXT'),
    MRC_CATEGORY_MISC: t('BLOCKLY.CATEGORY.MISC'),
    MRC_CATEGORY_VARIABLES: t('BLOCKLY.CATEGORY.VARIABLES'),
    MRC_CATEGORY_METHODS: t('BLOCKLY.CATEGORY.METHODS'),
    MRC_CATEGORY_EVENTS: t('BLOCKLY.CATEGORY.EVENTS'),
    MRC_CATEGORY_ADD_MECHANISM: t('BLOCKLY.CATEGORY.ADD_MECHANISM'),
    MRC_CATEGORY_ADD_COMPONENT: t('BLOCKLY.CATEGORY.ADD_COMPONENT'),
    MRC_CATEGORY_TEST: t('BLOCKLY.CATEGORY.TEST'),
    MRC_PRINT: t('BLOCKLY.PRINT'),
    CUSTOM_EVENTS_LABEL: t('BLOCKLY.CUSTOM_EVENTS_LABEL'),
    CUSTOM_METHODS_LABEL: t('BLOCKLY.CUSTOM_METHODS_LABEL'),
    MORE_ROBOT_METHODS_LABEL: t('BLOCKLY.MORE_ROBOT_METHODS_LABEL'),
    MORE_MECHANISM_METHODS_LABEL: t('BLOCKLY.MORE_MECHANISM_METHODS_LABEL'),
    MORE_OPMODE_METHODS_LABEL: t('BLOCKLY.MORE_OPMODE_METHODS_LABEL'),
    COMMENT_DEFAULT_TEXT: t('BLOCKLY.COMMENT_DEFAULT_TEXT'),
  }
};

/**
 * Replaces tokens in a string with values from a dictionary.
 * @param template String containing tokens in the format {{token}}
 * @param values Dictionary mapping token names to their replacement values
 * @return String with all tokens replaced by their corresponding values
 */
export function replaceTokens(template: string, values: Record<string, string>): string {
  return template.replace(/\{\{(\w+)\}\}/g, (match, token) => {
    return values[token] !== undefined ? values[token] : match;
  });
}