import * as Blockly from 'blockly/core';
import { M } from 'vitest/dist/chunks/reporters.d.BFLkQcL6.js';

export const customTokens = (t: (key: string) => string): typeof Blockly.Msg => {
  return {
    ADD_COMMENT: t('BLOCKLY.ADD_COMMENT'),
    REMOVE_COMMENT: t('BLOCKLY.REMOVE_COMMENT'),
    DUPLICATE_COMMENT: t('BLOCKLY.DUPLICATE_COMMENT'),
    OF_TYPE: t('BLOCKLY.OF_TYPE'),
    WITH: t('BLOCKLY.WITH'),
    WHEN: t('BLOCKLY.WHEN'),
    PARAMETER: t('BLOCKLY.PARAMETER'),
    PARAMETERS_CAN_ONLY_GO_IN_THEIR_METHODS_BLOCK: t('BLOCKLY.PARAMETERS_CAN_ONLY_GO_IN_THEIR_METHODS_BLOCK'),
    MECHANISMS: t('BLOCKLY.MECHANISMS'),
    COMPONENTS: t('BLOCKLY.COMPONENTS'),
    EVENTS: t('BLOCKLY.EVENTS'),
    EVALUATE_BUT_IGNORE_RESULT: t('BLOCKLY.EVALUATE_BUT_IGNORE_RESULT'),
    EVALUATE_BUT_IGNORE_RESULT_TOOLTIP: t('BLOCKLY.EVALUATE_BUT_IGNORE_RESULT_TOOLTIP'),
    AUTO: t('BLOCKLY.AUTO'),
    TELEOP: t('BLOCKLY.TELEOP'),
    TEST: t('BLOCKLY.TEST'),
    TYPE: t('BLOCKLY.TYPE'),
    ENABLED: t('BLOCKLY.ENABLED'),
    DISPLAY_NAME: t('BLOCKLY.DISPLAY_NAME'),
    DISPLAY_GROUP: t('BLOCKLY.DISPLAY_GROUP'),
    OPMODE_TYPE_TOOLTIP: t('BLOCKLY.TOOLTIP.OPMODE_TYPE_TOOLTIP'),
    OPMODE_ENABLED_TOOLTIP: t('BLOCKLY.TOOLTIP.OPMODE_ENABLED_TOOLTIP'),
    OPMODE_NAME_TOOLTIP: t('BLOCKLY.TOOLTIP.OPMODE_NAME_TOOLTIP'),
    OPMODE_GROUP_TOOLTIP: t('BLOCKLY.TOOLTIP.OPMODE_GROUP_TOOLTIP'),
  };
};