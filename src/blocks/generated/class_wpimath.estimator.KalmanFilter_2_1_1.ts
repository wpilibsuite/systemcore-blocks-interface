// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.estimator.KalmanFilter_2_1_1

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 12 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.estimator.KalmanFilter_2_1_1", "args": [{"name": "plant", "type": "wpimath.system.LinearSystem_2_1_1"}, {"name": "stateStdDevs", "type": "Tuple[float, float]"}, {"name": "measurementStdDevs", "type": "Tuple[float]"}, {"name": "dt", "type": "wpimath.units.seconds"}], "tooltip": "Constructs a Kalman filter with the given plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param plant:              The plant used for the prediction step.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep.\n                           @throws std::invalid_argument If the system is undetectable.", "importModule": "wpimath.estimator"}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystem_2_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTuple"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTuple"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "numpy.ndarray[numpy.float64[2, 2]]", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}], "tooltip": "Returns the error covariance matrix P.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "P"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}, {"name": "i", "type": "int"}, {"name": "j", "type": "int"}], "tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "P"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[1, 1]]"}, {"name": "y", "type": "numpy.ndarray[numpy.float64[1, 1]]"}], "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "correct"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[1, 1]]"}, {"name": "y", "type": "numpy.ndarray[numpy.float64[1, 1]]"}, {"name": "R", "type": "numpy.ndarray[numpy.float64[1, 1]]"}], "tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "correct"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[1, 1]]"}, {"name": "dt", "type": "wpimath.units.seconds"}], "tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "predict"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}], "tooltip": "Resets the observer.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}, {"name": "P", "type": "numpy.ndarray[numpy.float64[2, 2]]"}], "tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "setP"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}, {"name": "xHat", "type": "numpy.ndarray[numpy.float64[2, 1]]"}], "tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "setXhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}, {"name": "i", "type": "int"}, {"name": "value", "type": "float"}], "tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "setXhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "numpy.ndarray[numpy.float64[2, 1]]", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}], "tooltip": "Returns the state estimate x-hat.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "xhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "kalmanFilter_2_1_1", "type": "wpimath.estimator.KalmanFilter_2_1_1"}, {"name": "i", "type": "int"}], "tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.estimator.KalmanFilter_2_1_1", "FUNC": "xhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_1_1"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "KalmanFilter_2_1_1",
    contents: contents,
    className: "wpimath.estimator.KalmanFilter_2_1_1",
  };

  return category;
}
