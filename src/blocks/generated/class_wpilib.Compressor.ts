// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.Compressor

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 13 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCompressor"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Compressor", "args": [{"name": "module", "type": "int"}, {"name": "moduleType", "type": "wpilib.PneumaticsModuleType"}], "tooltip": "Constructs a compressor for a specified module and type.\n\n:param module:     The module ID to use.\n:param moduleType: The module type to use.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor"}, "inputs": {"ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsModuleType"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCompressor"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Compressor", "args": [{"name": "moduleType", "type": "wpilib.PneumaticsModuleType"}], "tooltip": "Constructs a compressor for a default module and specified type.\n\n:param moduleType: The module type to use.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsModuleType"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "compressor", "type": "wpilib.Compressor"}], "tooltip": "Disable the compressor.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "disable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "compressor", "type": "wpilib.Compressor"}, {"name": "minPressure", "type": "wpimath.units.pounds_per_square_inch"}, {"name": "maxPressure", "type": "wpimath.units.pounds_per_square_inch"}], "tooltip": "If supported by the device, enables the compressor in analog mode. This\nmode uses an analog pressure sensor connected to analog channel 0 to cycle\nthe compressor. The compressor will turn on when the pressure drops below\n``minPressure`` and will turn off when the pressure reaches {@code\nmaxPressure}. This mode is only supported by the REV PH with the REV Analog\nPressure Sensor connected to analog channel 0.\n\nOn CTRE PCM, this will enable digital control.\n\n:param minPressure: The minimum pressure. The compressor will turn on when\n                    the pressure drops below this value.\n:param maxPressure: The maximum pressure. The compressor will turn off when\n                    the pressure reaches this value.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "enableAnalog"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "compressor", "type": "wpilib.Compressor"}], "tooltip": "Enables the compressor in digital mode using the digital pressure switch.\nThe compressor will turn on when the pressure switch indicates that the\nsystem is not full, and will turn off when the pressure switch indicates\nthat the system is full.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "enableDigital"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "compressor", "type": "wpilib.Compressor"}, {"name": "minPressure", "type": "wpimath.units.pounds_per_square_inch"}, {"name": "maxPressure", "type": "wpimath.units.pounds_per_square_inch"}], "tooltip": "If supported by the device, enables the compressor in hybrid mode. This\nmode uses both a digital pressure switch and an analog pressure sensor\nconnected to analog channel 0 to cycle the compressor. This mode is only\nsupported by the REV PH with the REV Analog Pressure Sensor connected to\nanalog channel 0.\n\nThe compressor will turn on when \\a both:\n\n- The digital pressure switch indicates the system is not full AND\n- The analog pressure sensor indicates that the pressure in the system\nis below the specified minimum pressure.\n\nThe compressor will turn off when \\a either:\n\n- The digital pressure switch is disconnected or indicates that the system\nis full OR\n- The pressure detected by the analog sensor is greater than the specified\nmaximum pressure.\n\nOn CTRE PCM, this will enable digital control.\n\n:param minPressure: The minimum pressure. The compressor will turn on\n                    when the pressure drops below this value and the pressure switch indicates\n                    that the system is not full.\n:param maxPressure: The maximum pressure. The compressor will turn\n                    off when the pressure reaches this value or the pressure switch is\n                    disconnected or indicates that the system is full.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "enableHybrid"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.volts", "args": [{"name": "compressor", "type": "wpilib.Compressor"}], "tooltip": "If supported by the device, returns the analog input voltage (on channel\n0).\n\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n\n:returns: The analog input voltage, in volts.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "getAnalogVoltage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCompressorConfigType"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpilib.CompressorConfigType", "args": [{"name": "compressor", "type": "wpilib.Compressor"}], "tooltip": "Returns the active compressor configuration.\n\n:returns: The active compressor configuration.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "getConfigType"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.amperes", "args": [{"name": "compressor", "type": "wpilib.Compressor"}], "tooltip": "Get the current drawn by the compressor.\n\n:returns: Current drawn by the compressor.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "getCurrent"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.pounds_per_square_inch", "args": [{"name": "compressor", "type": "wpilib.Compressor"}], "tooltip": "If supported by the device, returns the pressure read by the analog\npressure sensor (on channel 0).\n\nThis function is only supported by the REV PH with the REV Analog Pressure\nSensor. On CTRE PCM, this will return 0.\n\n:returns: The pressure read by the analog pressure sensor.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "getPressure"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "compressor", "type": "wpilib.Compressor"}], "tooltip": "Returns the state of the pressure switch.\n\n:returns: True if pressure switch indicates that the system is not full,\n          otherwise false.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "getPressureSwitchValue"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "compressor", "type": "wpilib.Compressor"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "compressor", "type": "wpilib.Compressor"}], "tooltip": "Returns whether the compressor is active or not.\n\n:returns: true if the compressor is on - otherwise false.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Compressor", "FUNC": "isEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCompressor"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "Compressor",
    contents: contents,
    className: "wpilib.Compressor",
  };

  return category;
}
