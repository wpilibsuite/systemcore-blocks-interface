// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.AnalogTrigger

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 13 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myAnalogTrigger"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.AnalogTrigger", "args": [{"name": "channel", "type": "int"}], "tooltip": "Constructor for an analog trigger given a channel number.\n\n:param channel: The channel number on the roboRIO to represent. 0-3 are\n                on-board 4-7 are on the MXP port.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myAnalogTrigger"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.AnalogTrigger", "args": [{"name": "input", "type": "wpilib.AnalogInput"}], "tooltip": "Construct an analog trigger using an existing analog input.\n\nThis should be used in the case of sharing an analog channel between the\ntrigger and an analog input object.\n\n:param input: A shared_ptr to the existing AnalogInput object", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogInput"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myAnalogTrigger"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.AnalogTrigger", "args": [{"name": "dutyCycle", "type": "wpilib.DutyCycle"}], "tooltip": "Construct an analog trigger using an existing duty cycle input.\n\n:param dutyCycle: A shared_ptr to the existing DutyCycle object", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycle"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myAnalogTriggerOutput"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpilib.AnalogTriggerOutput", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "type", "type": "wpilib.AnalogTriggerType"}], "tooltip": "Creates an AnalogTriggerOutput object.\n\n:param type: An enum of the type of output object to create.\n\n:returns: A pointer to a new AnalogTriggerOutput object.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "createOutput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTriggerType"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}], "tooltip": "Return the InWindow output of the analog trigger.\n\nTrue if the analog input is between the upper and lower limits.\n\n:returns: True if the analog input is between the upper and lower limits.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "getInWindow"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}], "tooltip": "Return the index of the analog trigger.\n\nThis is the FPGA index of this analog trigger instance.\n\n:returns: The index of the analog trigger.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "getIndex"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}], "tooltip": "Return the TriggerState output of the analog trigger.\n\nTrue if above upper limit.\nFalse if below lower limit.\nIf in Hysteresis, maintain previous state.\n\n:returns: True if above upper limit. False if below lower limit. If in\n          Hysteresis, maintain previous state.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "getTriggerState"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "useAveragedValue", "type": "bool"}], "tooltip": "Configure the analog trigger to use the averaged vs. raw values.\n\nIf the value is true, then the averaged value is selected for the analog\ntrigger, otherwise the immediate value is used.\n\n:param useAveragedValue: If true, use the Averaged value, otherwise use the\n                         instantaneous reading", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "setAveraged"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "useFilteredValue", "type": "bool"}], "tooltip": "Configure the analog trigger to use a filtered value.\n\nThe analog trigger will operate with a 3 point average rejection filter.\nThis is designed to help with 360 degree pot applications for the period\nwhere the pot crosses through zero.\n\n:param useFilteredValue: If true, use the 3 point rejection filter,\n                         otherwise use the unfiltered value", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "setFiltered"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "lower", "type": "float"}, {"name": "upper", "type": "float"}], "tooltip": "Set the upper and lower duty cycle limits of the analog trigger.\n\nThe limits are given as floating point values between 0 and 1.\n\n:param lower: The lower limit of the trigger in percentage.\n:param upper: The upper limit of the trigger in percentage.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "setLimitsDutyCycle"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "lower", "type": "int"}, {"name": "upper", "type": "int"}], "tooltip": "Set the upper and lower limits of the analog trigger.\n\nThe limits are given in ADC codes.  If oversampling is used, the units must\nbe scaled appropriately.\n\n:param lower: The lower limit of the trigger in ADC codes (12-bit values).\n:param upper: The upper limit of the trigger in ADC codes (12-bit values).", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "setLimitsRaw"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "lower", "type": "float"}, {"name": "upper", "type": "float"}], "tooltip": "Set the upper and lower limits of the analog trigger.\n\nThe limits are given as floating point voltage values.\n\n:param lower: The lower limit of the trigger in Volts.\n:param upper: The upper limit of the trigger in Volts.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.AnalogTrigger", "FUNC": "setLimitsVoltage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "AnalogTrigger",
    contents: contents,
    className: "wpilib.AnalogTrigger",
  };

  return category;
}
