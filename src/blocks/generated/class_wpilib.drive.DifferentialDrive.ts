// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.drive.DifferentialDrive

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 22 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDrive"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.drive.DifferentialDrive", "args": [{"name": "leftMotor", "type": "wpilib.interfaces.MotorController"}, {"name": "rightMotor", "type": "wpilib.interfaces.MotorController"}], "tooltip": "Construct a DifferentialDrive.\n\nTo pass multiple motors per side, use CAN motor controller followers or\nPWMSpeedController::AddFollower(). If a motor needs to be inverted, do so\nbefore passing it in.\n\n:param leftMotor:  Left motor.\n:param rightMotor: Right motor.", "importModule": "wpilib.drive"}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorController"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorController"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDrive"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.drive.DifferentialDrive", "args": [{"name": "leftMotor", "type": "Callable[[float], None]"}, {"name": "rightMotor", "type": "Callable[[float], None]"}], "tooltip": "Construct a DifferentialDrive.\n\nTo pass multiple motors per side, use CAN motor controller followers or\nPWMSpeedController::AddFollower(). If a motor needs to be inverted, do so\nbefore passing it in.\n\n:param leftMotor:  Left motor setter.\n:param rightMotor: Right motor setter.", "importModule": "wpilib.drive"}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCallable"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCallable"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "differentialDrive", "type": "wpilib.drive.DifferentialDrive"}, {"name": "xSpeed", "type": "float"}, {"name": "zRotation", "type": "float"}, {"name": "squareInputs", "type": "bool"}], "tooltip": "Arcade drive method for differential drive platform.\n\nNote: Some drivers may prefer inverted rotation controls. This can be done\nby negating the value passed for rotation.\n\n:param xSpeed:       The speed at which the robot should drive along the X\n                     axis [-1.0..1.0]. Forward is positive.\n:param zRotation:    The rotation rate of the robot around the Z axis\n                     [-1.0..1.0]. Counterclockwise is positive.\n:param squareInputs: If set, decreases the input sensitivity at low speeds.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "arcadeDrive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrive"}}}}, "ARG3": {"shadow": {"type": "logic_boolean", "fields": {"BOOL": "TRUE"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myWheelSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpilib.drive.DifferentialDrive.WheelSpeeds", "args": [{"name": "xSpeed", "type": "float"}, {"name": "zRotation", "type": "float"}, {"name": "squareInputs", "type": "bool"}], "tooltip": "Arcade drive inverse kinematics for differential drive platform.\n\nNote: Some drivers may prefer inverted rotation controls. This can be done\nby negating the value passed for rotation.\n\n:param xSpeed:       The speed at which the robot should drive along the X\n                     axis [-1.0..1.0]. Forward is positive.\n:param zRotation:    The rotation rate of the robot around the Z axis\n                     [-1.0..1.0]. Clockwise is positive.\n:param squareInputs: If set, decreases the input sensitivity at low speeds.\n\n:returns: Wheel speeds [-1.0..1.0].", "importModule": "wpilib.drive"}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "arcadeDriveIK"}, "inputs": {"ARG2": {"shadow": {"type": "logic_boolean", "fields": {"BOOL": "TRUE"}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib.MotorSafety"}], "tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.MotorSafety", "FUNC": "check"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [], "tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.", "importModule": "wpilib.drive"}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "checkMotors"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "differentialDrive", "type": "wpilib.drive.DifferentialDrive"}, {"name": "xSpeed", "type": "float"}, {"name": "zRotation", "type": "float"}, {"name": "allowTurnInPlace", "type": "bool"}], "tooltip": "Curvature drive method for differential drive platform.\n\nThe rotation argument controls the curvature of the robot's path rather\nthan its rate of heading change. This makes the robot more controllable at\nhigh speeds.\n\n:param xSpeed:           The robot's speed along the X axis [-1.0..1.0].\n                         Forward is positive.\n:param zRotation:        The normalized curvature [-1.0..1.0].\n                         Counterclockwise is positive.\n:param allowTurnInPlace: If set, overrides constant-curvature turning for\n                         turn-in-place maneuvers. zRotation will control\n                         turning rate instead of curvature.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "curvatureDrive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrive"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myWheelSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpilib.drive.DifferentialDrive.WheelSpeeds", "args": [{"name": "xSpeed", "type": "float"}, {"name": "zRotation", "type": "float"}, {"name": "allowTurnInPlace", "type": "bool"}], "tooltip": "Curvature drive inverse kinematics for differential drive platform.\n\nThe rotation argument controls the curvature of the robot's path rather\nthan its rate of heading change. This makes the robot more controllable at\nhigh speeds.\n\n:param xSpeed:           The robot's speed along the X axis [-1.0..1.0].\n                         Forward is positive.\n:param zRotation:        The normalized curvature [-1.0..1.0]. Clockwise is\n                         positive.\n:param allowTurnInPlace: If set, overrides constant-curvature turning for\n                         turn-in-place maneuvers. zRotation will control\n                         turning rate instead of curvature.\n\n:returns: Wheel speeds [-1.0..1.0].", "importModule": "wpilib.drive"}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "curvatureDriveIK"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib.MotorSafety"}], "tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.MotorSafety", "FUNC": "feed"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "robotDriveBase", "type": "wpilib.drive.RobotDriveBase"}], "tooltip": "Feed the motor safety object. Resets the timer that will stop the motors if\nit completes.\n\n@see MotorSafetyHelper::Feed()", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.RobotDriveBase", "FUNC": "feedWatchdog"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRobotDriveBase"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "str", "args": [{"name": "differentialDrive", "type": "wpilib.drive.DifferentialDrive"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "getDescription"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrive"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.seconds", "args": [{"name": "motorSafety", "type": "wpilib.MotorSafety"}], "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.MotorSafety", "FUNC": "getExpiration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "differentialDrive", "type": "wpilib.drive.DifferentialDrive"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrive"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "motorSafety", "type": "wpilib.MotorSafety"}], "tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.MotorSafety", "FUNC": "isAlive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "motorSafety", "type": "wpilib.MotorSafety"}], "tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.MotorSafety", "FUNC": "isSafetyEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "robotDriveBase", "type": "wpilib.drive.RobotDriveBase"}, {"name": "deadband", "type": "float"}], "tooltip": "Sets the deadband applied to the drive inputs (e.g., joystick values).\n\nThe default value is 0.02. Inputs smaller than the deadband are set to 0.0\nwhile inputs larger than the deadband are scaled from 0.0 to 1.0. See\nfrc::ApplyDeadband().\n\n:param deadband: The deadband to set.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.RobotDriveBase", "FUNC": "setDeadband"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRobotDriveBase"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib.MotorSafety"}, {"name": "expirationTime", "type": "wpimath.units.seconds"}], "tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.MotorSafety", "FUNC": "setExpiration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "robotDriveBase", "type": "wpilib.drive.RobotDriveBase"}, {"name": "maxOutput", "type": "float"}], "tooltip": "Configure the scaling factor for using RobotDrive with motor controllers in\na mode other than PercentVbus or to limit the maximum output.\n\n:param maxOutput: Multiplied with the output percentage computed by the\n                  drive functions.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.RobotDriveBase", "FUNC": "setMaxOutput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRobotDriveBase"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib.MotorSafety"}, {"name": "enabled", "type": "bool"}], "tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.MotorSafety", "FUNC": "setSafetyEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "differentialDrive", "type": "wpilib.drive.DifferentialDrive"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "stopMotor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrive"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "differentialDrive", "type": "wpilib.drive.DifferentialDrive"}, {"name": "leftSpeed", "type": "float"}, {"name": "rightSpeed", "type": "float"}, {"name": "squareInputs", "type": "bool"}], "tooltip": "Tank drive method for differential drive platform.\n\n:param leftSpeed:    The robot left side's speed along the X axis\n                     [-1.0..1.0]. Forward is positive.\n:param rightSpeed:   The robot right side's speed along the X axis\n                     [-1.0..1.0]. Forward is positive.\n:param squareInputs: If set, decreases the input sensitivity at low speeds.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "tankDrive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrive"}}}}, "ARG3": {"shadow": {"type": "logic_boolean", "fields": {"BOOL": "TRUE"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myWheelSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpilib.drive.DifferentialDrive.WheelSpeeds", "args": [{"name": "leftSpeed", "type": "float"}, {"name": "rightSpeed", "type": "float"}, {"name": "squareInputs", "type": "bool"}], "tooltip": "Tank drive inverse kinematics for differential drive platform.\n\n:param leftSpeed:    The robot left side's speed along the X axis\n                     [-1.0..1.0]. Forward is positive.\n:param rightSpeed:   The robot right side's speed along the X axis\n                     [-1.0..1.0]. Forward is positive.\n:param squareInputs: If set, decreases the input sensitivity at low speeds.\n\n:returns: Wheel speeds [-1.0..1.0].", "importModule": "wpilib.drive"}, "fields": {"MODULE_OR_CLASS": "wpilib.drive.DifferentialDrive", "FUNC": "tankDriveIK"}, "inputs": {"ARG2": {"shadow": {"type": "logic_boolean", "fields": {"BOOL": "TRUE"}}}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "DifferentialDrive",
    contents: contents,
    className: "wpilib.drive.DifferentialDrive",
  };

  return category;
}
