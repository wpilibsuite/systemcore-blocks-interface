// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.kinematics.MecanumDriveKinematics

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 11 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.kinematics.MecanumDriveKinematics", "args": [{"name": "frontLeftWheel", "type": "wpimath.geometry.Translation2d"}, {"name": "frontRightWheel", "type": "wpimath.geometry.Translation2d"}, {"name": "rearLeftWheel", "type": "wpimath.geometry.Translation2d"}, {"name": "rearRightWheel", "type": "wpimath.geometry.Translation2d"}], "tooltip": "Constructs a mecanum drive kinematics object.\n\n:param frontLeftWheel:  The location of the front-left wheel relative to the\n                        physical center of the robot.\n:param frontRightWheel: The location of the front-right wheel relative to\n                        the physical center of the robot.\n:param rearLeftWheel:   The location of the rear-left wheel relative to the\n                        physical center of the robot.\n:param rearRightWheel:  The location of the rear-right wheel relative to the\n                        physical center of the robot.", "importModule": "wpimath.kinematics"}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTranslation2d"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTranslation2d"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTranslation2d"}}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTranslation2d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTranslation2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Translation2d", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}], "tooltip": "Returns the front-left wheel translation.\n\n:returns: The front-left wheel translation.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "getFrontLeft"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTranslation2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Translation2d", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}], "tooltip": "Returns the front-right wheel translation.\n\n:returns: The front-right wheel translation.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "getFrontRight"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTranslation2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Translation2d", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}], "tooltip": "Returns the rear-left wheel translation.\n\n:returns: The rear-left wheel translation.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "getRearLeft"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTranslation2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Translation2d", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}], "tooltip": "Returns the rear-right wheel translation.\n\n:returns: The rear-right wheel translation.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "getRearRight"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myMecanumDriveWheelPositions"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.kinematics.MecanumDriveWheelPositions", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}, {"name": "start", "type": "wpimath.kinematics.MecanumDriveWheelPositions"}, {"name": "end", "type": "wpimath.kinematics.MecanumDriveWheelPositions"}, {"name": "t", "type": "float"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "interpolate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveWheelPositions"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveWheelPositions"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.kinematics.ChassisSpeeds", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}, {"name": "wheelSpeeds", "type": "wpimath.kinematics.MecanumDriveWheelSpeeds"}], "tooltip": "Performs forward kinematics to return the resulting chassis state from the\ngiven wheel speeds. This method is often used for odometry -- determining\nthe robot's position on the field using data from the real-world speed of\neach wheel on the robot.\n\n:param wheelSpeeds: The current mecanum drive wheel speeds.\n\n:returns: The resulting chassis speed.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "toChassisSpeeds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveWheelSpeeds"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTwist2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Twist2d", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}, {"name": "start", "type": "wpimath.kinematics.MecanumDriveWheelPositions"}, {"name": "end", "type": "wpimath.kinematics.MecanumDriveWheelPositions"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "toTwist2d"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveWheelPositions"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveWheelPositions"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTwist2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Twist2d", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}, {"name": "wheelDeltas", "type": "wpimath.kinematics.MecanumDriveWheelPositions"}], "tooltip": "Performs forward kinematics to return the resulting Twist2d from the\ngiven wheel position deltas. This method is often used for odometry --\ndetermining the robot's position on the field using data from the\ndistance driven by each wheel on the robot.\n\n:param wheelDeltas: The change in distance driven by each wheel.\n\n:returns: The resulting chassis speed.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "toTwist2d"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveWheelPositions"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myMecanumDriveWheelSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.kinematics.MecanumDriveWheelSpeeds", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}, {"name": "chassisSpeeds", "type": "wpimath.kinematics.ChassisSpeeds"}, {"name": "centerOfRotation", "type": "wpimath.geometry.Translation2d"}], "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\nThis function also supports variable centers of rotation. During normal\noperations, the center of rotation is usually the same as the physical\ncenter of the robot; therefore, the argument is defaulted to that use case.\nHowever, if you wish to change the center of rotation for evasive\nmaneuvers, vision alignment, or for any other use case, you can do so.\n\n:param chassisSpeeds:    The desired chassis speed.\n:param centerOfRotation: The center of rotation. For example, if you set the\n                         center of rotation at one corner of the robot and\n                         provide a chassis speed that only has a dtheta\n                         component, the robot will rotate around that\n                         corner.\n\n:returns: The wheel speeds. Use caution because they are not normalized.\n          Sometimes, a user input may cause one of the wheel speeds to go\n          above the attainable max velocity. Use the\n          :meth:`MecanumDriveWheelSpeeds.normalize` method to rectify\n          this issue. In addition, you can use Python unpacking syntax\n          to directly assign the wheel speeds to variables::\n\n            fl, fr, bl, br = kinematics.toWheelSpeeds(chassisSpeeds)", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "toWheelSpeeds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTranslation2d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myMecanumDriveWheelSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.kinematics.MecanumDriveWheelSpeeds", "args": [{"name": "mecanumDriveKinematics", "type": "wpimath.kinematics.MecanumDriveKinematics"}, {"name": "chassisSpeeds", "type": "wpimath.kinematics.ChassisSpeeds"}], "tooltip": "Performs inverse kinematics to return the wheel speeds from a desired\nchassis velocity. This method is often used to convert joystick values into\nwheel speeds.\n\nThis function also supports variable centers of rotation. During normal\noperations, the center of rotation is usually the same as the physical\ncenter of the robot; therefore, the argument is defaulted to that use case.\nHowever, if you wish to change the center of rotation for evasive\nmaneuvers, vision alignment, or for any other use case, you can do so.\n\n:param chassisSpeeds:    The desired chassis speed.\n:param centerOfRotation: The center of rotation. For example, if you set the\n                         center of rotation at one corner of the robot and\n                         provide a chassis speed that only has a dtheta\n                         component, the robot will rotate around that\n                         corner.\n\n:returns: The wheel speeds. Use caution because they are not normalized.\n          Sometimes, a user input may cause one of the wheel speeds to go\n          above the attainable max velocity. Use the\n          :meth:`MecanumDriveWheelSpeeds.normalize` method to rectify\n          this issue. In addition, you can use Python unpacking syntax\n          to directly assign the wheel speeds to variables::\n\n            fl, fr, bl, br = kinematics.toWheelSpeeds(chassisSpeeds)", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.kinematics.MecanumDriveKinematics", "FUNC": "toWheelSpeeds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "MecanumDriveKinematics",
    contents: contents,
    className: "wpimath.kinematics.MecanumDriveKinematics",
  };

  return category;
}
