// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.trajectory.ExponentialProfileMeterVolts

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 5 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myExponentialProfileMeterVolts"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts", "args": [{"name": "constraints", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.Constraints"}], "tooltip": "Constructs a ExponentialProfile.\n\n:param constraints: The constraints on the profile, like maximum input.", "importModule": "wpimath.trajectory"}, "fields": {"MODULE_OR_CLASS": "wpimath.trajectory.ExponentialProfileMeterVolts"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myConstraints"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myState"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.State", "args": [{"name": "exponentialProfileMeterVolts", "type": "wpimath.trajectory.ExponentialProfileMeterVolts"}, {"name": "t", "type": "wpimath.units.seconds"}, {"name": "current", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"}, {"name": "goal", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"}], "tooltip": "Calculates the position and velocity for the profile at a time t where the\ncurrent state is at time t = 0.\n\n:param t:       How long to advance from the current state toward the desired\n                state.\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The position and velocity of the profile at time t.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.trajectory.ExponentialProfileMeterVolts", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myExponentialProfileMeterVolts"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myState"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.State", "args": [{"name": "exponentialProfileMeterVolts", "type": "wpimath.trajectory.ExponentialProfileMeterVolts"}, {"name": "current", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"}, {"name": "goal", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"}], "tooltip": "Calculates the point after which the fastest way to reach the goal state is\nto apply input in the opposite direction.\n\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The position and velocity of the profile at the inflection point.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.trajectory.ExponentialProfileMeterVolts", "FUNC": "calculateInflectionPoint"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myExponentialProfileMeterVolts"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myProfileTiming"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.trajectory.ExponentialProfileMeterVolts.ProfileTiming", "args": [{"name": "exponentialProfileMeterVolts", "type": "wpimath.trajectory.ExponentialProfileMeterVolts"}, {"name": "current", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"}, {"name": "goal", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"}], "tooltip": "Calculates the time it will take for this profile to reach the inflection\npoint, and the time it will take for this profile to reach the goal state.\n\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The timing information for this profile.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.trajectory.ExponentialProfileMeterVolts", "FUNC": "calculateProfileTiming"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myExponentialProfileMeterVolts"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.seconds", "args": [{"name": "exponentialProfileMeterVolts", "type": "wpimath.trajectory.ExponentialProfileMeterVolts"}, {"name": "current", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"}, {"name": "goal", "type": "wpimath.trajectory.ExponentialProfileMeterVolts.State"}], "tooltip": "Calculates the time it will take for this profile to reach the goal state.\n\n:param current: The current state.\n:param goal:    The desired state when the profile is complete.\n\n:returns: The total duration of this profile.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.trajectory.ExponentialProfileMeterVolts", "FUNC": "timeLeftUntil"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myExponentialProfileMeterVolts"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "ExponentialProfileMeterVolts",
    contents: contents,
    className: "wpimath.trajectory.ExponentialProfileMeterVolts",
  };

  return category;
}
