// This file was generated. Do not edit!

import * as pythonEnum from "../mrc_get_python_enum_value";
import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.SPI

export function initialize() {
  pythonEnum.initializeEnum("wpilib.SPI.Mode", ["kMode0", "kMode1", "kMode2", "kMode3"], "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge.");
  pythonEnum.initializeEnum("wpilib.SPI.Port", ["kMXP", "kOnboardCS0", "kOnboardCS1", "kOnboardCS2", "kOnboardCS3"], "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port.");
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 41 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "mySPI"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.SPI", "args": [{"name": "port", "type": "wpilib.SPI.Port"}], "tooltip": "Constructor\n\n:param port: the physical SPI port", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPort"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "port", "type": "hal.SPIPort"}, {"name": "csToSclkTicks", "type": "int"}, {"name": "stallTicks", "type": "int"}, {"name": "pow2BytesPerRead", "type": "int"}], "tooltip": "Configure the Auto SPI Stall time between reads.\n\n:param port:             The number of the port to use. 0-3 for Onboard CS0-CS2, 4 for\n                         MXP.\n:param csToSclkTicks:    the number of ticks to wait before asserting the cs\n                         pin\n:param stallTicks:       the number of ticks to stall for\n:param pow2BytesPerRead: the number of bytes to read before stalling", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "configureAutoStall"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPIPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Force the engine to make a single transfer.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "forceAutoRead"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Frees the accumulator.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "freeAccumulator"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Frees the automatic SPI transfer engine.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "freeAuto"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Read the average of the accumulated value.\n\n:returns: The accumulated average value (value / count).", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getAccumulatorAverage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Read the number of accumulated values.\n\nRead the count of the accumulated values since the accumulator was last\nReset().\n\n:returns: The number of times samples from the channel were accumulated.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getAccumulatorCount"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Read the average of the integrated value.  This is the sum of (each value\ntimes the time between values), divided by the count.\n\n:returns: The average of the integrated value accumulated since the last\n          Reset().", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getAccumulatorIntegratedAverage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Read the integrated value.  This is the sum of (each value * time between\nvalues).\n\n:returns: The integrated value accumulated since the last Reset().", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getAccumulatorIntegratedValue"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Read the last value read by the accumulator engine.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getAccumulatorLastValue"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTuple"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "tuple[int, int]", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Read the accumulated value and the number of accumulated values atomically.\n\nThis function reads the value and count atomically.\nThis can be used for averaging.\n\n:param value: Pointer to the 64-bit accumulated output.\n:param count: Pointer to the number of accumulation cycles.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getAccumulatorOutput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Read the accumulated value.\n\n:returns: The 64-bit value accumulated since the last Reset().", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getAccumulatorValue"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Get the number of bytes dropped by the automatic SPI transfer engine due\nto the receive buffer being full.\n\n:returns: Number of bytes dropped", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getAutoDroppedCount"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPort"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpilib.SPI.Port", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Returns the SPI port.\n\n:returns: The SPI port.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "getPort"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "period", "type": "wpimath.units.seconds"}, {"name": "cmd", "type": "int"}, {"name": "xferSize", "type": "int"}, {"name": "validMask", "type": "int"}, {"name": "validValue", "type": "int"}, {"name": "dataShift", "type": "int"}, {"name": "dataSize", "type": "int"}, {"name": "isSigned", "type": "bool"}, {"name": "bigEndian", "type": "bool"}], "tooltip": "Initialize the accumulator.\n\n:param period:     Time between reads\n:param cmd:        SPI command to send to request data\n:param xferSize:   SPI transfer size, in bytes\n:param validMask:  Mask to apply to received data for validity checking\n:param validValue: After valid_mask is applied, required matching value for\n                   validity checking\n:param dataShift:  Bit shift to apply to received data to get actual data\n                   value\n:param dataSize:   Size (in bits) of data field\n:param isSigned:   Is data field signed?\n:param bigEndian:  Is device big endian?", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "initAccumulator"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "bufferSize", "type": "int"}], "tooltip": "Initialize automatic SPI transfer engine.\n\nOnly a single engine is available, and use of it blocks use of all other\nchip select usage on the same physical SPI port while it is running.\n\n:param bufferSize: buffer size in bytes", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "initAuto"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "initiate", "type": "bool"}, {"name": "dataReceived", "type": "Buffer"}], "tooltip": "Read a word from the receive FIFO.\n\nWaits for the current transfer to complete if the receive FIFO is empty.\n\nIf the receive FIFO is empty, there is no active transfer, and initiate\nis false, errors.\n\n:param initiate:     If true, this function pushes \"0\" into the transmit\n                     buffer and initiates a transfer. If false, this\n                     function assumes that data is already in the receive\n                     FIFO from a previous write.\n:param dataReceived: Buffer to receive data from the device\n:param size:         The length of the transaction, in bytes", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "read"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "buffer", "type": "Buffer"}, {"name": "timeout", "type": "wpimath.units.seconds"}], "tooltip": "Read data that has been transferred by the automatic SPI transfer engine.\n\nTransfers may be made a byte at a time, so it's necessary for the caller\nto handle cases where an entire transfer has not been completed.\n\nEach received data sequence consists of a timestamp followed by the\nreceived data bytes, one byte per word (in the least significant byte).\nThe length of each received data sequence is the same as the combined\nsize of the data and zeroSize set in SetAutoTransmitData().\n\nBlocks until numToRead words have been read or timeout expires.\nMay be called with numToRead=0 to retrieve how many words are available.\n\n:param buffer:    buffer where read words are stored\n:param numToRead: number of words to read\n:param timeout:   timeout (ms resolution)\n\n:returns: Number of words remaining to be read", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "readAutoReceivedData"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Resets the accumulator to zero.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "resetAccumulator"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "center", "type": "int"}], "tooltip": "Set the center value of the accumulator.\n\nThe center value is subtracted from each value before it is added to the\naccumulator. This is used for the center value of devices like gyros and\naccelerometers to make integration work and to take the device offset into\naccount when integrating.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "setAccumulatorCenter"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "deadband", "type": "int"}], "tooltip": "Set the accumulator's deadband.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "setAccumulatorDeadband"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "center", "type": "float"}], "tooltip": "Set the center value of the accumulator integrator.\n\nThe center value is subtracted from each value*dt before it is added to the\nintegrated value. This is used for the center value of devices like gyros\nand accelerometers to take the device offset into account when integrating.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "setAccumulatorIntegratedCenter"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "dataToSend", "type": "Buffer"}, {"name": "zeroSize", "type": "int"}], "tooltip": "Set the data to be transmitted by the engine.\n\nUp to 16 bytes are configurable, and may be followed by up to 127 zero\nbytes.\n\n:param dataToSend: data to send (maximum 16 bytes)\n:param zeroSize:   number of zeros to send after the data", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "setAutoTransmitData"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Configure the chip select line to be active high.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "setChipSelectActiveHigh"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Configure the chip select line to be active low.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "setChipSelectActiveLow"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "hz", "type": "int"}], "tooltip": "Configure the rate of the generated clock signal.\n\nThe default value is 500,000Hz.\nThe maximum value is 4,000,000Hz.\n\n:param hz: The clock rate in Hertz.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "setClockRate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "mode", "type": "wpilib.SPI.Mode"}], "tooltip": "Sets the mode for the SPI device.\n\nMode 0 is Clock idle low, data sampled on rising edge\n\nMode 1 is Clock idle low, data sampled on falling edge\n\nMode 2 is Clock idle high, data sampled on falling edge\n\nMode 3 is Clock idle high, data sampled on rising edge\n\n:param mode: The mode to set.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "setMode"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMode"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "period", "type": "wpimath.units.seconds"}], "tooltip": "Start running the automatic SPI transfer engine at a periodic rate.\n\nInitAuto() and SetAutoTransmitData() must be called before calling this\nfunction.\n\n:param period: period between transfers (us resolution)", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "startAutoRate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "source", "type": "wpilib.DigitalSource"}, {"name": "rising", "type": "bool"}, {"name": "falling", "type": "bool"}], "tooltip": "Start running the automatic SPI transfer engine when a trigger occurs.\n\nInitAuto() and SetAutoTransmitData() must be called before calling this\nfunction.\n\n:param source:  digital source for the trigger (may be an analog trigger)\n:param rising:  trigger on the rising edge\n:param falling: trigger on the falling edge", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "startAutoTrigger"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "sPI", "type": "wpilib.SPI"}], "tooltip": "Stop running the automatic SPI transfer engine.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "stopAuto"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "dataToSend", "type": "Buffer"}, {"name": "dataReceived", "type": "Buffer"}], "tooltip": "Perform a simultaneous read/write transaction with the device\n\n:param dataToSend:   The data to be written out to the device\n:param dataReceived: Buffer to receive data from the device\n:param size:         The length of the transaction, in bytes", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "transaction"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "sPI", "type": "wpilib.SPI"}, {"name": "data", "type": "Buffer"}], "tooltip": "Write data to the peripheral device.  Blocks until there is space in the\noutput FIFO.\n\nIf not running in output only mode, also saves the data received\non the CIPO input during the transfer into the receive FIFO.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SPI", "FUNC": "write"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySPI"}}}}}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Mode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Mode", "ENUM_VALUE": "kMode0"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Mode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Mode", "ENUM_VALUE": "kMode1"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Mode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Mode", "ENUM_VALUE": "kMode2"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Mode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Mode", "ENUM_VALUE": "kMode3"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Port", "ENUM_VALUE": "kMXP"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Port", "ENUM_VALUE": "kOnboardCS0"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Port", "ENUM_VALUE": "kOnboardCS1"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Port", "ENUM_VALUE": "kOnboardCS2"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SPI.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SPI.Port", "ENUM_VALUE": "kOnboardCS3"}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "SPI",
    contents: contents,
    className: "wpilib.SPI",
  };

  return category;
}
