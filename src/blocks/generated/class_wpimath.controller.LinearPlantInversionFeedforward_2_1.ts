// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.controller.LinearPlantInversionFeedforward_2_1

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 9 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "args": [{"name": "A", "type": "numpy.ndarray[numpy.float64[2, 2]]"}, {"name": "B", "type": "numpy.ndarray[numpy.float64[2, 1]]"}, {"name": "dt", "type": "wpimath.units.seconds"}], "tooltip": "Constructs a feedforward with the given coefficients.\n\n:param A:  Continuous system matrix of the plant being controlled.\n:param B:  Continuous input matrix of the plant being controlled.\n:param dt: Discretization timestep.", "importModule": "wpimath.controller"}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "numpy.ndarray[numpy.float64[2, 1]]", "args": [{"name": "linearPlantInversionFeedforward_2_1", "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}], "tooltip": "Returns the current reference vector r.\n\n:returns: The current reference vector.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "FUNC": "R"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "linearPlantInversionFeedforward_2_1", "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}, {"name": "i", "type": "int"}], "tooltip": "Returns an element of the reference vector r.\n\n:param i: Row of r.\n\n:returns: The row of the current reference vector.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "FUNC": "R"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "numpy.ndarray[numpy.float64[1, 1]]", "args": [{"name": "linearPlantInversionFeedforward_2_1", "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}, {"name": "nextR", "type": "numpy.ndarray[numpy.float64[2, 1]]"}], "tooltip": "Calculate the feedforward with only the desired\nfuture reference. This uses the internally stored \"current\"\nreference.\n\nIf this method is used the initial state of the system is the one set using\nReset(const StateVector&). If the initial state is not\nset it defaults to a zero vector.\n\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "numpy.ndarray[numpy.float64[1, 1]]", "args": [{"name": "linearPlantInversionFeedforward_2_1", "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}, {"name": "r", "type": "numpy.ndarray[numpy.float64[2, 1]]"}, {"name": "nextR", "type": "numpy.ndarray[numpy.float64[2, 1]]"}], "tooltip": "Calculate the feedforward with current and future reference vectors.\n\n:param r:     The reference state of the current timestep (k).\n:param nextR: The reference state of the future timestep (k + dt).\n\n:returns: The calculated feedforward.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "linearPlantInversionFeedforward_2_1", "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}, {"name": "initialState", "type": "numpy.ndarray[numpy.float64[2, 1]]"}], "tooltip": "Resets the feedforward with a specified initial state vector.\n\n:param initialState: The initial state vector.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "linearPlantInversionFeedforward_2_1", "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}], "tooltip": "Resets the feedforward with a zero initial state vector.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "numpy.ndarray[numpy.float64[1, 1]]", "args": [{"name": "linearPlantInversionFeedforward_2_1", "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}], "tooltip": "Returns the previously calculated feedforward as an input vector.\n\n:returns: The calculated feedforward.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "FUNC": "uff"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "linearPlantInversionFeedforward_2_1", "type": "wpimath.controller.LinearPlantInversionFeedforward_2_1"}, {"name": "i", "type": "int"}], "tooltip": "Returns an element of the previously calculated feedforward.\n\n:param i: Row of uff.\n\n:returns: The row of the calculated feedforward.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.LinearPlantInversionFeedforward_2_1", "FUNC": "uff"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_2_1"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "LinearPlantInversionFeedforward_2_1",
    contents: contents,
    className: "wpimath.controller.LinearPlantInversionFeedforward_2_1",
  };

  return category;
}
