// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.DutyCycleEncoder

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 16 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.DutyCycleEncoder", "args": [{"name": "channel", "type": "int"}], "tooltip": "Construct a new DutyCycleEncoder on a specific channel.\n\nThis has a fullRange of 1 and an expectedZero of 0.\n\n:param channel: the channel to attach to", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.DutyCycleEncoder", "args": [{"name": "dutyCycle", "type": "wpilib.DutyCycle"}], "tooltip": "Construct a new DutyCycleEncoder attached to an existing DutyCycle object.\n\nThis has a fullRange of 1 and an expectedZero of 0.\n\n:param dutyCycle: the duty cycle to attach to", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycle"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.DutyCycleEncoder", "args": [{"name": "digitalSource", "type": "wpilib.DigitalSource"}], "tooltip": "Construct a new DutyCycleEncoder attached to a DigitalSource object.\n\nThis has a fullRange of 1 and an expectedZero of 0.\n\n:param digitalSource: the digital source to attach to", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.DutyCycleEncoder", "args": [{"name": "channel", "type": "int"}, {"name": "fullRange", "type": "float"}, {"name": "expectedZero", "type": "float"}], "tooltip": "Construct a new DutyCycleEncoder on a specific channel.\n\n:param channel:      the channel to attach to\n:param fullRange:    the value to report at maximum travel\n:param expectedZero: the reading where you would expect a 0 from get()", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.DutyCycleEncoder", "args": [{"name": "dutyCycle", "type": "wpilib.DutyCycle"}, {"name": "fullRange", "type": "float"}, {"name": "expectedZero", "type": "float"}], "tooltip": "Construct a new DutyCycleEncoder attached to an existing DutyCycle object.\n\n:param dutyCycle:    the duty cycle to attach to\n:param fullRange:    the value to report at maximum travel\n:param expectedZero: the reading where you would expect a 0 from get()", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycle"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.DutyCycleEncoder", "args": [{"name": "digitalSource", "type": "wpilib.DigitalSource"}, {"name": "fullRange", "type": "float"}, {"name": "expectedZero", "type": "float"}], "tooltip": "Construct a new DutyCycleEncoder attached to a DigitalSource object.\n\n:param digitalSource: the digital source to attach to\n:param fullRange:     the value to report at maximum travel\n:param expectedZero:  the reading where you would expect a 0 from get()", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}], "tooltip": "Get the encoder value.\n\n:returns: the encoder value scaled by the full range input", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "get"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}], "tooltip": "Get the FPGA index for the DutyCycleEncoder.\n\n:returns: the FPGA index", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getFPGAIndex"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}], "tooltip": "Get the frequency in Hz of the duty cycle signal from the encoder.\n\n:returns: duty cycle frequency in Hz", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getFrequency"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}], "tooltip": "Get the channel of the source.\n\n:returns: the source channel", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getSourceChannel"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}], "tooltip": "Get if the sensor is connected\n\nThis uses the duty cycle frequency to determine if the sensor is connected.\nBy default, a value of 100 Hz is used as the threshold, and this value can\nbe changed with SetConnectedFrequencyThreshold.\n\n:returns: true if the sensor is connected", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "isConnected"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}, {"name": "frequency", "type": "wpimath.units.hertz"}], "tooltip": "Sets the assumed frequency of the connected device.\n\nBy default, the DutyCycle engine has to compute the frequency of the\ninput signal. This can result in both delayed readings and jumpy readings.\nTo solve this, you can pass the expected frequency of the sensor to this\nfunction. This will use that frequency to compute the DutyCycle percentage,\nrather than the computed frequency.\n\n:param frequency: the assumed frequency of the sensor", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "setAssumedFrequency"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}, {"name": "frequency", "type": "int"}], "tooltip": "Change the frequency threshold for detecting connection used by\nIsConnected.\n\n:param frequency: the minimum frequency in Hz.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "setConnectedFrequencyThreshold"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}, {"name": "min", "type": "float"}, {"name": "max", "type": "float"}], "tooltip": "Set the encoder duty cycle range. As the encoder needs to maintain a duty\ncycle, the duty cycle cannot go all the way to 0% or all the way to 100%.\nFor example, an encoder with a 4096 us period might have a minimum duty\ncycle of 1 us / 4096 us and a maximum duty cycle of 4095 / 4096 us. Setting\nthe range will result in an encoder duty cycle less than or equal to the\nminimum being output as 0 rotation, the duty cycle greater than or equal to\nthe maximum being output as 1 rotation, and values in between linearly\nscaled from 0 to 1.\n\n:param min: minimum duty cycle (0-1 range)\n:param max: maximum duty cycle (0-1 range)", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "setDutyCycleRange"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib.DutyCycleEncoder"}, {"name": "inverted", "type": "bool"}], "tooltip": "Set if this encoder is inverted.\n\n:param inverted: true to invert the encoder, false otherwise", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DutyCycleEncoder", "FUNC": "setInverted"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "DutyCycleEncoder",
    contents: contents,
    className: "wpilib.DutyCycleEncoder",
  };

  return category;
}
