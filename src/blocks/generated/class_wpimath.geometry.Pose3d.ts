// This file was generated. Do not edit!

import * as getPythonVariable from "../mrc_get_python_variable";
import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.geometry.Pose3d

export function initialize() {
  getPythonVariable.initializeInstanceVariableGetter("wpimath.geometry.Pose3d", "wpimath.units.meters", ["x", "y", "z"], ["", "", ""]);
  getPythonVariable.initializeInstanceVariableGetter("wpimath.geometry.Pose3d", "wpimath.units.feet", ["x_feet", "y_feet", "z_feet"], ["", "", ""]);
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 24 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "mrc_get_python_variable", "extraState": {"varKind": "instance", "moduleOrClassName": "wpimath.geometry.Pose3d", "varType": "wpimath.units.meters", "importModule": "", "selfLabel": "pose3d", "selfType": "wpimath.geometry.Pose3d"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "VAR": "x"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "mrc_get_python_variable", "extraState": {"varKind": "instance", "moduleOrClassName": "wpimath.geometry.Pose3d", "varType": "wpimath.units.meters", "importModule": "", "selfLabel": "pose3d", "selfType": "wpimath.geometry.Pose3d"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "VAR": "y"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "mrc_get_python_variable", "extraState": {"varKind": "instance", "moduleOrClassName": "wpimath.geometry.Pose3d", "varType": "wpimath.units.meters", "importModule": "", "selfLabel": "pose3d", "selfType": "wpimath.geometry.Pose3d"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "VAR": "z"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "mrc_get_python_variable", "extraState": {"varKind": "instance", "moduleOrClassName": "wpimath.geometry.Pose3d", "varType": "wpimath.units.feet", "importModule": "", "selfLabel": "pose3d", "selfType": "wpimath.geometry.Pose3d"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "VAR": "x_feet"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "mrc_get_python_variable", "extraState": {"varKind": "instance", "moduleOrClassName": "wpimath.geometry.Pose3d", "varType": "wpimath.units.feet", "importModule": "", "selfLabel": "pose3d", "selfType": "wpimath.geometry.Pose3d"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "VAR": "y_feet"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "mrc_get_python_variable", "extraState": {"varKind": "instance", "moduleOrClassName": "wpimath.geometry.Pose3d", "varType": "wpimath.units.feet", "importModule": "", "selfLabel": "pose3d", "selfType": "wpimath.geometry.Pose3d"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "VAR": "z_feet"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.geometry.Pose3d", "args": [], "tooltip": "Constructs a pose at the origin facing toward the positive X axis.", "importModule": "wpimath.geometry"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "translation", "type": "wpimath.geometry.Translation3d"}, {"name": "rotation", "type": "wpimath.geometry.Rotation3d"}], "tooltip": "Constructs a pose with the specified translation and rotation.\n\n:param translation: The translational component of the pose.\n:param rotation:    The rotational component of the pose.", "importModule": "wpimath.geometry"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTranslation3d"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "x", "type": "wpimath.units.meters"}, {"name": "y", "type": "wpimath.units.meters"}, {"name": "z", "type": "wpimath.units.meters"}, {"name": "rotation", "type": "wpimath.geometry.Rotation3d"}], "tooltip": "Constructs a pose with x, y, and z translations instead of a separate\nTranslation3d.\n\n:param x:        The x component of the translational component of the pose.\n:param y:        The y component of the translational component of the pose.\n:param z:        The z component of the translational component of the pose.\n:param rotation: The rotational component of the pose.", "importModule": "wpimath.geometry"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d"}, "inputs": {"ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "pose", "type": "wpimath.geometry.Pose2d"}], "tooltip": "Constructs a 3D pose from a 2D pose in the X-Y plane.\n\n:param pose: The 2D pose.\n             @see Rotation3d(Rotation2d)\n             @see Translation3d(Translation2d)", "importModule": "wpimath.geometry"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose2d"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.meters", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns the X component of the pose's translation.\n\n:returns: The x component of the pose's translation.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "X"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.meters", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns the Y component of the pose's translation.\n\n:returns: The y component of the pose's translation.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "Y"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.meters", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns the Z component of the pose's translation.\n\n:returns: The z component of the pose's translation.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "Z"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}, {"name": "twist", "type": "wpimath.geometry.Twist3d"}], "tooltip": "Obtain a new Pose3d from a (constant curvature) velocity.\n\nThe twist is a change in pose in the robot's coordinate frame since the\nprevious pose update. When the user runs exp() on the previous known\nfield-relative pose with the argument being the twist, the user will\nreceive the new field-relative pose.\n\n\"Exp\" represents the pose exponential, which is solving a differential\nequation moving the pose forward in time.\n\n:param twist: The change in pose in the robot's coordinate frame since the\n              previous pose update. For example, if a non-holonomic robot moves forward\n              0.01 meters and changes angle by 0.5 degrees since the previous pose\n              update, the twist would be Twist3d{0.01_m, 0_m, 0_m, Rotation3d{0.0, 0.0,\n              0.5_deg}}.\n\n:returns: The new pose of the robot.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "exp"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTwist3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "x", "type": "wpimath.units.feet"}, {"name": "y", "type": "wpimath.units.feet"}, {"name": "z", "type": "wpimath.units.feet"}, {"name": "r", "type": "wpimath.geometry.Rotation3d"}], "tooltip": "", "importModule": "wpimath.geometry"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "fromFeet"}, "inputs": {"ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "matrix", "type": "numpy.ndarray[numpy.float64[4, 4]]"}], "tooltip": "Constructs a pose with the specified affine transformation matrix.\n\n:param matrix: The affine transformation matrix.\n               @throws std::domain_error if the affine transformation matrix is invalid.", "importModule": "wpimath.geometry"}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "fromMatrix"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTwist3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Twist3d", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}, {"name": "end", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns a Twist3d that maps this pose to the end pose. If c is the output\nof a.Log(b), then a.Exp(c) would yield b.\n\n:param end: The end pose for the transformation.\n\n:returns: The twist that maps this to end.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "log"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}, {"name": "other", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns the current pose relative to the given pose.\n\nThis function can often be used for trajectory tracking or pose\nstabilization algorithms to get the error between the reference and the\ncurrent pose.\n\n:param other: The pose that is the origin of the new coordinate frame that\n              the current pose will be converted into.\n\n:returns: The current pose relative to the new origin pose.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "relativeTo"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}, {"name": "other", "type": "wpimath.geometry.Rotation3d"}], "tooltip": "Rotates the pose around the origin and returns the new pose.\n\n:param other: The rotation to transform the pose by, which is applied\n              extrinsically (from the global frame).\n\n:returns: The rotated pose.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "rotateBy"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myRotation3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Rotation3d", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns the underlying rotation.\n\n:returns: Reference to the rotational component of the pose.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "rotation"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "numpy.ndarray[numpy.float64[4, 4]]", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns an affine transformation matrix representation of this pose.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "toMatrix"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Pose2d", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns a Pose2d representing this Pose3d projected into the X-Y plane.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "toPose2d"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Pose3d", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}, {"name": "other", "type": "wpimath.geometry.Transform3d"}], "tooltip": "Transforms the pose by the given transformation and returns the new\ntransformed pose. The transform is applied relative to the pose's frame.\nNote that this differs from Pose3d::RotateBy(const Rotation3d&), which is\napplied relative to the global frame and around the origin.\n\n:param other: The transform to transform the pose by.\n\n:returns: The transformed pose.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "transformBy"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTransform3d"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTranslation3d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.geometry.Translation3d", "args": [{"name": "pose3d", "type": "wpimath.geometry.Pose3d"}], "tooltip": "Returns the underlying translation.\n\n:returns: Reference to the translational component of the pose.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.geometry.Pose3d", "FUNC": "translation"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose3d"}}}}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "Pose3d",
    contents: contents,
    className: "wpimath.geometry.Pose3d",
  };

  return category;
}
