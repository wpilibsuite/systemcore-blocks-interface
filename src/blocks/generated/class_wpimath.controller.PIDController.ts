// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.controller.PIDController

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 32 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPIDController"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.controller.PIDController", "args": [{"name": "Kp", "type": "float"}, {"name": "Ki", "type": "float"}, {"name": "Kd", "type": "float"}, {"name": "period", "type": "wpimath.units.seconds"}], "tooltip": "Allocates a PIDController with the given constants for Kp, Ki, and Kd.\n\n:param Kp:     The proportional coefficient. Must be >= 0.\n:param Ki:     The integral coefficient. Must be >= 0.\n:param Kd:     The derivative coefficient. Must be >= 0.\n:param period: The period between controller updates in seconds. The\n               default is 20 milliseconds. Must be positive.", "importModule": "wpimath.controller"}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Returns true if the error is within the tolerance of the setpoint.\nThe error tolerance defauls to 0.05, and the error derivative tolerance\ndefaults to \u221e.\n\nThis will return false until at least one input value has been computed.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "atSetpoint"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "measurement", "type": "float"}], "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "measurement", "type": "float"}, {"name": "setpoint", "type": "float"}], "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param setpoint:    The new setpoint of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Disables continuous input.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "disableContinuousInput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "minimumInput", "type": "float"}, {"name": "maximumInput", "type": "float"}], "tooltip": "Enables continuous input.\n\nRather then using the max and min input range as constraints, it considers\nthem to be the same point and automatically calculates the shortest route\nto the setpoint.\n\n:param minimumInput: The minimum value expected from the input.\n:param maximumInput: The maximum value expected from the input.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "enableContinuousInput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the accumulated error used in the integral calculation of this\ncontroller.\n\n:returns: The accumulated error of this controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getAccumulatedError"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the differential coefficient.\n\n:returns: differential coefficient", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getD"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Returns the difference between the setpoint and the measurement.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getError"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Returns the error derivative.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getErrorDerivative"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the error derivative tolerance of this controller. Defaults to \u221e.\n\n:returns: The error derivative tolerance of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getErrorDerivativeTolerance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the error tolerance of this controller. Defaults to 0.05.\n\n:returns: The error tolerance of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getErrorTolerance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the integral coefficient.\n\n:returns: integral coefficient", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getI"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Get the IZone range.\n\n:returns: Maximum magnitude of error to allow integral control.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getIZone"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the proportional coefficient.\n\n:returns: proportional coefficient", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getP"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.seconds", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the period of this controller.\n\n:returns: The period of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getPeriod"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Returns the difference between the setpoint and the measurement.\n\n:deprecated: Use GetError() instead.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getPositionError"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the position tolerance of this controller.\n\n:deprecated: Use GetErrorTolerance() instead.\n\n:returns: The position tolerance of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getPositionTolerance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Returns the current setpoint of the PIDController.\n\n:returns: The current setpoint.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getSetpoint"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Returns the velocity error.\n\n:deprecated: Use GetErrorDerivative() instead.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getVelocityError"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Gets the velocity tolerance of this controller.\n\n:deprecated: Use GetErrorDerivativeTolerance() instead.\n\n:returns: The velocity tolerance of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "getVelocityTolerance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Returns true if continuous input is enabled.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "isContinuousInputEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}], "tooltip": "Reset the previous error, the integral term, and disable the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "Kd", "type": "float"}], "tooltip": "Sets the differential coefficient of the PID controller gain.\n\n:param Kd: The differential coefficient. Must be >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "setD"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "Ki", "type": "float"}], "tooltip": "Sets the integral coefficient of the PID controller gain.\n\n:param Ki: The integral coefficient. Must be >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "setI"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "iZone", "type": "float"}], "tooltip": "Sets the IZone range. When the absolute value of the position error is\ngreater than IZone, the total accumulated error will reset to zero,\ndisabling integral gain until the absolute value of the position error is\nless than IZone. This is used to prevent integral windup. Must be\nnon-negative. Passing a value of zero will effectively disable integral\ngain. Passing a value of infinity disables IZone functionality.\n\n:param iZone: Maximum magnitude of error to allow integral control. Must be\n              >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "setIZone"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "minimumIntegral", "type": "float"}, {"name": "maximumIntegral", "type": "float"}], "tooltip": "Sets the minimum and maximum contributions of the integral term.\n\nThe internal integrator is clamped so that the integral term's contribution\nto the output stays between minimumIntegral and maximumIntegral. This\nprevents integral windup.\n\n:param minimumIntegral: The minimum contribution of the integral term.\n:param maximumIntegral: The maximum contribution of the integral term.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "setIntegratorRange"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "Kp", "type": "float"}], "tooltip": "Sets the proportional coefficient of the PID controller gain.\n\n:param Kp: The proportional coefficient. Must be >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "setP"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "Kp", "type": "float"}, {"name": "Ki", "type": "float"}, {"name": "Kd", "type": "float"}], "tooltip": "Sets the PID Controller gain parameters.\n\nSets the proportional, integral, and differential coefficients.\n\n:param Kp: The proportional coefficient. Must be >= 0.\n:param Ki: The integral coefficient. Must be >= 0.\n:param Kd: The differential coefficient. Must be >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "setPID"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "setpoint", "type": "float"}], "tooltip": "Sets the setpoint for the PIDController.\n\n:param setpoint: The desired setpoint.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "setSetpoint"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pIDController", "type": "wpimath.controller.PIDController"}, {"name": "errorTolerance", "type": "float"}, {"name": "errorDerivativeTolerance", "type": "float"}], "tooltip": "Sets the error which is considered tolerable for use with AtSetpoint().\n\n:param errorTolerance:           error which is tolerable.\n:param errorDerivativeTolerance: error derivative which is tolerable.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.PIDController", "FUNC": "setTolerance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPIDController"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "PIDController",
    contents: contents,
    className: "wpimath.controller.PIDController",
  };

  return category;
}
