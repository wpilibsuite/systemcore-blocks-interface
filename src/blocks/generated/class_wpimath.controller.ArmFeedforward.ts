// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.controller.ArmFeedforward

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 11 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myArmFeedforward"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.controller.ArmFeedforward", "args": [{"name": "kS", "type": "wpimath.units.volts"}, {"name": "kG", "type": "wpimath.units.volts"}, {"name": "kV", "type": "wpimath.units.volt_seconds_per_radian"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_radian"}, {"name": "dt", "type": "wpimath.units.seconds"}], "tooltip": "Creates a new ArmFeedforward with the specified gains.\n\n:param kS: The static gain, in volts.\n:param kG: The gravity gain, in volts.\n:param kV: The velocity gain, in volt seconds per radian.\n:param kA: The acceleration gain, in volt seconds\u00b2 per radian.\n:param dt: The period in seconds.\n           @throws IllegalArgumentException for kv &lt; zero.\n           @throws IllegalArgumentException for ka &lt; zero.\n           @throws IllegalArgumentException for period &le; zero.", "importModule": "wpimath.controller"}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.volts", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}, {"name": "currentAngle", "type": "wpimath.units.radians"}, {"name": "currentVelocity", "type": "wpimath.units.radians_per_second"}], "tooltip": "Calculates the feedforward from the gains and setpoint assuming discrete\ncontrol. Use this method when the velocity does not change.\n\n:param currentAngle:    The current angle. This angle should be measured from\n                        the horizontal (i.e. if the provided angle is 0, the arm should be parallel\n                        to the floor). If your encoder does not follow this convention, an offset\n                        should be added.\n:param currentVelocity: The current velocity.\n\n:returns: The computed feedforward in volts.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.volts", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}, {"name": "currentAngle", "type": "wpimath.units.radians"}, {"name": "currentVelocity", "type": "wpimath.units.radians_per_second"}, {"name": "nextVelocity", "type": "wpimath.units.radians_per_second"}], "tooltip": "Calculates the feedforward from the gains and setpoints assuming discrete\ncontrol.\n\n:param currentAngle:    The current angle. This angle should be measured from\n                        the horizontal (i.e. if the provided angle is 0, the arm should be parallel\n                        to the floor). If your encoder does not follow this convention, an offset\n                        should be added.\n:param currentVelocity: The current velocity.\n:param nextVelocity:    The next velocity.\n\n:returns: The computed feedforward in volts.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.volt_seconds_squared_per_radian", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}], "tooltip": "Returns the acceleration gain.\n\n:returns: The acceleration gain.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "getKa"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.volts", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}], "tooltip": "Returns the gravity gain.\n\n:returns: The gravity gain.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "getKg"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.volts", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}], "tooltip": "Returns the static gain.\n\n:returns: The static gain.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "getKs"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.volt_seconds_per_radian", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}], "tooltip": "Returns the velocity gain.\n\n:returns: The velocity gain.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "getKv"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.radians_per_second_squared", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "velocity", "type": "wpimath.units.radians_per_second"}], "tooltip": "Calculates the maximum achievable acceleration given a maximum voltage\nsupply, a position, and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the arm.\n:param angle:      The angle of the arm. This angle should be measured\n                   from the horizontal (i.e. if the provided angle is 0,\n                   the arm should be parallel to the floor). If your\n                   encoder does not follow this convention, an offset\n                   should be added.\n:param velocity:   The velocity of the arm.\n\n:returns: The maximum possible acceleration at the given velocity and angle.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "maxAchievableAcceleration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.radians_per_second", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "acceleration", "type": "wpimath.units.radians_per_second_squared"}], "tooltip": "Calculates the maximum achievable velocity given a maximum voltage supply,\na position, and an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the arm.\n:param angle:        The angle of the arm. This angle should be measured\n                     from the horizontal (i.e. if the provided angle is 0,\n                     the arm should be parallel to the floor). If your\n                     encoder does not follow this convention, an offset\n                     should be added.\n:param acceleration: The acceleration of the arm.\n\n:returns: The maximum possible velocity at the given acceleration and angle.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "maxAchievableVelocity"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.radians_per_second_squared", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "velocity", "type": "wpimath.units.radians_per_second"}], "tooltip": "Calculates the minimum achievable acceleration given a maximum voltage\nsupply, a position, and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the arm.\n:param angle:      The angle of the arm. This angle should be measured\n                   from the horizontal (i.e. if the provided angle is 0,\n                   the arm should be parallel to the floor). If your\n                   encoder does not follow this convention, an offset\n                   should be added.\n:param velocity:   The velocity of the arm.\n\n:returns: The minimum possible acceleration at the given velocity and angle.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "minAchievableAcceleration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.radians_per_second", "args": [{"name": "armFeedforward", "type": "wpimath.controller.ArmFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "acceleration", "type": "wpimath.units.radians_per_second_squared"}], "tooltip": "Calculates the minimum achievable velocity given a maximum voltage supply,\na position, and an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the arm.\n:param angle:        The angle of the arm. This angle should be measured\n                     from the horizontal (i.e. if the provided angle is 0,\n                     the arm should be parallel to the floor). If your\n                     encoder does not follow this convention, an offset\n                     should be added.\n:param acceleration: The acceleration of the arm.\n\n:returns: The minimum possible velocity at the given acceleration and angle.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "minAchievableVelocity"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "ArmFeedforward",
    contents: contents,
    className: "wpimath.controller.ArmFeedforward",
  };

  return category;
}
