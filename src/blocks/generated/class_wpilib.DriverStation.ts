// This file was generated. Do not edit!

import * as getPythonVariable from "../mrc_get_python_variable";
import * as pythonEnum from "../mrc_get_python_enum_value";
import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.DriverStation

export function initialize() {
  getPythonVariable.initializeClassVariableGetter("wpilib.DriverStation", "int", ["kJoystickPorts"], []);
  pythonEnum.initializeEnum("wpilib.DriverStation.Alliance", ["kBlue", "kRed"], "The robot alliance that the robot is a part of.\n\nMembers:\n\n  kRed : Red alliance.\n\n  kBlue : Blue alliance.");
  pythonEnum.initializeEnum("wpilib.DriverStation.MatchType", ["kElimination", "kNone", "kPractice", "kQualification"], "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination.");
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 49 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "mrc_get_python_variable", "extraState": {"varKind": "class", "moduleOrClassName": "wpilib.DriverStation", "varType": "int", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "VAR": "kJoystickPorts"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "Optional[wpilib._wpilib.DriverStation.Alliance]", "args": [], "tooltip": "Get the current alliance from the FMS.\n\nIf the FMS is not connected, it is set from the team alliance setting on\nthe driver station.\n\n:returns: The alliance (red or blue) or an empty optional if the alliance is\n          invalid", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getAlliance"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Read the battery voltage.\n\n:returns: The battery voltage in Volts.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getBatteryVoltage"}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTuple"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "tuple[bool, bool, bool]", "args": [{"name": "driverStation", "type": "wpilib.DriverStation"}], "tooltip": "More efficient way to determine what state the robot is in.\n\n:returns: booleans representing enabled, isautonomous, istest\n\n.. versionadded:: 2019.2.1\n\n.. note:: This function only exists in RobotPy", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getControlState"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDriverStation"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "str", "args": [], "tooltip": "Returns the name of the competition event provided by the FMS.\n\n:returns: A string containing the event name", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getEventName"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "str", "args": [], "tooltip": "Returns the game specific message provided by the FMS.\n\nIf the FMS is not connected, it is set from the game data setting on the\ndriver station.\n\n:returns: A string containing the game specific message.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getGameSpecificMessage"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [{"name": "stick", "type": "int"}, {"name": "axis", "type": "int"}], "tooltip": "Returns the types of Axes on a given joystick port.\n\n:param stick: The joystick port number and the target axis\n:param axis:  The analog axis value to read from the joystick.\n\n:returns: What type of axis the axis is reporting to be", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getJoystickAxisType"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [{"name": "stick", "type": "int"}], "tooltip": "Returns a boolean indicating if the controller is an xbox controller.\n\n:param stick: The joystick port number\n\n:returns: A boolean that is true if the controller is an xbox controller.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getJoystickIsXbox"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "str", "args": [{"name": "stick", "type": "int"}], "tooltip": "Returns the name of the joystick at the given port.\n\n:param stick: The joystick port number\n\n:returns: The name of the joystick at the given port", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getJoystickName"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [{"name": "stick", "type": "int"}], "tooltip": "Returns the type of joystick at a given port.\n\n:param stick: The joystick port number\n\n:returns: The HID type of joystick at the given port", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getJoystickType"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "Optional[int]", "args": [], "tooltip": "Return the driver station location from the FMS.\n\nIf the FMS is not connected, it is set from the team alliance setting on\nthe driver station.\n\nThis could return 1, 2, or 3.\n\n:returns: The location of the driver station (1-3, 0 for invalid)", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getLocation"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Returns the match number provided by the FMS.\n\n:returns: The number of the match", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getMatchNumber"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.units.seconds", "args": [], "tooltip": "Return the approximate match time. The FMS does not send an official match\ntime to the robots, but does send an approximate match time. The value will\ncount down the time remaining in the current period (auto or teleop).\nWarning: This is not an official time (so it cannot be used to dispute ref\ncalls or guarantee that a function will trigger before the match ends).\n\nWhen connected to the real field, this number only changes in full\ninteger increments, and always counts down.\n\nWhen the DS is in practice mode, this number is a floating point number,\nand counts down.\n\nWhen the DS is in teleop or autonomous mode, this number is a floating\npoint number, and counts up.\n\nSimulation matches DS behavior without an FMS connected.\n\n:returns: Time remaining in current match period (auto or teleop) in seconds", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getMatchTime"}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myMatchType"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpilib.DriverStation.MatchType", "args": [], "tooltip": "Returns the type of match being played provided by the FMS.\n\n:returns: The match type enum (kNone, kPractice, kQualification,\n          kElimination)", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getMatchType"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Returns the number of times the current match has been replayed from the\nFMS.\n\n:returns: The number of replays", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getReplayNumber"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [{"name": "stick", "type": "int"}, {"name": "axis", "type": "int"}], "tooltip": "Get the value of the axis on a joystick.\n\nThis depends on the mapping of the joystick connected to the specified\nport.\n\n:param stick: The joystick to read.\n:param axis:  The analog axis value to read from the joystick.\n\n:returns: The value of the axis on the joystick.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickAxis"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [{"name": "stick", "type": "int"}], "tooltip": "Returns the number of axes on a given joystick port.\n\n:param stick: The joystick port number\n\n:returns: The number of axes on the indicated joystick", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickAxisCount"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [{"name": "stick", "type": "int"}, {"name": "button", "type": "int"}], "tooltip": "The state of one joystick button. %Button indexes begin at 1.\n\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n\n:returns: The state of the joystick button.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickButton"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [{"name": "stick", "type": "int"}], "tooltip": "Returns the number of buttons on a given joystick port.\n\n:param stick: The joystick port number\n\n:returns: The number of buttons on the indicated joystick", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickButtonCount"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [{"name": "stick", "type": "int"}, {"name": "button", "type": "int"}], "tooltip": "Whether one joystick button was pressed since the last check. %Button\nindexes begin at 1.\n\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n\n:returns: Whether the joystick button was pressed since the last check.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickButtonPressed"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [{"name": "stick", "type": "int"}, {"name": "button", "type": "int"}], "tooltip": "Whether one joystick button was released since the last check. %Button\nindexes begin at 1.\n\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n\n:returns: Whether the joystick button was released since the last check.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickButtonReleased"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [{"name": "stick", "type": "int"}], "tooltip": "The state of the buttons on the joystick.\n\n:param stick: The joystick to read.\n\n:returns: The state of the buttons on the joystick.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickButtons"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [{"name": "stick", "type": "int"}, {"name": "pov", "type": "int"}], "tooltip": "Get the state of a POV on the joystick.\n\n:returns: the angle of the POV in degrees, or -1 if the POV is not pressed.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickPOV"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [{"name": "stick", "type": "int"}], "tooltip": "Returns the number of POVs on a given joystick port.\n\n:param stick: The joystick port number\n\n:returns: The number of POVs on the indicated joystick", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "getStickPOVCount"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the DS is commanding autonomous mode.\n\n:returns: True if the robot is being commanded to be in autonomous mode", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isAutonomous"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the DS is commanding autonomous mode and if it has enabled the\nrobot.\n\n:returns: True if the robot is being commanded to be in autonomous mode and\n          enabled.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isAutonomousEnabled"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the DS is attached.\n\n:returns: True if the DS is connected to the robot", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isDSAttached"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the robot is disabled.\n\n:returns: True if the robot is explicitly disabled or the DS is not connected", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isDisabled"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the robot is e-stopped.\n\n:returns: True if the robot is e-stopped", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isEStopped"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the DS has enabled the robot.\n\n:returns: True if the robot is enabled and the DS is connected", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isEnabled"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Is the driver station attached to a Field Management System?\n\n:returns: True if the robot is competing on a field being controlled by a\n          Field Management System", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isFMSAttached"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [{"name": "stick", "type": "int"}], "tooltip": "Returns if a joystick is connected to the Driver Station.\n\nThis makes a best effort guess by looking at the reported number of axis,\nbuttons, and POVs attached.\n\n:param stick: The joystick port number\n\n:returns: true if a joystick is connected", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isJoystickConnected"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Returns whether joystick connection warnings are silenced. This will\nalways return false when connected to the FMS.\n\n:returns: Whether joystick connection warnings are silenced.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isJoystickConnectionWarningSilenced"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the DS is commanding teleop mode.\n\n:returns: True if the robot is being commanded to be in teleop mode", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isTeleop"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the DS is commanding teleop mode and if it has enabled the robot.\n\n:returns: True if the robot is being commanded to be in teleop mode and\n          enabled.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isTeleopEnabled"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the DS is commanding test mode.\n\n:returns: True if the robot is being commanded to be in test mode", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isTest"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the DS is commanding Test mode and if it has enabled the robot.\n\n:returns: True if the robot is being commanded to be in Test mode and\n          enabled.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "isTestEnabled"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "handle", "type": "int"}], "tooltip": "Registers the given handle for DS data refresh notifications.\n\n:param handle: The event handle.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "provideRefreshedDataEventHandle"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [], "tooltip": "Copy data from the DS task for the user. If no new data exists, it will\njust be returned, otherwise the data will be copied from the DS polling\nloop.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "refreshData"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "handle", "type": "int"}], "tooltip": "Unregisters the given handle from DS data refresh notifications.\n\n:param handle: The event handle.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "removeRefreshedDataEventHandle"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "silence", "type": "bool"}], "tooltip": "Allows the user to specify whether they want joystick connection warnings\nto be printed to the console. This setting is ignored when the FMS is\nconnected -- warnings will always be on in that scenario.\n\n:param silence: Whether warning messages should be silenced.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "silenceJoystickConnectionWarning"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "log", "type": "wpiutil.log.DataLog"}, {"name": "logJoysticks", "type": "bool"}], "tooltip": "Starts logging DriverStation data to data log. Repeated calls are ignored.\n\n:param log:          data log\n:param logJoysticks: if true, log joystick data", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "startDataLog"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDataLog"}}}}, "ARG1": {"shadow": {"type": "logic_boolean", "fields": {"BOOL": "TRUE"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [{"name": "timeout", "type": "wpimath.units.seconds"}], "tooltip": "Wait for a DS connection.\n\n:param timeout: timeout in seconds. 0 for infinite.\n\n:returns: true if connected, false if timeout", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.DriverStation", "FUNC": "waitForDsConnection"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.DriverStation.Alliance", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.DriverStation.Alliance", "ENUM_VALUE": "kBlue"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.DriverStation.Alliance", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.DriverStation.Alliance", "ENUM_VALUE": "kRed"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.DriverStation.MatchType", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.DriverStation.MatchType", "ENUM_VALUE": "kElimination"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.DriverStation.MatchType", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.DriverStation.MatchType", "ENUM_VALUE": "kNone"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.DriverStation.MatchType", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.DriverStation.MatchType", "ENUM_VALUE": "kPractice"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.DriverStation.MatchType", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.DriverStation.MatchType", "ENUM_VALUE": "kQualification"}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "DriverStation",
    contents: contents,
    className: "wpilib.DriverStation",
  };

  return category;
}
