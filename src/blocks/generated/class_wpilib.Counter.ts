// This file was generated. Do not edit!

import * as pythonEnum from "../mrc_get_python_enum_value";
import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.Counter

export function initialize() {
  pythonEnum.initializeEnum("wpilib.Counter.Mode", ["kExternalDirection", "kPulseLength", "kSemiperiod", "kTwoPulse"], "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection");
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 38 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCounter"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Counter", "args": [{"name": "mode", "type": "wpilib.Counter.Mode"}], "tooltip": "Create an instance of a counter where no sources are selected.\n\nThey all must be selected by calling functions to specify the up source and\nthe down source independently.\n\nThis creates a ChipObject counter and initializes status variables\nappropriately.\n\nThe counter will start counting immediately.\n\n:param mode: The counter mode", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMode"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCounter"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Counter", "args": [{"name": "channel", "type": "int"}], "tooltip": "Create an instance of a Counter object.\n\nCreate an up-Counter instance given a channel.\n\nThe counter will start counting immediately.\n\n:param channel: The DIO channel to use as the up source. 0-9 are on-board,\n                10-25 are on the MXP", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCounter"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Counter", "args": [{"name": "source", "type": "wpilib.DigitalSource"}], "tooltip": "Create an instance of a counter from a Digital Source (such as a Digital\nInput).\n\nThis is used if an existing digital input is to be shared by multiple other\nobjects such as encoders or if the Digital Source is not a Digital Input\nchannel (such as an Analog %Trigger).\n\nThe counter will start counting immediately.\n\n:param source: A pointer to the existing DigitalSource object. It will be\n               set as the Up Source.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCounter"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Counter", "args": [{"name": "trigger", "type": "wpilib.AnalogTrigger"}], "tooltip": "Create an instance of a Counter object.\n\nCreate an instance of a simple up-Counter given an analog trigger.\nUse the trigger state output from the analog trigger.\n\nThe counter will start counting immediately.\n\n:param trigger: The reference to the existing AnalogTrigger object.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCounter"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Counter", "args": [{"name": "encodingType", "type": "wpilib.interfaces.CounterBase.EncodingType"}, {"name": "upSource", "type": "wpilib.DigitalSource"}, {"name": "downSource", "type": "wpilib.DigitalSource"}, {"name": "inverted", "type": "bool"}], "tooltip": "Create an instance of a Counter object.\n\nCreates a full up-down counter given two Digital Sources.\n\n:param encodingType: The quadrature decoding mode (1x or 2x)\n:param upSource:     The pointer to the DigitalSource to set as the up\n                     source\n:param downSource:   The pointer to the DigitalSource to set as the down\n                     source\n:param inverted:     True to invert the output (reverse the direction)", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncodingType"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Disable the down counting source to the counter.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "clearDownSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Disable the up counting source to the counter.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "clearUpSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Read the current counter value.\n\nRead the value at this instant. It may still be running, so it reflects the\ncurrent value. Next time it is read, it might have a different value.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "get"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "The last direction the counter value changed.\n\n:returns: The last direction the counter value changed.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "getDirection"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Read the current scaled counter value. Read the value at this instant,\nscaled by the distance per pulse (defaults to 1).\n\n:returns: The distance since the last reset", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "getDistance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "getFPGAIndex"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.seconds", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Get the Period of the most recent count.\n\nReturns the time interval of the most recent count. This can be used for\nvelocity calculations to determine shaft speed.\n\n:returns: The period between the last two pulses in units of seconds.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "getPeriod"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Get the current rate of the Counter. Read the current rate of the counter\naccounting for the distance per pulse value. The default value for distance\nper pulse (1) yields units of pulses per second.\n\n:returns: The rate in units/sec", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "getRate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Get the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period.\n\nPerform averaging to account for mechanical imperfections or as\noversampling to increase resolution.\n\n:returns: The number of samples being averaged (from 1 to 127)", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "getSamplesToAverage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Determine if the clock is stopped.\n\nDetermine if the clocked input is stopped based on the MaxPeriod value set\nusing the SetMaxPeriod method. If the clock exceeds the MaxPeriod, then the\ndevice (and counter) are assumed to be stopped and it returns true.\n\n:returns: Returns true if the most recent counter period exceeds the\n          MaxPeriod value set by SetMaxPeriod.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "getStopped"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Reset the Counter to zero.\n\nSet the counter value to zero. This doesn't effect the running state of the\ncounter, just sets the current value to zero.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "distancePerPulse", "type": "float"}], "tooltip": "Set the distance per pulse for this counter. This sets the multiplier used\nto determine the distance driven based on the count value from the encoder.\nSet this value based on the Pulses per Revolution and factor in any gearing\nreductions. This distance can be in any units you like, linear or angular.\n\n:param distancePerPulse: The scale factor that will be used to convert\n                         pulses to useful units.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setDistancePerPulse"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "channel", "type": "int"}], "tooltip": "Set the down counting source to be a digital input channel.\n\n:param channel: The DIO channel to use as the up source. 0-9 are on-board,\n                10-25 are on the MXP", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setDownSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "triggerType", "type": "wpilib.AnalogTriggerType"}], "tooltip": "Set the down counting source to be an analog trigger.\n\n:param analogTrigger: The analog trigger object that is used for the Down\n                      Source\n:param triggerType:   The analog trigger output that will trigger the\n                      counter.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setDownSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTriggerType"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "source", "type": "wpilib.DigitalSource"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setDownSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "risingEdge", "type": "bool"}, {"name": "fallingEdge", "type": "bool"}], "tooltip": "Set the edge sensitivity on a down counting source.\n\nSet the down source to either detect rising edges or falling edges.\n\n:param risingEdge:  True to trigger on rising edges\n:param fallingEdge: True to trigger on falling edges", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setDownSourceEdge"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Set external direction mode on this counter.\n\nCounts are sourced on the Up counter input.\nThe Down counter input represents the direction to count.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setExternalDirectionMode"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "maxPeriod", "type": "wpimath.units.seconds"}], "tooltip": "Set the maximum period where the device is still considered \"moving\".\n\nSets the maximum period where the device is considered moving. This value\nis used to determine the \"stopped\" state of the counter using the\nGetStopped method.\n\n:param maxPeriod: The maximum period where the counted device is considered\n                  moving in seconds.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setMaxPeriod"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "threshold", "type": "float"}], "tooltip": "Configure the counter to count in up or down based on the length of the\ninput pulse.\n\nThis mode is most useful for direction sensitive gear tooth sensors.\n\n:param threshold: The pulse length beyond which the counter counts the\n                  opposite direction. Units are seconds.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setPulseLengthMode"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "reverseDirection", "type": "bool"}], "tooltip": "Set the Counter to return reversed sensing on the direction.\n\nThis allows counters to change the direction they are counting in the case\nof 1X and 2X quadrature encoding only. Any other counter mode isn't\nsupported.\n\n:param reverseDirection: true if the value counted should be negated.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setReverseDirection"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "samplesToAverage", "type": "int"}], "tooltip": "Set the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period. Perform averaging to account\nfor mechanical imperfections or as oversampling to increase resolution.\n\n:param samplesToAverage: The number of samples to average from 1 to 127.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setSamplesToAverage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "highSemiPeriod", "type": "bool"}], "tooltip": "Set Semi-period mode on this counter.\n\nCounts up on both rising and falling edges.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setSemiPeriodMode"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}], "tooltip": "Set standard up / down counting mode on this counter.\n\nUp and down counts are sourced independently from two inputs.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setUpDownCounterMode"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "channel", "type": "int"}], "tooltip": "Set the up source for the counter as a digital input channel.\n\n:param channel: The DIO channel to use as the up source. 0-9 are on-board,\n                10-25 are on the MXP", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setUpSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "analogTrigger", "type": "wpilib.AnalogTrigger"}, {"name": "triggerType", "type": "wpilib.AnalogTriggerType"}], "tooltip": "Set the up counting source to be an analog trigger.\n\n:param analogTrigger: The analog trigger object that is used for the Up\n                      Source\n:param triggerType:   The analog trigger output that will trigger the\n                      counter.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setUpSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTrigger"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myAnalogTriggerType"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "source", "type": "wpilib.DigitalSource"}], "tooltip": "Set the source object that causes the counter to count up.\n\nSet the up counting DigitalSource.\n\n:param source: Pointer to the DigitalSource object to set as the up source", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setUpSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "risingEdge", "type": "bool"}, {"name": "fallingEdge", "type": "bool"}], "tooltip": "Set the edge sensitivity on an up counting source.\n\nSet the up source to either detect rising edges or falling edges or both.\n\n:param risingEdge:  True to trigger on rising edges\n:param fallingEdge: True to trigger on falling edges", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setUpSourceEdge"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "counter", "type": "wpilib.Counter"}, {"name": "enabled", "type": "bool"}], "tooltip": "Select whether you want to continue updating the event timer output when\nthere are no samples captured.\n\nThe output of the event timer has a buffer of periods that are averaged and\nposted to a register on the FPGA.  When the timer detects that the event\nsource has stopped (based on the MaxPeriod) the buffer of samples to be\naveraged is emptied.  If you enable the update when empty, you will be\nnotified of the stopped source and the event time will report 0 samples.\nIf you disable update when empty, the most recent average will remain on\nthe output until a new sample is acquired.  You will never see 0 samples\noutput (except when there have been no events since an FPGA reset) and you\nwill likely not see the stopped bit become true (since it is updated at the\nend of an average and there are no samples to average).\n\n:param enabled: True to enable update when empty", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Counter", "FUNC": "setUpdateWhenEmpty"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCounter"}}}}}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.Counter.Mode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.Counter.Mode", "ENUM_VALUE": "kExternalDirection"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.Counter.Mode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.Counter.Mode", "ENUM_VALUE": "kPulseLength"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.Counter.Mode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.Counter.Mode", "ENUM_VALUE": "kSemiperiod"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.Counter.Mode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.Counter.Mode", "ENUM_VALUE": "kTwoPulse"}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "Counter",
    contents: contents,
    className: "wpilib.Counter",
  };

  return category;
}
