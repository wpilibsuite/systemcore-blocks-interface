// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.controller.ProfiledPIDController

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 36 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myProfiledPIDController"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.controller.ProfiledPIDController", "args": [{"name": "Kp", "type": "float"}, {"name": "Ki", "type": "float"}, {"name": "Kd", "type": "float"}, {"name": "constraints", "type": "wpimath.trajectory.TrapezoidProfile.Constraints"}, {"name": "period", "type": "wpimath.units.seconds"}], "tooltip": "Allocates a ProfiledPIDController with the given constants for Kp, Ki, and\nKd. Users should call reset() when they first start running the controller\nto avoid unwanted behavior.\n\n:param Kp:          The proportional coefficient. Must be >= 0.\n:param Ki:          The integral coefficient. Must be >= 0.\n:param Kd:          The derivative coefficient. Must be >= 0.\n:param constraints: Velocity and acceleration constraints for goal.\n:param period:      The period between controller updates in seconds. The\n                    default is 20 milliseconds. Must be positive.", "importModule": "wpimath.controller"}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController"}, "inputs": {"ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myConstraints"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Returns true if the error is within the tolerance of the error.\n\nThis will return false until at least one input value has been computed.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "atGoal"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Returns true if the error is within the tolerance of the error.\n\nCurrently this just reports on target as the actual value passes through\nthe setpoint. Ideally it should be based on being within the tolerance for\nsome period of time.\n\nThis will return false until at least one input value has been computed.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "atSetpoint"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "measurement", "type": "float"}], "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "measurement", "type": "float"}, {"name": "goal", "type": "wpimath.trajectory.TrapezoidProfile.State"}], "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "measurement", "type": "float"}, {"name": "goal", "type": "float"}], "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "measurement", "type": "float"}, {"name": "goal", "type": "float"}, {"name": "constraints", "type": "wpimath.trajectory.TrapezoidProfile.Constraints"}], "tooltip": "Returns the next output of the PID controller.\n\n:param measurement: The current measurement of the process variable.\n:param goal:        The new goal of the controller.\n:param constraints: Velocity and acceleration constraints for goal.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myConstraints"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Disables continuous input.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "disableContinuousInput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "minimumInput", "type": "float"}, {"name": "maximumInput", "type": "float"}], "tooltip": "Enables continuous input.\n\nRather then using the max and min input range as constraints, it considers\nthem to be the same point and automatically calculates the shortest route\nto the setpoint.\n\n:param minimumInput: The minimum value expected from the input.\n:param maximumInput: The maximum value expected from the input.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "enableContinuousInput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Gets the accumulated error used in the integral calculation of this\ncontroller.\n\n:returns: The accumulated error of this controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getAccumulatedError"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myConstraints"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.trajectory.TrapezoidProfile.Constraints", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Get the velocity and acceleration constraints for this controller.\n\n:returns: Velocity and acceleration constraints.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getConstraints"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Gets the differential coefficient.\n\n:returns: differential coefficient", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getD"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myState"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.trajectory.TrapezoidProfile.State", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Gets the goal for the ProfiledPIDController.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getGoal"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Gets the integral coefficient.\n\n:returns: integral coefficient", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getI"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Get the IZone range.\n\n:returns: Maximum magnitude of error to allow integral control.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getIZone"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Gets the proportional coefficient.\n\n:returns: proportional coefficient", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getP"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.seconds", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Gets the period of this controller.\n\n:returns: The period of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getPeriod"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Returns the difference between the setpoint and the measurement.\n\n:returns: The error.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getPositionError"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Gets the position tolerance of this controller.\n\n:returns: The position tolerance of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getPositionTolerance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myState"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.trajectory.TrapezoidProfile.State", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Returns the current setpoint of the ProfiledPIDController.\n\n:returns: The current setpoint.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getSetpoint"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.units_per_second", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Returns the change in error per second.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getVelocityError"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}], "tooltip": "Gets the velocity tolerance of this controller.\n\n:returns: The velocity tolerance of the controller.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "getVelocityTolerance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "measurement", "type": "wpimath.trajectory.TrapezoidProfile.State"}], "tooltip": "Reset the previous error and the integral term.\n\n:param measurement: The current measured State of the system.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "measuredPosition", "type": "float"}, {"name": "measuredVelocity", "type": "wpimath.units.units_per_second"}], "tooltip": "Reset the previous error and the integral term.\n\n:param measuredPosition: The current measured position of the system.\n:param measuredVelocity: The current measured velocity of the system.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "measuredPosition", "type": "float"}], "tooltip": "Reset the previous error and the integral term.\n\n:param measuredPosition: The current measured position of the system. The\n                         velocity is assumed to be zero.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "constraints", "type": "wpimath.trajectory.TrapezoidProfile.Constraints"}], "tooltip": "Set velocity and acceleration constraints for goal.\n\n:param constraints: Velocity and acceleration constraints for goal.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setConstraints"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myConstraints"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "Kd", "type": "float"}], "tooltip": "Sets the differential coefficient of the PID controller gain.\n\n:param Kd: The differential coefficient. Must be >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setD"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "goal", "type": "wpimath.trajectory.TrapezoidProfile.State"}], "tooltip": "Sets the goal for the ProfiledPIDController.\n\n:param goal: The desired unprofiled setpoint.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setGoal"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myState"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "goal", "type": "float"}], "tooltip": "Sets the goal for the ProfiledPIDController.\n\n:param goal: The desired unprofiled setpoint.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setGoal"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "Ki", "type": "float"}], "tooltip": "Sets the integral coefficient of the PID controller gain.\n\n:param Ki: The integral coefficient. Must be >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setI"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "iZone", "type": "float"}], "tooltip": "Sets the IZone range. When the absolute value of the position error is\ngreater than IZone, the total accumulated error will reset to zero,\ndisabling integral gain until the absolute value of the position error is\nless than IZone. This is used to prevent integral windup. Must be\nnon-negative. Passing a value of zero will effectively disable integral\ngain. Passing a value of infinity disables IZone functionality.\n\n:param iZone: Maximum magnitude of error to allow integral control. Must be\n              >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setIZone"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "minimumIntegral", "type": "float"}, {"name": "maximumIntegral", "type": "float"}], "tooltip": "Sets the minimum and maximum contributions of the integral term.\n\nThe internal integrator is clamped so that the integral term's contribution\nto the output stays between minimumIntegral and maximumIntegral. This\nprevents integral windup.\n\n:param minimumIntegral: The minimum contribution of the integral term.\n:param maximumIntegral: The maximum contribution of the integral term.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setIntegratorRange"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "Kp", "type": "float"}], "tooltip": "Sets the proportional coefficient of the PID controller gain.\n\n:param Kp: The proportional coefficient. Must be >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setP"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "Kp", "type": "float"}, {"name": "Ki", "type": "float"}, {"name": "Kd", "type": "float"}], "tooltip": "Sets the PID Controller gain parameters.\n\nSets the proportional, integral, and differential coefficients.\n\n:param Kp: The proportional coefficient. Must be >= 0.\n:param Ki: The integral coefficient. Must be >= 0.\n:param Kd: The differential coefficient. Must be >= 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setPID"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "profiledPIDController", "type": "wpimath.controller.ProfiledPIDController"}, {"name": "positionTolerance", "type": "float"}, {"name": "velocityTolerance", "type": "wpimath.units.units_per_second"}], "tooltip": "Sets the error which is considered tolerable for use with\nAtSetpoint().\n\n:param positionTolerance: Position error which is tolerable.\n:param velocityTolerance: Velocity error which is tolerable.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpimath.controller.ProfiledPIDController", "FUNC": "setTolerance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myProfiledPIDController"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "ProfiledPIDController",
    contents: contents,
    className: "wpimath.controller.ProfiledPIDController",
  };

  return category;
}
