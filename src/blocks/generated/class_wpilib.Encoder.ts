// This file was generated. Do not edit!

import * as pythonEnum from "../mrc_get_python_enum_value";
import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.Encoder

export function initialize() {
  pythonEnum.initializeEnum("wpilib.Encoder.IndexingType", ["kResetOnFallingEdge", "kResetOnRisingEdge", "kResetWhileHigh", "kResetWhileLow"], "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal.");
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 27 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Encoder", "args": [{"name": "aChannel", "type": "int"}, {"name": "bChannel", "type": "int"}, {"name": "reverseDirection", "type": "bool"}, {"name": "encodingType", "type": "wpilib.interfaces.CounterBase.EncodingType"}], "tooltip": "Encoder constructor.\n\nConstruct a Encoder given a and b channels.\n\nThe counter will start counting immediately.\n\n:param aChannel:         The a channel DIO channel. 0-9 are on-board, 10-25\n                         are on the MXP port\n:param bChannel:         The b channel DIO channel. 0-9 are on-board, 10-25\n                         are on the MXP port\n:param reverseDirection: represents the orientation of the encoder and\n                         inverts the output values if necessary so forward\n                         represents positive values.\n:param encodingType:     either k1X, k2X, or k4X to indicate 1X, 2X or 4X\n                         decoding. If 4X is selected, then an encoder FPGA\n                         object is used and the returned counts will be 4x\n                         the encoder spec'd value since all rising and\n                         falling edges are counted. If 1X or 2X are selected\n                         then a counter object will be used and the returned\n                         value will either exactly match the spec'd count or\n                         be double (2x) the spec'd count.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder"}, "inputs": {"ARG2": {"shadow": {"type": "logic_boolean", "fields": {"BOOL": "FALSE"}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncodingType"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Encoder", "args": [{"name": "aSource", "type": "wpilib.DigitalSource"}, {"name": "bSource", "type": "wpilib.DigitalSource"}, {"name": "reverseDirection", "type": "bool"}, {"name": "encodingType", "type": "wpilib.interfaces.CounterBase.EncodingType"}], "tooltip": "", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}, "ARG2": {"shadow": {"type": "logic_boolean", "fields": {"BOOL": "FALSE"}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncodingType"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Gets the current count.\n\nReturns the current count on the Encoder. This method compensates for the\ndecoding type.\n\n:returns: Current count from the Encoder adjusted for the 1x, 2x, or 4x scale\n          factor.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "get"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "The last direction the encoder value changed.\n\n:returns: The last direction the encoder value changed.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getDirection"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Get the distance the robot has driven since the last reset.\n\n:returns: The distance driven since the last reset as scaled by the value\n          from SetDistancePerPulse().", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getDistance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Get the distance per pulse for this encoder.\n\n:returns: The scale factor that will be used to convert pulses to useful\n          units.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getDistancePerPulse"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "The encoding scale factor 1x, 2x, or 4x, per the requested encodingType.\n\nUsed to divide raw edge counts down to spec'd counts.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getEncodingScale"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getFPGAIndex"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.seconds", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Returns the period of the most recent pulse.\n\nReturns the period of the most recent Encoder pulse in seconds. This method\ncompensates for the decoding type.\n\nWarning: This returns unscaled periods. Use GetRate() for rates that are\nscaled using the value from SetDistancePerPulse().\n\n:deprecated: Use getRate() in favor of this method.\n\n:returns: Period in seconds of the most recent pulse.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getPeriod"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Get the current rate of the encoder.\n\nUnits are distance per second as scaled by the value from\nSetDistancePerPulse().\n\n:returns: The current rate of the encoder.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getRate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Gets the raw value from the encoder.\n\nThe raw value is the actual count unscaled by the 1x, 2x, or 4x scale\nfactor.\n\n:returns: Current raw count from the encoder", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getRaw"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Get the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period.\n\nPerform averaging to account for mechanical imperfections or as\noversampling to increase resolution.\n\n:returns: The number of samples being averaged (from 1 to 127)", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getSamplesToAverage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Determine if the encoder is stopped.\n\nUsing the MaxPeriod value, a boolean is returned that is true if the\nencoder is considered stopped and false if it is still moving. A stopped\nencoder is one where the most recent pulse width exceeds the MaxPeriod.\n\n:returns: True if the encoder is considered stopped.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "getStopped"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}], "tooltip": "Reset the Encoder distance to zero.\n\nResets the current count to zero on the encoder.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "distancePerPulse", "type": "float"}], "tooltip": "Set the distance per pulse for this encoder.\n\nThis sets the multiplier used to determine the distance driven based on the\ncount value from the encoder.\n\nDo not include the decoding type in this scale.  The library already\ncompensates for the decoding type.\n\nSet this value based on the encoder's rated Pulses per Revolution and\nfactor in gearing reductions following the encoder shaft.\n\nThis distance can be in any units you like, linear or angular.\n\n:param distancePerPulse: The scale factor that will be used to convert\n                         pulses to useful units.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "setDistancePerPulse"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "channel", "type": "int"}, {"name": "type", "type": "wpilib.Encoder.IndexingType"}], "tooltip": "Set the index source for the encoder.\n\nWhen this source is activated, the encoder count automatically resets.\n\n:param channel: A DIO channel to set as the encoder index\n:param type:    The state that will cause the encoder to reset", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "setIndexSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myIndexingType"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "source", "type": "wpilib.DigitalSource"}, {"name": "type", "type": "wpilib.Encoder.IndexingType"}], "tooltip": "Set the index source for the encoder.\n\nWhen this source is activated, the encoder count automatically resets.\n\n:param source: A digital source to set as the encoder index\n:param type:   The state that will cause the encoder to reset", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "setIndexSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myIndexingType"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "maxPeriod", "type": "wpimath.units.seconds"}], "tooltip": "Sets the maximum period for stopped detection.\n\nSets the value that represents the maximum period of the Encoder before it\nwill assume that the attached device is stopped. This timeout allows users\nto determine if the wheels or other shaft has stopped rotating.\nThis method compensates for the decoding type.\n\n:deprecated: Use SetMinRate() in favor of this method.  This takes unscaled\n             periods and SetMinRate() scales using value from\n             SetDistancePerPulse().\n\n:param maxPeriod: The maximum time between rising and falling edges before\n                  the FPGA will report the device stopped. This is expressed\n                  in seconds.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "setMaxPeriod"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "minRate", "type": "float"}], "tooltip": "Set the minimum rate of the device before the hardware reports it stopped.\n\n:param minRate: The minimum rate.  The units are in distance per second as\n                scaled by the value from SetDistancePerPulse().", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "setMinRate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "reverseDirection", "type": "bool"}], "tooltip": "Set the direction sensing for this encoder.\n\nThis sets the direction sensing on the encoder so that it could count in\nthe correct software direction regardless of the mounting.\n\n:param reverseDirection: true if the encoder direction should be reversed", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "setReverseDirection"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "samplesToAverage", "type": "int"}], "tooltip": "Set the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period.\n\nPerform averaging to account for mechanical imperfections or as\noversampling to increase resolution.\n\n:param samplesToAverage: The number of samples to average from 1 to 127.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "setSamplesToAverage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "encoder", "type": "wpilib.Encoder"}, {"name": "device", "type": "int"}], "tooltip": "Indicates this encoder is used by a simulated device.\n\n:param device: simulated device handle", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Encoder", "FUNC": "setSimDevice"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myEncoder"}}}}}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.Encoder.IndexingType", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.Encoder.IndexingType", "ENUM_VALUE": "kResetOnFallingEdge"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.Encoder.IndexingType", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.Encoder.IndexingType", "ENUM_VALUE": "kResetOnRisingEdge"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.Encoder.IndexingType", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.Encoder.IndexingType", "ENUM_VALUE": "kResetWhileHigh"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.Encoder.IndexingType", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.Encoder.IndexingType", "ENUM_VALUE": "kResetWhileLow"}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "Encoder",
    contents: contents,
    className: "wpilib.Encoder",
  };

  return category;
}
