// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.Servo

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 23 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myServo"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Servo", "args": [{"name": "channel", "type": "int"}], "tooltip": "Constructor.\n\nBy default, 2.4 ms is used as the max PWM value and 0.6 ms is used as the\nmin PWM value.\n\n:param channel: The PWM channel to which the servo is attached. 0-9 are\n                on-board, 10-19 are on the MXP port", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}, {"name": "eliminateDeadband", "type": "bool"}], "tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "enableDeadbandElimination"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "servo", "type": "wpilib.Servo"}], "tooltip": "Get the servo position.\n\nServo values range from 0.0 to 1.0 corresponding to the range of full left\nto full right. This returns the commanded position, not the position that\nthe servo is actually at, as the servo does not report its own position.\n\n:returns: Position from 0.0 to 1.0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo", "FUNC": "get"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myServo"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "servo", "type": "wpilib.Servo"}], "tooltip": "Get the servo angle.\n\nThis returns the commanded angle, not the angle that the servo is actually\nat, as the servo does not report its own angle.\n\n:returns: The angle in degrees to which the servo is set.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo", "FUNC": "getAngle"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myServo"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}, {"name": "max", "type": "wpimath.units.microseconds"}, {"name": "deadbandMax", "type": "wpimath.units.microseconds"}, {"name": "center", "type": "wpimath.units.microseconds"}, {"name": "deadbandMin", "type": "wpimath.units.microseconds"}, {"name": "min", "type": "wpimath.units.microseconds"}], "tooltip": "Get the bounds on the PWM values.\n\nThis gets the bounds on the PWM values for a particular each type of\ncontroller. The values determine the upper and lower speeds as well as the\ndeadband bracket.\n\n:param max:         The maximum pwm value\n:param deadbandMax: The high end of the deadband range\n:param center:      The center speed (off)\n:param deadbandMin: The low end of the deadband range\n:param min:         The minimum pwm value", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "getBounds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "pWM", "type": "wpilib.PWM"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "getChannel"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "servo", "type": "wpilib.Servo"}], "tooltip": "Get the maximum angle of the servo.\n\n:returns: The maximum angle of the servo in degrees.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo", "FUNC": "getMaxAngle"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myServo"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "servo", "type": "wpilib.Servo"}], "tooltip": "Get the minimum angle of the servo.\n\n:returns: The minimum angle of the servo in degrees.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo", "FUNC": "getMinAngle"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myServo"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pWM", "type": "wpilib.PWM"}], "tooltip": "Get the PWM value in terms of a position.\n\nThis is intended to be used by servos.\n\n@pre SetBounds() called.\n\n:returns: The position the servo is set to between 0.0 and 1.0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "getPosition"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.microseconds", "args": [{"name": "pWM", "type": "wpilib.PWM"}], "tooltip": "Get the PWM pulse time directly from the hardware.\n\nRead a microsecond value from a PWM channel.\n\n:returns: Microsecond PWM control value.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "getPulseTime"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "float", "args": [{"name": "pWM", "type": "wpilib.PWM"}], "tooltip": "Get the PWM value in terms of speed.\n\nThis is intended to be used by motor controllers.\n\n@pre SetBounds() called.\n\n:returns: The most recently set speed between -1.0 and 1.0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "getSpeed"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "servo", "type": "wpilib.Servo"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myServo"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "servo", "type": "wpilib.Servo"}, {"name": "value", "type": "float"}], "tooltip": "Set the servo position.\n\nServo values range from 0.0 to 1.0 corresponding to the range of full left\nto full right.\n\n:param value: Position from 0.0 to 1.0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo", "FUNC": "set"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myServo"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}], "tooltip": "Sets the PWM output to be a continuous high signal while enabled.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "setAlwaysHighMode"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "servo", "type": "wpilib.Servo"}, {"name": "angle", "type": "float"}], "tooltip": "Set the servo angle.\n\nThe angles are based on the HS-322HD Servo, and have a range of 0 to 180\ndegrees.\n\nServo angles that are out of the supported range of the servo simply\n\"saturate\" in that direction. In other words, if the servo has a range of\n(X degrees to Y degrees) than angles of less than X result in an angle of\nX being set and angles of more than Y degrees result in an angle of Y being\nset.\n\n:param angle: The angle in degrees to set the servo.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo", "FUNC": "setAngle"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myServo"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}, {"name": "max", "type": "wpimath.units.microseconds"}, {"name": "deadbandMax", "type": "wpimath.units.microseconds"}, {"name": "center", "type": "wpimath.units.microseconds"}, {"name": "deadbandMin", "type": "wpimath.units.microseconds"}, {"name": "min", "type": "wpimath.units.microseconds"}], "tooltip": "Set the bounds on the PWM pulse widths.\n\nThis sets the bounds on the PWM values for a particular type of controller.\nThe values determine the upper and lower speeds as well as the deadband\nbracket.\n\n:param max:         The max PWM pulse width in us\n:param deadbandMax: The high end of the deadband range pulse width in us\n:param center:      The center (off) pulse width in us\n:param deadbandMin: The low end of the deadband pulse width in us\n:param min:         The minimum pulse width in us", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "setBounds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}], "tooltip": "Temporarily disables the PWM output. The next set call will re-enable\nthe output.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "setDisabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "servo", "type": "wpilib.Servo"}], "tooltip": "Set the servo to offline.\n\nSet the servo raw value to 0 (undriven)", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Servo", "FUNC": "setOffline"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myServo"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}, {"name": "mult", "type": "wpilib.PWM.PeriodMultiplier"}], "tooltip": "Slow down the PWM signal for old devices.\n\n:param mult: The period multiplier to apply to this channel", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "setPeriodMultiplier"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPeriodMultiplier"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}, {"name": "pos", "type": "float"}], "tooltip": "Set the PWM value based on a position.\n\nThis is intended to be used by servos.\n\n@pre SetBounds() called.\n\n:param pos: The position to set the servo between 0.0 and 1.0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "setPosition"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}, {"name": "time", "type": "wpimath.units.microseconds"}], "tooltip": "Set the PWM pulse time directly to the hardware.\n\nWrite a microsecond value to a PWM channel.\n\n:param time: Microsecond PWM value.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "setPulseTime"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}, {"name": "speed", "type": "float"}], "tooltip": "Set the PWM value based on a speed.\n\nThis is intended to be used by motor controllers.\n\n@pre SetBounds() called.\n\n:param speed: The speed to set the motor controller between -1.0 and 1.0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "setSpeed"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib.PWM"}], "tooltip": "Latches PWM to zero.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.PWM", "FUNC": "setZeroLatch"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "Servo",
    contents: contents,
    className: "wpilib.Servo",
  };

  return category;
}
