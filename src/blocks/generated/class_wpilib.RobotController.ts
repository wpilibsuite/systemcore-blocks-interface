// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.RobotController

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 39 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.units.volts", "args": [], "tooltip": "Read the battery voltage.\n\n:returns: The battery voltage in Volts.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getBatteryVoltage"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.units.volts", "args": [], "tooltip": "Get the current brownout voltage setting.\n\n:returns: The brownout voltage", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getBrownoutVoltage"}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCANStatus"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpilib.CANStatus", "args": [], "tooltip": "Get the current status of the CAN bus.\n\n:returns: The status of the CAN bus", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getCANStatus"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.units.celsius", "args": [], "tooltip": "Get the current CPU temperature.\n\n:returns: current CPU temperature", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getCPUTemp"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "str", "args": [], "tooltip": "Return the comments from the roboRIO web interface.\n\nThe comments string is cached after the first call to this function on the\nRoboRIO - restart the robot code to reload the comments string after\nchanging it in the web interface.\n\n:returns: The comments from the roboRIO web interface.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getComments"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Gets the number of times the system has been disabled due to communication\nerrors with the Driver Station.\n\n:returns: number of disables due to communication errors.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getCommsDisableCount"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Get the current output of the 3.3V rail.\n\n:returns: The controller 3.3V rail output current value in Amps", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getCurrent3V3"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Get the current output of the 5V rail.\n\n:returns: The controller 5V rail output current value in Amps", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getCurrent5V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Get the current output of the 6V rail.\n\n:returns: The controller 6V rail output current value in Amps", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getCurrent6V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Get the enabled state of the 3.3V rail. The rail may be disabled due to\ncalling SetEnabled3V3(), a controller brownout, a short circuit on the\nrail, or controller over-voltage.\n\n:returns: The controller 3.3V rail enabled value. True for enabled.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getEnabled3V3"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Get the enabled state of the 5V rail. The rail may be disabled due to\ncalling SetEnabled5V(), a controller brownout, a short circuit on the rail,\nor controller over-voltage.\n\n:returns: The controller 5V rail enabled value. True for enabled.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getEnabled5V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Get the enabled state of the 6V rail. The rail may be disabled due to\ncalling SetEnabled6V(), a controller brownout, a short circuit on the rail,\nor controller over-voltage.\n\n:returns: The controller 6V rail enabled value. True for enabled.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getEnabled6V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Return the FPGA Revision number.\n\nThe format of the revision is 3 numbers. The 12 most significant bits are\nthe Major Revision. The next 8 bits are the Minor Revision. The 12 least\nsignificant bits are the Build Number.\n\n:returns: FPGA Revision number.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getFPGARevision"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Read the microsecond-resolution timer on the FPGA.\n\n:returns: The current time in microseconds according to the FPGA (since FPGA\n          reset).", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getFPGATime"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Return the FPGA Version number.\n\nFor now, expect this to be competition year.\n\n:returns: FPGA Version number.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getFPGAVersion"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Get the count of the total current faults on the 3.3V rail since the\ncode started.\n\n:returns: The number of faults", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getFaultCount3V3"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Get the count of the total current faults on the 5V rail since the\ncode started.\n\n:returns: The number of faults", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getFaultCount5V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Get the count of the total current faults on the 6V rail since the\ncode started.\n\n:returns: The number of faults.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getFaultCount6V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Get the input current to the robot controller.\n\n:returns: The controller input current value in Amps", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getInputCurrent"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Get the input voltage to the robot controller.\n\n:returns: The controller input voltage value in Volts", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getInputVoltage"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Gets the current state of the Robot Signal Light (RSL)\n\n:returns: The current state of the RSL- true if on, false if off", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getRSLState"}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myRadioLEDState"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpilib.RadioLEDState", "args": [], "tooltip": "Get the state of the \"Radio\" LED. On the RoboRIO, this reads from sysfs, so\nthis function should not be called multiple times per loop cycle to avoid\noverruns.\n\n:returns: The state of the LED.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getRadioLEDState"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "str", "args": [], "tooltip": "Return the serial number of the roboRIO.\n\n:returns: The serial number of the roboRIO.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getSerialNumber"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Returns the team number configured for the robot controller.\n\n:returns: team number, or 0 if not found.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getTeamNumber"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "int", "args": [], "tooltip": "Read the microsecond timestamp. By default, the time is based on the FPGA\nhardware clock in microseconds since the FPGA started. However, the return\nvalue of this method may be modified to use any time base, including\nnon-monotonic and non-continuous time bases.\n\n:returns: The current time in microseconds.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getTime"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Get the state of the \"USER\" button on the roboRIO.\n\n@warning the User Button is used to stop user programs from automatically\nloading if it is held for more then 5 seconds. Because of this, it's not\nrecommended to be used by teams for any other purpose.\n\n:returns: True if the button is currently pressed down", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getUserButton"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Get the voltage of the 3.3V rail.\n\n:returns: The controller 3.3V rail voltage value in Volts", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getVoltage3V3"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Get the voltage of the 5V rail.\n\n:returns: The controller 5V rail voltage value in Volts", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getVoltage5V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "float", "args": [], "tooltip": "Get the voltage of the 6V rail.\n\n:returns: The controller 6V rail voltage value in Volts", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "getVoltage6V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the system is browned out.\n\n:returns: True if the system is browned out", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "isBrownedOut"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Check if the FPGA outputs are enabled.\n\nThe outputs may be disabled if the robot is disabled or e-stopped, the\nwatchdog has expired, or if the roboRIO browns out.\n\n:returns: True if the FPGA outputs are enabled.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "isSysActive"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "bool", "args": [], "tooltip": "Gets if the system time is valid.\n\n:returns: True if the system time is valid, false otherwise", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "isSystemTimeValid"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [], "tooltip": "Reset the overcurrent fault counters for all user rails to 0.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "resetRailFaultCounts"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "brownoutVoltage", "type": "wpimath.units.volts"}], "tooltip": "Set the voltage the roboRIO will brownout and disable all outputs.\n\nNote that this only does anything on the roboRIO 2.\nOn the roboRIO it is a no-op.\n\n:param brownoutVoltage: The brownout voltage", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "setBrownoutVoltage"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "enabled", "type": "bool"}], "tooltip": "Enables or disables the 3.3V rail.\n\n:param enabled: whether to enable the 3.3V rail.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "setEnabled3V3"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "enabled", "type": "bool"}], "tooltip": "Enables or disables the 5V rail.\n\n:param enabled: whether to enable the 5V rail.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "setEnabled5V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "enabled", "type": "bool"}], "tooltip": "Enables or disables the 6V rail.\n\n:param enabled: whether to enable the 6V rail.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "setEnabled6V"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "state", "type": "wpilib.RadioLEDState"}], "tooltip": "Set the state of the \"Radio\" LED. On the RoboRIO, this writes to sysfs, so\nthis function should not be called multiple times per loop cycle to avoid\noverruns.\n\n:param state: The state to set the LED to.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "setRadioLEDState"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRadioLEDState"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "supplier", "type": "Callable[[], int]"}], "tooltip": "Sets a new source to provide the clock time in microseconds. Changing this\naffects the return value of ``GetTime``.\n\n:param supplier: Function to return the time in microseconds.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.RobotController", "FUNC": "setTimeSource"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myCallable"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "RobotController",
    contents: contents,
    className: "wpilib.RobotController",
  };

  return category;
}
