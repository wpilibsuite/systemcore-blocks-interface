// This file was generated. Do not edit!

import * as pythonEnum from "../mrc_get_python_enum_value";
import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.SerialPort

export function initialize() {
  pythonEnum.initializeEnum("wpilib.SerialPort.FlowControl", ["kFlowControl_DtrDsr", "kFlowControl_None", "kFlowControl_RtsCts", "kFlowControl_XonXoff"], "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control.");
  pythonEnum.initializeEnum("wpilib.SerialPort.Parity", ["kParity_Even", "kParity_Mark", "kParity_None", "kParity_Odd", "kParity_Space"], "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off.");
  pythonEnum.initializeEnum("wpilib.SerialPort.Port", ["kMXP", "kOnboard", "kUSB", "kUSB1", "kUSB2"], "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as kUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2.");
  pythonEnum.initializeEnum("wpilib.SerialPort.StopBits", ["kStopBits_One", "kStopBits_OnePointFive", "kStopBits_Two"], "Represents the number of stop bits to use for Serial Communication.\n\nMembers:\n\n  kStopBits_One : One stop bit.\n\n  kStopBits_OnePointFive : One and a half stop bits.\n\n  kStopBits_Two : Two stop bits.");
  pythonEnum.initializeEnum("wpilib.SerialPort.WriteBufferMode", ["kFlushOnAccess", "kFlushWhenFull"], "Represents which type of buffer mode to use when writing to a serial port.\n\nMembers:\n\n  kFlushOnAccess : Flush the buffer on each access.\n\n  kFlushWhenFull : Flush the buffer when it is full.");
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 33 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "mySerialPort"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.SerialPort", "args": [{"name": "baudRate", "type": "int"}, {"name": "port", "type": "wpilib.SerialPort.Port"}, {"name": "dataBits", "type": "int"}, {"name": "parity", "type": "wpilib.SerialPort.Parity"}, {"name": "stopBits", "type": "wpilib.SerialPort.StopBits"}], "tooltip": "Create an instance of a Serial Port class.\n\n:param baudRate: The baud rate to configure the serial port.\n:param port:     The physical port to use\n:param dataBits: The number of data bits per transfer.  Valid values are\n                 between 5 and 8 bits.\n:param parity:   Select the type of parity checking to use.\n:param stopBits: The number of stop bits to use as defined by the enum\n                 StopBits.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort"}, "inputs": {"ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPort"}}}}, "ARG2": {"shadow": {"type": "math_number", "fields": {"NUM": 8.0}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myParity"}}}}, "ARG4": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myStopBits"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "mySerialPort"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.SerialPort", "args": [{"name": "baudRate", "type": "int"}, {"name": "portName", "type": "str"}, {"name": "port", "type": "wpilib.SerialPort.Port"}, {"name": "dataBits", "type": "int"}, {"name": "parity", "type": "wpilib.SerialPort.Parity"}, {"name": "stopBits", "type": "wpilib.SerialPort.StopBits"}], "tooltip": "Create an instance of a Serial Port class.\n\nPrefer to use the constructor that doesn't take a port name, but in some\ncases the automatic detection might not work correctly.\n\n:param baudRate: The baud rate to configure the serial port.\n:param port:     The physical port to use\n:param portName: The direct port name to use\n:param dataBits: The number of data bits per transfer.  Valid values are\n                 between 5 and 8 bits.\n:param parity:   Select the type of parity checking to use.\n:param stopBits: The number of stop bits to use as defined by the enum\n                 StopBits.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort"}, "inputs": {"ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPort"}}}}, "ARG3": {"shadow": {"type": "math_number", "fields": {"NUM": 8.0}}}, "ARG4": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myParity"}}}}, "ARG5": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myStopBits"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}], "tooltip": "Disable termination behavior.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "disableTermination"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}, {"name": "terminator", "type": "str"}], "tooltip": "Enable termination and specify the termination character.\n\nTermination is currently only implemented for receive.\nWhen the the terminator is received, the Read() or Scanf() will return\nfewer bytes than requested, stopping after the terminator.\n\n:param terminator: The character to use for termination.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "enableTermination"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}, "ARG1": {"shadow": {"type": "text", "fields": {"TEXT": "\\n"}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}], "tooltip": "Force the output buffer to be written to the port.\n\nThis is used when SetWriteBufferMode() is set to kFlushWhenFull to force a\nflush before the buffer is full.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "flush"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}], "tooltip": "Get the number of bytes currently available to read from the serial port.\n\n:returns: The number of bytes available to read", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "getBytesReceived"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}, {"name": "buffer", "type": "Buffer"}], "tooltip": "Read raw bytes out of the buffer.\n\n:param buffer: Pointer to the buffer to store the bytes in.\n:param count:  The maximum number of bytes to read.\n\n:returns: The number of bytes actually read into the buffer.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "read"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}], "tooltip": "Reset the serial port driver to a known state.\n\nEmpty the transmit and receive buffers in the device and formatted I/O.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}, {"name": "flowControl", "type": "wpilib.SerialPort.FlowControl"}], "tooltip": "Set the type of flow control to enable on this port.\n\nBy default, flow control is disabled.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "setFlowControl"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myFlowControl"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}, {"name": "size", "type": "int"}], "tooltip": "Specify the size of the input buffer.\n\nSpecify the amount of data that can be stored before data\nfrom the device is returned to Read or Scanf.  If you want\ndata that is received to be returned immediately, set this to 1.\n\nIt the buffer is not filled before the read timeout expires, all\ndata that has been received so far will be returned.\n\n:param size: The read buffer size.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "setReadBufferSize"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}, {"name": "timeout", "type": "wpimath.units.seconds"}], "tooltip": "Configure the timeout of the serial port.\n\nThis defines the timeout for transactions with the hardware.\nIt will affect reads and very large writes.\n\n:param timeout: The time to wait for I/O.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "setTimeout"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}, {"name": "mode", "type": "wpilib.SerialPort.WriteBufferMode"}], "tooltip": "Specify the flushing behavior of the output buffer.\n\nWhen set to kFlushOnAccess, data is synchronously written to the serial\nport after each call to either Printf() or Write().\n\nWhen set to kFlushWhenFull, data will only be written to the serial port\nwhen the buffer is full or when Flush() is called.\n\n:param mode: The write buffer mode.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "setWriteBufferMode"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myWriteBufferMode"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}, {"name": "size", "type": "int"}], "tooltip": "Specify the size of the output buffer.\n\nSpecify the amount of data that can be stored before being\ntransmitted to the device.\n\n:param size: The write buffer size.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "setWriteBufferSize"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "serialPort", "type": "wpilib.SerialPort"}, {"name": "buffer", "type": "Buffer"}], "tooltip": "Write raw bytes to the buffer.\n\n:param buffer: Pointer to the buffer to read the bytes from.\n:param count:  The maximum number of bytes to write.\n\n:returns: The number of bytes actually written into the port.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.SerialPort", "FUNC": "write"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySerialPort"}}}}}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.FlowControl", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.FlowControl", "ENUM_VALUE": "kFlowControl_DtrDsr"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.FlowControl", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.FlowControl", "ENUM_VALUE": "kFlowControl_None"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.FlowControl", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.FlowControl", "ENUM_VALUE": "kFlowControl_RtsCts"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.FlowControl", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.FlowControl", "ENUM_VALUE": "kFlowControl_XonXoff"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Parity", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Parity", "ENUM_VALUE": "kParity_Even"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Parity", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Parity", "ENUM_VALUE": "kParity_Mark"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Parity", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Parity", "ENUM_VALUE": "kParity_None"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Parity", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Parity", "ENUM_VALUE": "kParity_Odd"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Parity", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Parity", "ENUM_VALUE": "kParity_Space"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Port", "ENUM_VALUE": "kMXP"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Port", "ENUM_VALUE": "kOnboard"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Port", "ENUM_VALUE": "kUSB"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Port", "ENUM_VALUE": "kUSB1"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.Port", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.Port", "ENUM_VALUE": "kUSB2"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.StopBits", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.StopBits", "ENUM_VALUE": "kStopBits_One"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.StopBits", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.StopBits", "ENUM_VALUE": "kStopBits_OnePointFive"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.StopBits", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.StopBits", "ENUM_VALUE": "kStopBits_Two"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.WriteBufferMode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.WriteBufferMode", "ENUM_VALUE": "kFlushOnAccess"}},
    {"kind": "block", "type": "mrc_get_python_enum_value", "extraState": {"enumType": "wpilib.SerialPort.WriteBufferMode", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.SerialPort.WriteBufferMode", "ENUM_VALUE": "kFlushWhenFull"}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "SerialPort",
    contents: contents,
    className: "wpilib.SerialPort",
  };

  return category;
}
