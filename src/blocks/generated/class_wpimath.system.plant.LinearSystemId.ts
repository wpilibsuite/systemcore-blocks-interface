// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpimath.system.plant.LinearSystemId

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 14 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystemId"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpimath.system.plant.LinearSystemId", "args": [], "tooltip": "", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_1_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_1_2", "args": [{"name": "motor", "type": "wpimath.system.plant.DCMotor"}, {"name": "J", "type": "wpimath.units.kilogram_square_meters"}, {"name": "gearing", "type": "float"}], "tooltip": "Create a state-space model of a DC motor system. The states of the system\nare [angular position, angular velocity], inputs are [voltage], and outputs\nare [angular position, angular velocity].\n\n:param motor:   The motor (or gearbox) attached to the system.\n:param J:       the moment of inertia J of the DC motor.\n:param gearing: Gear ratio from motor to output.\n                @throws std::domain_error if J <= 0 or gearing <= 0.\n                @see <a\n                href=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "DCMotorSystem"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_1_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_1_2", "args": [{"name": "kV", "type": "wpimath.units.volt_seconds_per_meter"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_meter"}], "tooltip": "Create a state-space model of a DC motor system from its kV\n(volts/(unit/sec)) and kA (volts/(unit/sec\u00b2)). These constants can be\nfound using SysId. the states of the system are [position, velocity],\ninputs are [voltage], and outputs are [position].\n\nYou MUST use an SI unit (i.e. meters or radians) for the Distance template\nargument. You may still use non-SI units (such as feet or inches) for the\nactual method arguments; they will automatically be converted to SI\ninternally.\n\nThe parameters provided by the user are from this feedforward model:\n\nu = K_v v + K_a a\n\n@throws std::domain_error if kV < 0 or kA <= 0.\n\n:param kV: The velocity gain, in volts/(unit/sec).\n:param kA: The acceleration gain, in volts/(unit/sec\u00b2).", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "DCMotorSystem"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_1_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_1_2", "args": [{"name": "kV", "type": "wpimath.units.volt_seconds_per_radian"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_radian"}], "tooltip": "", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "DCMotorSystemRadians"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_2_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_2_2", "args": [{"name": "motor", "type": "wpimath.system.plant.DCMotor"}, {"name": "mass", "type": "wpimath.units.kilograms"}, {"name": "r", "type": "wpimath.units.meters"}, {"name": "rb", "type": "wpimath.units.meters"}, {"name": "J", "type": "wpimath.units.kilogram_square_meters"}, {"name": "gearing", "type": "float"}], "tooltip": "Create a state-space model of differential drive drivetrain. In this model,\nthe states are [left velocity, right velocity], the inputs are [left\nvoltage, right voltage], and the outputs are [left velocity, right\nvelocity]\n\n:param motor:   The motor (or gearbox) driving the drivetrain.\n:param mass:    The mass of the robot in kilograms.\n:param r:       The radius of the wheels in meters.\n:param rb:      The radius of the base (half of the track width), in meters.\n:param J:       The moment of inertia of the robot.\n:param gearing: Gear ratio from motor to wheel.\n                @throws std::domain_error if mass <= 0, r <= 0, rb <= 0, J <= 0, or\n                gearing <= 0.", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "drivetrainVelocitySystem"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_1_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_1_2", "args": [{"name": "motor", "type": "wpimath.system.plant.DCMotor"}, {"name": "mass", "type": "wpimath.units.kilograms"}, {"name": "radius", "type": "wpimath.units.meters"}, {"name": "gearing", "type": "float"}], "tooltip": "Create a state-space model of the elevator system. The states of the system\nare [position, velocity], inputs are [voltage], and outputs are [position].\n\n:param motor:   The motor (or gearbox) attached to the carriage.\n:param mass:    The mass of the elevator carriage, in kilograms.\n:param radius:  The radius of the elevator's driving drum, in meters.\n:param gearing: Gear ratio from motor to carriage.\n                @throws std::domain_error if mass <= 0, radius <= 0, or gearing <= 0.", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "elevatorSystem"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_1_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_1_1_1", "args": [{"name": "motor", "type": "wpimath.system.plant.DCMotor"}, {"name": "J", "type": "wpimath.units.kilogram_square_meters"}, {"name": "gearing", "type": "float"}], "tooltip": "Create a state-space model of a flywheel system, the states of the system\nare [angular velocity], inputs are [voltage], and outputs are [angular\nvelocity].\n\n:param motor:   The motor (or gearbox) attached to the flywheel.\n:param J:       The moment of inertia J of the flywheel.\n:param gearing: Gear ratio from motor to flywheel.\n                @throws std::domain_error if J <= 0 or gearing <= 0.", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "flywheelSystem"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_2_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_2_2", "args": [{"name": "kVLinear", "type": "wpimath.units.volt_seconds_per_meter"}, {"name": "kALinear", "type": "wpimath.units.volt_seconds_squared_per_meter"}, {"name": "kVAngular", "type": "wpimath.units.volt_seconds_per_meter"}, {"name": "kAAngular", "type": "wpimath.units.volt_seconds_squared_per_meter"}], "tooltip": "Identify a differential drive drivetrain given the drivetrain's kV and kA\nin both linear {(volts/(meter/sec), (volts/(meter/sec\u00b2))} and angular\n{(volts/(radian/sec), (volts/(radian/sec\u00b2))} cases. These constants can be\nfound using SysId.\n\nStates: [[left velocity], [right velocity]]\nInputs: [[left voltage], [right voltage]]\nOutputs: [[left velocity], [right velocity]]\n\n:param kVLinear:  The linear velocity gain in volts per (meters per second).\n:param kALinear:  The linear acceleration gain in volts per (meters per\n                  second squared).\n:param kVAngular: The angular velocity gain in volts per (meters per\n                  second).\n:param kAAngular: The angular acceleration gain in volts per (meters per\n                  second squared).\n                  @throws domain_error if kVLinear <= 0, kALinear <= 0, kVAngular <= 0,\n                  or kAAngular <= 0.\n                  @see <a\n                  href=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "identifyDrivetrainSystem"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_2_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_2_2", "args": [{"name": "kVLinear", "type": "wpimath.units.volt_seconds_per_meter"}, {"name": "kALinear", "type": "wpimath.units.volt_seconds_squared_per_meter"}, {"name": "kVAngular", "type": "wpimath.units.volt_seconds_per_radian"}, {"name": "kAAngular", "type": "wpimath.units.volt_seconds_squared_per_radian"}, {"name": "trackwidth", "type": "wpimath.units.meters"}], "tooltip": "Identify a differential drive drivetrain given the drivetrain's kV and kA\nin both linear {(volts/(meter/sec)), (volts/(meter/sec\u00b2))} and angular\n{(volts/(radian/sec)), (volts/(radian/sec\u00b2))} cases. This can be found\nusing SysId.\n\nStates: [[left velocity], [right velocity]]\nInputs: [[left voltage], [right voltage]]\nOutputs: [[left velocity], [right velocity]]\n\n:param kVLinear:   The linear velocity gain in volts per (meters per\n                   second).\n:param kALinear:   The linear acceleration gain in volts per (meters per\n                   second squared).\n:param kVAngular:  The angular velocity gain in volts per (radians per\n                   second).\n:param kAAngular:  The angular acceleration gain in volts per (radians per\n                   second squared).\n:param trackwidth: The distance between the differential drive's left and\n                   right wheels, in meters.\n                   @throws domain_error if kVLinear <= 0, kALinear <= 0, kVAngular <= 0,\n                   kAAngular <= 0, or trackwidth <= 0.\n                   @see <a\n                   href=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "identifyDrivetrainSystem"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_1_1", "args": [{"name": "kV", "type": "wpimath.units.volt_seconds_per_meter"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_meter"}], "tooltip": "Create a state-space model for a 1 DOF position system from its kV\n(volts/(unit/sec)) and kA (volts/(unit/sec\u00b2)). These constants can be\nfound using SysId. the states of the system are [position, velocity],\ninputs are [voltage], and outputs are [position].\n\nYou MUST use an SI unit (i.e. meters or radians) for the Distance template\nargument. You may still use non-SI units (such as feet or inches) for the\nactual method arguments; they will automatically be converted to SI\ninternally.\n\nThe parameters provided by the user are from this feedforward model:\n\nu = K_v v + K_a a\n\n@throws std::domain_error if kV < 0 or kA <= 0.\n@see <a\nhref=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>\n\n:param kV: The velocity gain, in volts/(unit/sec).\n:param kA: The acceleration gain, in volts/(unit/sec\u00b2).", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "identifyPositionSystemMeters"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_1_1", "args": [{"name": "kV", "type": "wpimath.units.volt_seconds_per_radian"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_radian"}], "tooltip": "", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "identifyPositionSystemRadians"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_1_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_1_1_1", "args": [{"name": "kV", "type": "wpimath.units.volt_seconds_per_meter"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_meter"}], "tooltip": "Create a state-space model for a 1 DOF velocity system from its kV\n(volts/(unit/sec)) and kA (volts/(unit/sec\u00b2)). These constants can be\nfound using SysId. The states of the system are [velocity], inputs are\n[voltage], and outputs are [velocity].\n\nYou MUST use an SI unit (i.e. meters or radians) for the Distance template\nargument. You may still use non-SI units (such as feet or inches) for the\nactual method arguments; they will automatically be converted to SI\ninternally.\n\nThe parameters provided by the user are from this feedforward model:\n\nu = K_v v + K_a a\n\n:param kV: The velocity gain, in volts/(unit/sec).\n:param kA: The acceleration gain, in volts/(unit/sec\u00b2).\n           @throws std::domain_error if kV < 0 or kA <= 0.\n           @see <a\n           href=\"https://github.com/wpilibsuite/sysid\">https://github.com/wpilibsuite/sysid</a>", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "identifyVelocitySystemMeters"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_1_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_1_1_1", "args": [{"name": "kV", "type": "wpimath.units.volt_seconds_per_radian"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_radian"}], "tooltip": "", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "identifyVelocitySystemRadians"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystem_2_1_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "wpimath.system.LinearSystem_2_1_2", "args": [{"name": "motor", "type": "wpimath.system.plant.DCMotor"}, {"name": "J", "type": "wpimath.units.kilogram_square_meters"}, {"name": "gearing", "type": "float"}], "tooltip": "Create a state-space model of a single-jointed arm system.The states of the\nsystem are [angle, angular velocity], inputs are [voltage], and outputs are\n[angle].\n\n:param motor:   The motor (or gearbox) attached to the arm.\n:param J:       The moment of inertia J of the arm.\n:param gearing: Gear ratio from motor to arm.\n                @throws std::domain_error if J <= 0 or gearing <= 0.", "importModule": "wpimath.system.plant"}, "fields": {"MODULE_OR_CLASS": "wpimath.system.plant.LinearSystemId", "FUNC": "singleJointedArmSystem"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "LinearSystemId",
    contents: contents,
    className: "wpimath.system.plant.LinearSystemId",
  };

  return category;
}
