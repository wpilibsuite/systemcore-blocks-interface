// This file was generated. Do not edit!

import * as toolboxItems from "../../toolbox/items";

// Blocks for class wpilib.Ultrasonic

export function initialize() {
}

export function getToolboxCategory(subcategories: toolboxItems.Category[] = []): toolboxItems.Category {

  // There are 12 blocks.
  const contents: toolboxItems.ContentsType[] = [
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myUltrasonic"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Ultrasonic", "args": [{"name": "pingChannel", "type": "int"}, {"name": "echoChannel", "type": "int"}], "tooltip": "Create an instance of the Ultrasonic Sensor.\n\nThis is designed to support the Daventech SRF04 and Vex ultrasonic sensors.\n\n:param pingChannel: The digital output channel that sends the pulse to\n                    initiate the sensor sending the ping.\n:param echoChannel: The digital input channel that receives the echo. The\n                    length of time that the echo is high represents the\n                    round trip time of the ping, and the distance.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic"}}}}},
    {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myUltrasonic"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "constructor", "returnType": "wpilib.Ultrasonic", "args": [{"name": "pingChannel", "type": "wpilib.DigitalOutput"}, {"name": "echoChannel", "type": "wpilib.DigitalInput"}], "tooltip": "Create an instance of an Ultrasonic Sensor from a DigitalInput for the echo\nchannel and a DigitalOutput for the ping channel.\n\n:param pingChannel: The digital output object that starts the sensor doing a\n                    ping. Requires a 10uS pulse to start.\n:param echoChannel: The digital input object that times the return pulse to\n                    determine the range.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalOutput"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalInput"}}}}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "int", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}], "tooltip": "Returns the echo channel.\n\n:returns: The echo channel.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "getEchoChannel"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.meters", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}], "tooltip": "Get the range from the ultrasonic sensor.\n\n:returns: Range of the target returned from the ultrasonic sensor. If there\n          is no valid value yet, i.e. at least one measurement hasn't\n          completed, then return 0.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "getRange"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.inches", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "getRangeInches"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "wpimath.units.millimeters", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "getRangeMM"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}, {"name": "builder", "type": "wpiutil.SendableBuilder"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "isEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "bool", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}], "tooltip": "Check if there is a valid range measurement.\n\nThe ranges are accumulated in a counter that will increment on each edge of\nthe echo (return) signal. If the count is not at least 2, then the range\nhas not yet been measured, and is invalid.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "isRangeValid"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}], "tooltip": "Single ping to ultrasonic sensor.\n\nSend out a single ping to the ultrasonic sensor. This only works if\nautomatic (round robin) mode is disabled. A single ping is sent out, and\nthe counter should count the semi-period when it comes in. The counter is\nreset to make the current value invalid.", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "ping"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "static", "returnType": "None", "args": [{"name": "enabling", "type": "bool"}], "tooltip": "Turn Automatic mode on/off.\n\nWhen in Automatic mode, all sensors will fire in round robin, waiting a set\ntime between each sensor.\n\n:param enabling: Set to true if round robin scheduling should start for all\n                 the ultrasonic sensors. This scheduling method assures that\n                 the sensors are non-interfering because no two sensors fire\n                 at the same time. If another scheduling algorithm is\n                 preferred, it can be implemented by pinging the sensors\n                 manually and waiting for the results to come back.", "importModule": "wpilib"}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "setAutomaticMode"}},
    {"kind": "block", "type": "mrc_call_python_function", "extraState": {"functionKind": "instance", "returnType": "None", "args": [{"name": "ultrasonic", "type": "wpilib.Ultrasonic"}, {"name": "enable", "type": "bool"}], "tooltip": "", "importModule": ""}, "fields": {"MODULE_OR_CLASS": "wpilib.Ultrasonic", "FUNC": "setEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myUltrasonic"}}}}}},
  ];

  contents.push(...subcategories);

  const category: toolboxItems.PythonClassCategory = {
    kind: "category",
    name:  "Ultrasonic",
    contents: contents,
    className: "wpilib.Ultrasonic",
  };

  return category;
}
